/**
 *	Animation library for Manialink
 */
/**
 * Available easing:
 *	- Linear
 *	- Quad
 *	- Cubic
 *	- Quart
 *	- Quint
 *	- Sine
 *	- Exp
 *	- Circ
 *	- Back
 *	- Elastic
 *	- Elastic2
 *	- Bounce
 */
#Const Version		"2016-03-29"
#Const ScriptName	"Animations.Script.txt"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_LibAnim_Prefix	"LibAnim_"	///< Prefix used by the library

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return														The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return														The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/** Insert the #Include statements needed by the library
 *
 *	@param	_Modules									The modules used
 *
 *	@return														The modules includes
 */
Text Includes(Text _LibPrefix) {
	return """
#Include "AnimLib" as {{{_LibPrefix}}}AL
#Include "TextLib" as {{{_LibPrefix}}}TL
""";
}

// ---------------------------------- //
/// Overload the Includes() function
Text Includes() {
	return Includes(C_LibAnim_Prefix);
}

// ---------------------------------- //
/** Insert the constants of the modules
 *
 *	@param	_Modules									The modules used
 *
 *	@return														The modules constants
 */
Text Constants(Text _LibPrefix) {
	return """
#Const {{{_LibPrefix}}}C_Controls_Start		0
#Const {{{_LibPrefix}}}C_Controls_End			1
#Const {{{_LibPrefix}}}C_Controls_AnimId	2
#Const {{{_LibPrefix}}}C_Controls_Easing	3

#Const {{{_LibPrefix}}}C_Anims_Initialized		0
#Const {{{_LibPrefix}}}C_Anims_Start_PosX			1
#Const {{{_LibPrefix}}}C_Anims_End_PosX				2
#Const {{{_LibPrefix}}}C_Anims_Start_PosY			3
#Const {{{_LibPrefix}}}C_Anims_End_PosY				4
#Const {{{_LibPrefix}}}C_Anims_Start_ZIndex		5
#Const {{{_LibPrefix}}}C_Anims_End_ZIndex			6
#Const {{{_LibPrefix}}}C_Anims_Start_SizeX		7
#Const {{{_LibPrefix}}}C_Anims_End_SizeX			8
#Const {{{_LibPrefix}}}C_Anims_Start_SizeY		9
#Const {{{_LibPrefix}}}C_Anims_End_SizeY			10
#Const {{{_LibPrefix}}}C_Anims_Start_Visible	11
#Const {{{_LibPrefix}}}C_Anims_End_Visible		12
#Const {{{_LibPrefix}}}C_Anims_Start_Scale		13
#Const {{{_LibPrefix}}}C_Anims_End_Scale			14
#Const {{{_LibPrefix}}}C_Anims_Start_Rot			15
#Const {{{_LibPrefix}}}C_Anims_End_Rot				16

#Const {{{_LibPrefix}}}Easing_Linear				0
#Const {{{_LibPrefix}}}Easing_InQuad				1
#Const {{{_LibPrefix}}}Easing_OutQuad				2
#Const {{{_LibPrefix}}}Easing_InOutQuad			3
#Const {{{_LibPrefix}}}Easing_InCubic				4
#Const {{{_LibPrefix}}}Easing_OutCubic			5
#Const {{{_LibPrefix}}}Easing_InOutCubic		6
#Const {{{_LibPrefix}}}Easing_InQuart				7
#Const {{{_LibPrefix}}}Easing_OutQuart			8
#Const {{{_LibPrefix}}}Easing_InOutQuart		9
#Const {{{_LibPrefix}}}Easing_InQuint				10
#Const {{{_LibPrefix}}}Easing_OutQuint			11
#Const {{{_LibPrefix}}}Easing_InOutQuint		12
#Const {{{_LibPrefix}}}Easing_InSine				13
#Const {{{_LibPrefix}}}Easing_OutSine				14
#Const {{{_LibPrefix}}}Easing_InOutSine			15
#Const {{{_LibPrefix}}}Easing_InExp					16
#Const {{{_LibPrefix}}}Easing_OutExp				17
#Const {{{_LibPrefix}}}Easing_InOutExp			18
#Const {{{_LibPrefix}}}Easing_InCirc				19
#Const {{{_LibPrefix}}}Easing_OutCirc				20
#Const {{{_LibPrefix}}}Easing_InOutCirc			21
#Const {{{_LibPrefix}}}Easing_InBack				22
#Const {{{_LibPrefix}}}Easing_OutBack				23
#Const {{{_LibPrefix}}}Easing_InOutBack			24
#Const {{{_LibPrefix}}}Easing_InElastic			25
#Const {{{_LibPrefix}}}Easing_OutElastic		26
#Const {{{_LibPrefix}}}Easing_InOutElastic	27
#Const {{{_LibPrefix}}}Easing_InElastic2		28
#Const {{{_LibPrefix}}}Easing_OutElastic2		29
#Const {{{_LibPrefix}}}Easing_InOutElastic2	30
#Const {{{_LibPrefix}}}Easing_InBounce			31
#Const {{{_LibPrefix}}}Easing_OutBounce			32
#Const {{{_LibPrefix}}}Easing_InOutBounce		33
""";
}

// ---------------------------------- //
/// Overload the Constants() function
Text Constants() {
	return Constants(C_LibAnim_Prefix);
}

// ---------------------------------- //
/** Insert the functions of the modules
 *
 *	@param	_Modules									The modules used
 *
 *	@return														The modules functions
 */
Text Functions(Text _LibPrefix) {
	return """
declare Integer[][][CMlControl] {{{_LibPrefix}}}G_Controls;
declare Real[Integer][Integer] {{{_LibPrefix}}}G_Anims;
declare CMlControl[Integer] {{{_LibPrefix}}}G_AnimsToControl;

Integer {{{_LibPrefix}}}Private_GetAnimId() {
	declare Count = {{{_LibPrefix}}}G_Anims.count;
	while (Count > 0) {
		if (!{{{_LibPrefix}}}G_Anims.existskey(Count)) return Count;
		Count -= 1;
	}
	return Count;
}

Real {{{_LibPrefix}}}Private_AnimReal(
	Integer _Easing,
	Real _StartValue,
	Real _EndValue,
	Integer _StartTime,
	Integer _EndTime
) {
	switch (_Easing) {
		case {{{_LibPrefix}}}Easing_Linear	: return {{{_LibPrefix}}}AL::EaseLinear(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InQuad	: return {{{_LibPrefix}}}AL::EaseInQuad(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutQuad	: return {{{_LibPrefix}}}AL::EaseOutQuad(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutQuad	: return {{{_LibPrefix}}}AL::EaseInOutQuad(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InCubic	: return {{{_LibPrefix}}}AL::EaseInCubic(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutCubic	: return {{{_LibPrefix}}}AL::EaseOutCubic(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutCubic	: return {{{_LibPrefix}}}AL::EaseInOutCubic(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InQuart	: return {{{_LibPrefix}}}AL::EaseInQuart(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutQuart	: return {{{_LibPrefix}}}AL::EaseOutQuart(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutQuart	: return {{{_LibPrefix}}}AL::EaseInOutQuart(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InQuint	: return {{{_LibPrefix}}}AL::EaseInQuint(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutQuint	: return {{{_LibPrefix}}}AL::EaseOutQuint(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutQuint	: return {{{_LibPrefix}}}AL::EaseInOutQuint(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InSine	: return {{{_LibPrefix}}}AL::EaseInSine(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutSine	: return {{{_LibPrefix}}}AL::EaseOutSine(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutSine	: return {{{_LibPrefix}}}AL::EaseInOutSine(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InExp	: return {{{_LibPrefix}}}AL::EaseInExp(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutExp	: return {{{_LibPrefix}}}AL::EaseOutExp(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutExp	: return {{{_LibPrefix}}}AL::EaseInOutExp(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InCirc	: return {{{_LibPrefix}}}AL::EaseInCirc(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutCirc	: return {{{_LibPrefix}}}AL::EaseOutCirc(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutCirc	: return {{{_LibPrefix}}}AL::EaseInOutCirc(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InBack	: return {{{_LibPrefix}}}AL::EaseInBack(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutBack	: return {{{_LibPrefix}}}AL::EaseOutBack(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutBack	: return {{{_LibPrefix}}}AL::EaseInOutBack(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InElastic	: return {{{_LibPrefix}}}AL::EaseInElastic(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutElastic	: return {{{_LibPrefix}}}AL::EaseOutElastic(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutElastic	: return {{{_LibPrefix}}}AL::EaseInOutElastic(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InElastic2	: return {{{_LibPrefix}}}AL::EaseInElastic2(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutElastic2	: return {{{_LibPrefix}}}AL::EaseOutElastic2(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutElastic2	: return {{{_LibPrefix}}}AL::EaseInOutElastic2(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InBounce	: return {{{_LibPrefix}}}AL::EaseInBounce(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_OutBounce	: return {{{_LibPrefix}}}AL::EaseOutBounce(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		case {{{_LibPrefix}}}Easing_InOutBounce	: return {{{_LibPrefix}}}AL::EaseInOutBounce(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
		default															: return {{{_LibPrefix}}}AL::EaseLinear(Now - _StartTime, _StartValue, _EndValue - _StartValue, _EndTime - _StartTime);
	}
	return 0.;
}

Integer {{{_LibPrefix}}}CreateAnim(CMlControl _Control, Integer _Start, Integer _End, Integer _Easing) {
	if (_Control == Null) return -1;
	
	declare AnimId = {{{_LibPrefix}}}Private_GetAnimId();
	{{{_LibPrefix}}}G_Anims[AnimId] = Real[Integer];
	{{{_LibPrefix}}}G_AnimsToControl[AnimId] = _Control;
	
	if (!{{{_LibPrefix}}}G_Controls.existskey(_Control)) {{{_LibPrefix}}}G_Controls[_Control] = Integer[][];
	{{{_LibPrefix}}}G_Controls[_Control].add([_Start, _End, AnimId, _Easing]);
	
	return AnimId;
}

Void {{{_LibPrefix}}}SetSize(Integer _AnimId, Vec2 _Size) {
	if (!{{{_LibPrefix}}}G_Anims.existskey(_AnimId)) return;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_SizeX] = _Size.X;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_SizeY] = _Size.Y;
}

Void {{{_LibPrefix}}}SetPos(Integer _AnimId, Vec2 _Pos) {
	if (!{{{_LibPrefix}}}G_Anims.existskey(_AnimId)) return;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_PosX] = _Pos.X;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_PosY] = _Pos.Y;
}

Void {{{_LibPrefix}}}SetZIndex(Integer _AnimId, Real _ZIndex) {
	if (!{{{_LibPrefix}}}G_Anims.existskey(_AnimId)) return;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_ZIndex] = _ZIndex;
}

Void {{{_LibPrefix}}}SetVisible(Integer _AnimId, Boolean _Visible) {
	if (!{{{_LibPrefix}}}G_Anims.existskey(_AnimId)) return;
	declare Visible = 0.;
	if (_Visible) Visible = 1.;
	else Visible = -1.;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_Visible] = Visible;
}

Void {{{_LibPrefix}}}SetScale(Integer _AnimId, Real _Scale) {
	if (!{{{_LibPrefix}}}G_Anims.existskey(_AnimId)) return;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_Scale] = _Scale;
}

Void {{{_LibPrefix}}}SetRot(Integer _AnimId, Real _Rot) {
	if (!{{{_LibPrefix}}}G_Anims.existskey(_AnimId)) return;
	{{{_LibPrefix}}}G_Anims[_AnimId][{{{_LibPrefix}}}C_Anims_End_Rot] = _Rot;
}

Void {{{_LibPrefix}}}Init() {
	
}

Void {{{_LibPrefix}}}Loop() {
	declare Integer[Integer][CMlControl] ToRemove;
	foreach (Control => Anims in {{{_LibPrefix}}}G_Controls) {
		if (Anims.count <= 0) {
			ToRemove[Control] = Integer[Integer];
		} else {
			foreach (Key => Anim in Anims) {
				declare StartTime = Anim[{{{_LibPrefix}}}C_Controls_Start];
				if (StartTime > Now) continue;
				declare EndTime = Anim[{{{_LibPrefix}}}C_Controls_End];
				declare AnimId = Anim[{{{_LibPrefix}}}C_Controls_AnimId];
				
				if (Now < EndTime) {
					declare Easing = Anim[{{{_LibPrefix}}}C_Controls_Easing];
					declare Props = Real[Integer];
					if ({{{_LibPrefix}}}G_Anims.existskey(AnimId)) {
						Props = {{{_LibPrefix}}}G_Anims[AnimId];
						if (!Props.existskey({{{_LibPrefix}}}C_Anims_Initialized)) {
							Props[{{{_LibPrefix}}}C_Anims_Initialized] = 0.;
							foreach (Prop => Value in Props) {
								switch (Prop) {
									case {{{_LibPrefix}}}C_Anims_End_SizeX: {
										Props[{{{_LibPrefix}}}C_Anims_Start_SizeX] = Control.Size.X;
									}
									case {{{_LibPrefix}}}C_Anims_End_SizeY: {
										Props[{{{_LibPrefix}}}C_Anims_Start_SizeY] = Control.Size.Y;
									}
									case {{{_LibPrefix}}}C_Anims_End_PosX: {
										Props[{{{_LibPrefix}}}C_Anims_Start_PosX] = Control.RelativePosition_V3.X;
									}
									case {{{_LibPrefix}}}C_Anims_End_PosY: {
										Props[{{{_LibPrefix}}}C_Anims_Start_PosY] = Control.RelativePosition_V3.Y;
									}
									case {{{_LibPrefix}}}C_Anims_End_ZIndex: {
										Props[{{{_LibPrefix}}}C_Anims_Start_ZIndex] = Control.ZIndex;
									}
									case {{{_LibPrefix}}}C_Anims_End_Visible: {
										if (Value > 0.) Control.Visible = True;
										Props[{{{_LibPrefix}}}C_Anims_Start_Visible] = 0.;
									}
									case {{{_LibPrefix}}}C_Anims_End_Scale: {
										Props[{{{_LibPrefix}}}C_Anims_Start_Scale] = Control.RelativeScale;
									}
									case {{{_LibPrefix}}}C_Anims_End_Rot: {
										Props[{{{_LibPrefix}}}C_Anims_Start_Rot] = Control.RelativeRotation;
									}
								}
							}
							{{{_LibPrefix}}}G_Anims[AnimId] = Props;
						}
					}
					foreach (Prop => Value in Props) {
						switch (Prop) {
							case {{{_LibPrefix}}}C_Anims_Start_SizeX: {
								Control.Size.X = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_SizeX], StartTime, EndTime);
							}
							case {{{_LibPrefix}}}C_Anims_Start_SizeY: {
								Control.Size.Y = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_SizeY], StartTime, EndTime);
							}
							case {{{_LibPrefix}}}C_Anims_Start_PosX: {
								Control.RelativePosition_V3.X = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_PosX], StartTime, EndTime);
							}
							case {{{_LibPrefix}}}C_Anims_Start_PosY: {
								Control.RelativePosition_V3.Y = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_PosY], StartTime, EndTime);
							}
							case {{{_LibPrefix}}}C_Anims_Start_ZIndex: {
								Control.ZIndex = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_ZIndex], StartTime, EndTime);
							}
							case {{{_LibPrefix}}}C_Anims_Start_Scale: {
								Control.RelativeScale = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_Scale], StartTime, EndTime);
							}
							case {{{_LibPrefix}}}C_Anims_Start_Rot: {
								Control.RelativeRotation = {{{_LibPrefix}}}Private_AnimReal(Easing, Value, Props[{{{_LibPrefix}}}C_Anims_End_Rot], StartTime, EndTime);
							}
						}
					}
				} else {
					if (!ToRemove.existskey(Control)) ToRemove[Control] = Integer[Integer];
					ToRemove[Control][Key] = AnimId;
					
					declare Props = {{{_LibPrefix}}}G_Anims[AnimId];
					foreach (Prop => Value in Props) {
						switch (Prop) {
							case {{{_LibPrefix}}}C_Anims_Start_SizeX: {
								Control.Size.X = Props[{{{_LibPrefix}}}C_Anims_End_SizeX];
							}
							case {{{_LibPrefix}}}C_Anims_Start_SizeY: {
								Control.Size.Y = Props[{{{_LibPrefix}}}C_Anims_End_SizeY];
							}
							case {{{_LibPrefix}}}C_Anims_Start_PosX: {
								Control.RelativePosition_V3.X = Props[{{{_LibPrefix}}}C_Anims_End_PosX];
							}
							case {{{_LibPrefix}}}C_Anims_Start_PosY: {
								Control.RelativePosition_V3.Y = Props[{{{_LibPrefix}}}C_Anims_End_PosY];
							}
							case {{{_LibPrefix}}}C_Anims_Start_ZIndex: {
								Control.ZIndex = Props[{{{_LibPrefix}}}C_Anims_End_ZIndex];
							}
							case {{{_LibPrefix}}}C_Anims_Start_Visible: {
								Control.Visible = (Props[{{{_LibPrefix}}}C_Anims_End_ZIndex] > 0.);
							}
							case {{{_LibPrefix}}}C_Anims_Start_Scale: {
								Control.RelativeScale = Props[{{{_LibPrefix}}}C_Anims_End_Scale];
							}
							case {{{_LibPrefix}}}C_Anims_Start_Rot: {
								Control.RelativeRotation = Props[{{{_LibPrefix}}}C_Anims_End_Rot];
							}
						}
					}
				}
			}
		}
	}
	
	foreach (Control => AnimsIds in ToRemove) {
		foreach (Key => AnimId in AnimsIds) {
			declare Removed = {{{_LibPrefix}}}G_Controls[Control].removekey(Key);
			Removed = {{{_LibPrefix}}}G_Anims.removekey(AnimId);
			Removed = {{{_LibPrefix}}}G_AnimsToControl.removekey(AnimId);
		}
		if ({{{_LibPrefix}}}G_Controls[Control].count <= 0) {
			declare Removed = {{{_LibPrefix}}}G_Controls.removekey(Control);
		}
	}
}
""";
}

// ---------------------------------- //
/// Overload the Functions() function
Text Functions() {
	return Functions(C_LibAnim_Prefix);
}