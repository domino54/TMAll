#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"	as Logger
#Include "TextLib"								as TextLib

declare Text[Text] G_Result;
declare CParsingDocument G_XMLToSeparate;
declare Text G_ProjectName;
declare Text G_ProjectEnviro;
declare Boolean G_TitleWasMadeOnce;

Void AddSection(Text _SectionName, Text _NameInXML)
{
	G_Result[_SectionName] = "";
	if (G_XMLToSeparate == Null) {
		return;
	}
	declare CParsingNode Node = G_XMLToSeparate.GetFirstChild(_NameInXML);
	if (Node != Null) {
		G_Result[_SectionName] = Node.TextRawContents;
	}
}

Text[Text] SeparateXML(Text _XMLToSeparate, Text[][] _SectionNames)
{
	G_Result.clear();
	G_XMLToSeparate = Xml.Create(_XMLToSeparate, False, True, False);
	G_ProjectName = "";
	G_ProjectEnviro = "";
	if (G_XMLToSeparate != Null)
	{
		G_ProjectName = G_XMLToSeparate.Root.GetAttributeText("projectname", "");
		G_ProjectEnviro = G_XMLToSeparate.Root.GetAttributeText("projectenviro", "");
		G_TitleWasMadeOnce = G_XMLToSeparate.Root.GetAttributeBoolean("titlewasmadeonce", False);
	}
	foreach(SectionName in _SectionNames)
	{
		if (SectionName.count != 2) {
			Logger::Warn("Format non respecté. Chaque entrée du tableau doit contenir 2 éléments : Son nom dans le controller et son nom dans le XML");
		}
		AddSection(SectionName[0], SectionName[1]);
	}
	Xml.Destroy(G_XMLToSeparate);
	return G_Result;
}

// CALL AFTER SEPARATEXML
// Gives the variable projectname inside TitlePackXML <TitlePackXML projectname="MyProjectName">
Text GetProjectName()
{
	return G_ProjectName;
}

// CALL AFTER SEPARATEXML
// Gives the variable projectenviro inside TitlePackXML <TitlePackXML projectenviro="Canyon">
Text GetProjectEnviro()
{
	return G_ProjectEnviro;
}

Boolean GetTitleWasMadeOnce()
{
	return G_TitleWasMadeOnce;
}