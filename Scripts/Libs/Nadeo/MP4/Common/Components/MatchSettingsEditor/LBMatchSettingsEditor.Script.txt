#Include "Libs/Nadeo/MP4/Common/Components/MediaDisplayer/LBMediaDisplayer.Script.txt"	as MediaCardDisplayer
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"				as Colors
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 		as Font
#Include "Libs/Nadeo/Common/Core/LayerBuilder.Script.txt"	as LayerBuilder

#Const C_ImgBase				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"
#Const C_ImgTrack				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/TrackBrowser/"
#Const C_IMG_Cross_Remove		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCross.dds"
#Const C_IMG_Cross_RemoveOver	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCrossOver.dds"
#Const C_IMG_Cross_Move			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/MoveCross.dds"
#Const C_IMG_Cross_MoveOver		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/MoveCrossOver.dds"
#Const C_ScrollButton			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_Scroll_Smallv.dds"
#Const C_ScrollTenButton		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_ScrollTen_Smallv.dds"
#Const C_ScrollLastButton		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_ScrollLast_Smallv.dds"

#Const C_ScaleFactor	1.005

Text MoveCardsFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frame id="MoveCardFrame-{{{CardIndex}}}" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}" scale="{{{C_ScaleFactor}}}" hidden="1">
					<quad id="MoveCardQuad" halign="center" valign="center" size="{{{_CardSize.X}}} {{{_CardSize.Y}}}" scriptevents="1"/>
					<quad id="MoveCardQuadHelper-{{{CardIndex}}}" halign="center" valign="center" size="{{{_CardSize.X}}} {{{_CardSize.Y}}}" bgcolor="F00" opacity="0.05"/>
				</frame>
""";
	}
	return Result;
}

Text ChooseQuadFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frameinstance id="ChooseQuadFrame-{{{CardIndex}}}" modelid="ChooseQuadFrame" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}"/>
""";
	}
	return Result;
}

Text InteractQuadFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frameinstance id="InteractQuadFrame-{{{CardIndex}}}" modelid="InteractQuadFrame" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}"/>
""";
	}
	return Result;
}

Text Build() {
	//Maps
	declare Vec2	SizeMaps				= MediaCardDisplayer::Get_SizeMediaCards();
	declare Vec2	CardMargin				= MediaCardDisplayer::Get_MarginMediaCards();

	declare Text	IMGTrack				= C_ImgTrack ^ "TrackType.dds";
	declare Text	IMGTime					= C_ImgTrack ^ "LastTime.dds";
	declare Text	IMGValid				= C_ImgTrack ^ "Validated.dds";
	declare Text	IMGReplay				= C_ImgTrack ^ "Replay.dds";
	declare Text	IMGGhosts				= C_ImgTrack ^ "GhostRecord.dds";

	declare Text	IMGStart				= "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/ReplaceLogo.dds";
	declare Text	IMGMapEvaluer			= C_ImgBase ^ "EvaluateLogo.dds";
	declare Text	IMGPictoMultilap		= C_ImgBase ^ "PictoMultilap.dds";

	declare Integer	Count_InstancesMapsX	= 5;
	declare Integer	Count_InstancesMapsY	= 3;
	declare Real	PosXFirstMaps			= -33.7;
	declare Real	PosYFirstMaps			= 38.8;
	declare Boolean	IsAuthorLine			= True;
	declare Boolean	IsScroll				= True;
	declare Boolean	ShowsNonExistentFrames	= True;
	declare Boolean CanAddNewMedia			= False;
	declare Vec2	ContextualMenuPos		= <-54.3, -32.3>;
	declare Text	InfoLineStyle			= "Main";
	declare Text[]	InfoLineLogos			= [IMGTrack, IMGTime, IMGValid, IMGReplay, IMGGhosts];
	declare Text[]	MetadataKeys			= ["Medal", "Time", "LockMedalType", "UserMedalNb", "LockMedalNb"];
	//L16N Verb, infinitive, to change the current media with another media
	declare Text[]	ButtonNames				= [_("Replace")];
	declare Text[]	ButtonLogos				= [IMGStart];
	declare Text[]	ButtonActions			= [""];
	declare Text[]	ButtonEvents			= ["MatchSettings_SwitchMap"];

	MediaCardDisplayer::Init(	Count_InstancesMapsX, Count_InstancesMapsY, <PosXFirstMaps, PosYFirstMaps>, IsAuthorLine,
								IsScroll, ShowsNonExistentFrames, CanAddNewMedia, InfoLineStyle, InfoLineLogos, MetadataKeys,
								ButtonNames, ButtonLogos, ButtonActions, ButtonEvents, ContextualMenuPos);
	declare Vec2[]		CardPositions		= MediaCardDisplayer::GetCardPositions();
	declare Vec3[Text]	MedalColors			= ["Bronze" => Colors::GetColor("Bronze"), "Silver" => Colors::GetColor("Silver"), "Gold" => Colors::GetColor("Gold")];
	declare Text		SubFont				= Font::GetFontName("SubTitle");

	declare Vec2		ScrollPos			= <PosXFirstMaps + ((Count_InstancesMapsX - 1) * (SizeMaps.X + CardMargin.X)) / 2.,
						PosYFirstMaps - ((Count_InstancesMapsY - 1) * (SizeMaps.Y + CardMargin.Y)) - 15.>;

	declare Text Manialink = """
	<framemodel id="MediaCardDisplayer_Card_ExtraData">
	</framemodel>

	<framemodel id="MediaCardDisplayer_ListItem_ExtraData">
	</framemodel>

	<framemodel id="MediaCardDisplayer_Menu_ExtraData">
	</framemodel>

	<framemodel id="ChooseQuadFrame">
		<label id="ChooseQuadLabel"	valign="center" halign="center" size="{{{SizeMaps.X}}} {{{SizeMaps.Y}}}" z-index="1"
			textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textfont="{{{SubFont}}}" textprefix="$t" text="+" textsize="7."/>
		<quad id="ChooseQuad"		valign="center" halign="center" size="{{{SizeMaps.X}}} {{{SizeMaps.Y}}}" z-index="1" scriptevents="1"/>
	</framemodel>

	<framemodel id="InteractQuadFrame">
		<quad id="RemoveQuad"		valign="center" halign="center" size="5 5" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 4.}}}" z-index="-1" bgcolor="000" opacity="0.2" scriptevents="1"/>
		<quad id="RemoveQuadImage"	valign="center" halign="center" size="3 3" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 4.}}}" image="{{{C_IMG_Cross_Remove}}}" colorize="ddd"/>
		<quad id="MoveQuad"			valign="center" halign="center" size="5 5" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 10.}}}" z-index="-1" bgcolor="000" opacity="0.2" scriptevents="1"/>
		<quad id="MoveQuadImage"	valign="center" halign="center" size="4 4" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 10.}}}" image="{{{C_IMG_Cross_Move}}}" colorize="fff"/>
	</framemodel>

	{{{MediaCardDisplayer::ManialinkFrameModels()}}}

	<frame id="Frame_All">
		<frame id="MoveHelper_Frame" pos="-19 -21.5" hidden="1">
			<quad id="MoveHelper_Line" z-index="0" size="20 1" bgcolor="F80" halign="center" valign="center"/>
			<quad id="MoveHelper_RightArrow" pos="10 0" z-index="0" size="4 3.3" bgcolor="FFFA" style="Copilot" substyle="Right" modulatecolor="F80" halign="center" valign="center"/>
			<quad id="MoveHelper_LeftArrow" pos="-10 0" z-index="0" size="4 3.3" bgcolor="FFFA" style="Copilot" substyle="Left" modulatecolor="F80" halign="center" valign="center"/>
		</frame>

		<frame id="Frame_Parallax">
			<frame id="MoveCardsFrame" z-index="3">
{{{MoveCardsFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="ChooseQuadFrames" z-index="2">
{{{ChooseQuadFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="InteractQuadFrames" z-index="1">
{{{InteractQuadFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="CardsFrame">
{{{MediaCardDisplayer::ManialinkMainBody()}}}
{{{DesignManialinks::ManialinkScrollFrame(ScrollPos, C_ScrollButton, C_ScrollTenButton, C_ScrollLastButton, 3.6, "z-index=\"1\"", "MatchSettings_Scroll")}}}
<quad halign="center" valign="center" size="{{{SizeMaps.X}}} 10" pos="{{{ScrollPos.X}}} {{{ScrollPos.Y - 3.}}}" bgcolor="000" opacity="0.3"/>
			</frame>
		</frame>
	</frame>
	""";
	declare Text Includes = """
	#Include "TextLib"	as MatchSettings_TextLib
	#Include "MathLib"  as MatchSettings_MathLib

	#Const C_AllCardPositions	{{{dump(CardPositions)}}}
	#Const C_MedalColors		{{{dump(MedalColors)}}}
	#Const C_QuadOver			["RemoveQuad" => {{{dump(C_IMG_Cross_RemoveOver)}}},	"MoveQuad" => {{{dump(C_IMG_Cross_MoveOver)}}}]
	#Const C_QuadOut			["RemoveQuad" => {{{dump(C_IMG_Cross_Remove)}}},		"MoveQuad" => {{{dump(C_IMG_Cross_Move)}}}]

{{{MediaCardDisplayer::Includes()}}}
	""";
	declare Text Declares = """
	{{{MediaCardDisplayer::FirstDeclares()}}}

	// <script>
	declare CMlFrame[]		G_ChooseQuadFrames;
	declare CMlLabel[]		G_ChooseQuadLabels;
	declare CMlFrame[]		G_InteractQuadFrames;
	declare Boolean			G_DisableNavigation;
	declare Integer[]		G_ChooseTrackIndexes;
	declare Boolean			G_IsInMoveMode;
	declare Integer			G_MovingMapStart;
	declare Integer			G_MovingPageStart;
	declare Integer			G_CurrentPage;
	declare Integer			G_LockFocusQuad;// Utilisé pour forcer la sélection sur
											// le quad sur lequel on a cliqué la dernière fois

	Void ShowPage()
	{
		declare CMlFrame Frame_Parallax <=> (Page.MainFrame.GetFirstChild("Frame_Parallax")	as CMlFrame);
		Frame_Parallax.Show();
	}

	Void MediaCardDisplayer_ShowCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare Integer OneDIndex for _Card;
		declare AbsoluteIndex = OneDIndex;
		if ((AbsoluteIndex == 0) && _Data["State"] == "NonExistent") {
			G_DisableNavigation = True;
		}
	}

	Void MediaCardDisplayer_ShowLockedCard(CMlFrame _Card, Text[Text] _Data)
	{
	}

	Void MediaCardDisplayer_UnSelectCard(CMlFrame _Card)
	{
	}

	Void MediaCardDisplayer_SelectCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare Integer OneDIndex for _Card;
		G_MovingMapStart = OneDIndex;
	}

	Void MediaCardDisplayer_UnFocusCard(CMlFrame _Card, Text[Text] _Data)
	{
	}

	Void MediaCardDisplayer_FocusCard(CMlFrame _Card, Text[Text] _Data)
	{
	}

{{{MediaCardDisplayer::SecondDeclares()}}}

	Void LockFocusQuad()
	{
		if (G_LockFocusQuad != -1) {
			TwoDArrayCardBuilder_SetRunningState(True, G_LockFocusQuad);
			G_LockFocusQuad = -1;
		} else {
			TwoDArrayCardBuilder_SetRunningState(True);
		}
	}

	Void ShowTransition()
	{
		LockFocusQuad();
	}

		Void StopMovingMode()
		{
			if (!G_IsInMoveMode) {
				return;
			}
			G_IsInMoveMode = False;
			for(I, 0, C_AllCardPositions.count - 1) {
				Page.GetFirstChild("MoveCardFrame-" ^ I).Hide();
				Page.GetFirstChild("ChooseQuadFrame-" ^ I).Show();
				Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ I).RelativeScale = 1.;
			}
			LockFocusQuad();
			Page.GetFirstChild("MoveHelper_Frame").Hide();
		}

		Void StartMovingMode()
		{
			G_MovingPageStart = G_CurrentPage;
			if (G_IsInMoveMode) {
				return;
			}
			G_IsInMoveMode = True;
			TwoDArrayCardBuilder_SetRunningState(False);
			for(I, 0, C_AllCardPositions.count - 1) {
				Page.GetFirstChild("MoveCardFrame-" ^ I).Show();
				G_ChooseQuadLabels[I].SetText("");
				if ((I == G_MovingMapStart) && (G_CurrentPage == G_MovingPageStart)) {
					Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Hide();
					continue;
				}
				Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Show();
				Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ I).RelativeScale = {{{C_ScaleFactor}}};
			}
		}

		Void RestartMovingMode()
		{
			if (!G_IsInMoveMode) {
				return;
			}
			for(I, 0, C_AllCardPositions.count - 1) {
				Page.GetFirstChild("MoveCardFrame-" ^ I).Show();
				if ((I == G_MovingMapStart) && (G_CurrentPage == G_MovingPageStart)) {
					Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Hide();
					continue;
				}
				Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Show();
				Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ I).RelativeScale = {{{C_ScaleFactor}}};
			}
		}

		Vec2 GetMiddlePosition(Vec2 _Vector1, Vec2 _Vector2)
		{
			return 0.5 * (_Vector1 + _Vector2);
		}

		Real GetMiddleDistance(Vec2 _Vector1, Vec2 _Vector2)
		{
			return MatchSettings_MathLib::Distance(<_Vector1.X, _Vector1.Y, 0.>, <_Vector2.X, _Vector2.Y, 0.>);
		}

		Real GetMiddleAngle(Vec2 _Vector1, Vec2 _Vector2)
		{
			declare Vec3 VectorStart = <-1., 0., 0.>;
			declare Vec3 VectorEnd = <_Vector1.X - _Vector2.X, _Vector1.Y - _Vector2.Y, 0.>;
			if (_Vector2.Y > _Vector1.Y) {
				VectorEnd = <_Vector2.X - _Vector1.X, _Vector2.Y - _Vector1.Y, 0.>;
			}
			return 180. / MatchSettings_MathLib::PI() * MatchSettings_MathLib::OrientedAngle(VectorStart, VectorEnd); 
		}

		Vec2 GetVectorStart(Integer _MapStart, Integer _PageStart)
		{
			declare Vec2 VectorStart;
			if (G_CurrentPage != _PageStart) {
				return {{{ScrollPos}}};
			}
			if (_MapStart < 0 || _MapStart >= C_AllCardPositions.count) {
				return {{{<ScrollPos.X, ScrollPos.Y + 10.>}}};
			}
			VectorStart = C_AllCardPositions[_MapStart];
			VectorStart.Y -= 0.8;
			return VectorStart;
		}

		Vec2 GetVectorDestination(Integer _MapDestination)
		{
			return C_AllCardPositions[_MapDestination];
		}

		Void UpdateMoveHelper(Integer _MapStart, Integer _PageStart, Vec2 _MousePos)
		{
			declare Vec2 VectorStart = GetVectorStart(_MapStart, _PageStart);
			Page.GetFirstChild("MoveHelper_Frame").RelativePosition_V3	= GetMiddlePosition(VectorStart, _MousePos);
			Page.GetFirstChild("MoveHelper_Line").Size					= <GetMiddleDistance(VectorStart, _MousePos), 1.>;
			Page.GetFirstChild("MoveHelper_RightArrow").RelativePosition_V3 =
																		<GetMiddleDistance(VectorStart, _MousePos) / 2., 0.>;
			Page.GetFirstChild("MoveHelper_LeftArrow").RelativePosition_V3 =
																		<- GetMiddleDistance(VectorStart, _MousePos) / 2., 0.>;
			Page.GetFirstChild("MoveHelper_Frame").RelativeRotation		= GetMiddleAngle(VectorStart, _MousePos);

		}

		Void MouseOver(Text _QuadId, CMlControl _Control) {
			if (!C_QuadOver.existskey(_QuadId)) {
				return;
			}
			declare Image <=> (_Control.Parent.GetFirstChild(_QuadId ^ "Image") as CMlQuad);
			Image.ChangeImageUrl(C_QuadOver[_QuadId]);
		}

		Void MouseOut(Text _QuadId, CMlControl _Control) {
			if (!C_QuadOut.existskey(_QuadId)) {
				return;
			}
			declare Image <=> (_Control.Parent.GetFirstChild(_QuadId ^ "Image") as CMlQuad);
			Image.ChangeImageUrl(C_QuadOut[_QuadId]);
		}

	Void UpdateScroll()
	{
		declare Integer MatchSettings_CurrentPageIndex		for Page;
		declare Integer MatchSettings_MaxPages				for Page;
		G_CurrentPage		= MatchSettings_CurrentPageIndex;
		DesignManialinks_ScrollButtons_Update("MatchSettings_Scroll", MatchSettings_CurrentPageIndex, MatchSettings_MaxPages);
	}

	Void UpdatePageMove()
	{
		declare Integer MatchSettings_MovePageIndex			for Page;
		G_MovingPageStart	= MatchSettings_MovePageIndex;
	}

	Void MatchSettings_Track_InputPageUp()
	{
		SendCustomEvent("MatchSettings_Track_InputPageUp", Text[]);
	}

	Void MatchSettings_Track_InputPageDown()
	{
		SendCustomEvent("MatchSettings_Track_InputPageDown", Text[]);
	}

		Void AdjustChooseTrackQuads()
		{
			declare Integer[] MatchSettings_NewTracks	for Page;
			for(HideIndex, 0, C_AllCardPositions.count - 1) {
				G_ChooseQuadFrames[HideIndex].Hide();
				G_InteractQuadFrames[HideIndex].Hide();
			}
			foreach (InteractIndex in TwoDArrayCardBuilder_GetAvailableCardIndexes()) {
				G_InteractQuadFrames[InteractIndex].Show();
			}
			for(PageShowIndex, 0, C_AllCardPositions.count - 1) {
				declare ShowIndex = PageShowIndex;
				if (!MatchSettings_NewTracks.exists(ShowIndex)) {
					continue;
				}
				G_ChooseQuadFrames[PageShowIndex].Show();
				if (G_IsInMoveMode) {
					G_ChooseQuadLabels[PageShowIndex].SetText("");
				} else {
					G_ChooseQuadLabels[PageShowIndex].SetText("+");
					G_ChooseQuadLabels[PageShowIndex].TextSizeReal = 7.;
				}
				G_InteractQuadFrames[PageShowIndex].Hide();
			}
		}

		Void Init()
		{
			G_ChooseQuadFrames		.clear();
			for (ChooseQuadIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame	ChooseQuadFrame	<=> (Page			.GetFirstChild("ChooseQuadFrame-" ^ ChooseQuadIndex) as CMlFrame);
				declare CMlControl	ChooseQuad		<=> ChooseQuadFrame	.GetFirstChild("ChooseQuad");
				declare CMlLabel	ChooseQuadLabel	<=> (ChooseQuadFrame.GetFirstChild("ChooseQuadLabel") as CMlLabel);
				G_ChooseQuadFrames.add(ChooseQuadFrame);
				G_ChooseQuadLabels.add(ChooseQuadLabel);
				declare Integer MapIndex for ChooseQuad;
				MapIndex = ChooseQuadIndex;
			}
			for (InteractQuadIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame InteractQuadFrame	<=> (Page				.GetFirstChild("InteractQuadFrame-" ^ InteractQuadIndex) as CMlFrame);
				declare CMlControl RemoveQuad		<=> InteractQuadFrame	.GetFirstChild("RemoveQuad");
				declare CMlControl MoveQuad			<=> InteractQuadFrame	.GetFirstChild("MoveQuad");
				G_InteractQuadFrames.add(InteractQuadFrame);
				{
					declare Integer MapIndex for RemoveQuad;
					MapIndex = InteractQuadIndex;
				}
				{
					declare Integer MapIndex for MoveQuad;
					MapIndex = InteractQuadIndex;
				}
			}
			for (MoveCardIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame	MoveCardFrame	<=> (Page.GetFirstChild("MoveCardFrame-" ^ MoveCardIndex) as CMlFrame);
				declare CMlControl	MoveCardQuad	<=> MoveCardFrame.GetFirstChild("MoveCardQuad");
				declare Integer 	MoveCardQuadIndex for MoveCardQuad;
				MoveCardQuadIndex =	MoveCardIndex;
			}
			G_DisableNavigation			= False;
			G_ChooseTrackIndexes		= Integer[];
			G_IsInMoveMode				= False;
			G_MovingMapStart			= -1;
			G_LockFocusQuad				= -1;
			AdjustChooseTrackQuads();
			MediaCardDisplayer_Init();
		}

		Void Hide(Integer _State, Text _NextPage) {
			StopMovingMode();
			BaseLib_Hide();
		}

		Void Show(Integer _State, Text _PreviousPage) {
			StopMovingMode();
			ShowTransition();
			MediaCardDisplayer_Show();
		}

		Void Loop() {
			if (G_DisableNavigation) {
				TwoDArrayCardBuilder_SetRunningState(False);
				G_DisableNavigation = False;
			}
			MediaCardDisplayer_Loop();
			if (G_IsInMoveMode) {
				UpdateMoveHelper(G_MovingMapStart, G_MovingPageStart, <MouseX, MouseY>);
			}
			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								SendCustomEvent("GotoPrevious", [""]);
							}
						}
					}
					case CMlEvent::Type::MouseClick: {
						if (Event.ControlId == "ChooseQuad")
						{
							declare Integer MapIndex for Event.Control;
							G_LockFocusQuad = MapIndex;
							SendCustomEvent("MatchSettings_AddMap", [MatchSettings_TextLib::ToText(MapIndex)]);
							StopMovingMode();
						} else if (Event.ControlId == "RemoveQuad"){
							declare Integer MapIndex for Event.Control;
							SendCustomEvent("MatchSettings_RemoveMap", [MatchSettings_TextLib::ToText(MapIndex)]);
							StopMovingMode();
						} else if (Event.ControlId == "MoveQuad") {
							declare Integer MapIndex for Event.Control;
							SendCustomEvent("MatchSettings_Move", [MatchSettings_TextLib::ToText(MapIndex)]);
							G_MovingMapStart = MapIndex;
						} else if (Event.ControlId == "MoveCardQuad") {
							Page.GetFirstChild("MoveHelper_Frame").Hide();
							declare Integer MoveCardQuadIndex for Event.Control;
							G_LockFocusQuad = MoveCardQuadIndex;
							SendCustomEvent("MatchSettings_FinishMovingCard", [MatchSettings_TextLib::ToText(MoveCardQuadIndex)]);
							StopMovingMode();
						} else if (Event.ControlId == "ButtonRecordCenterStart") {
							SendCustomEvent("RecordCenterStart", Text[]);
							declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
							Quad_Over.Hide();
						} else if (Event.ControlId == "MatchSettings_Scroll_ScrollL") {
							MatchSettings_Track_InputPageUp();
						} else if (Event.ControlId == "MatchSettings_Scroll_ScrollR") {
							MatchSettings_Track_InputPageDown();
						}
					}
					case CMlEvent::Type::MouseOver: {
						MouseOver(Event.ControlId, Event.Control);
						if (Event.ControlId == "ChooseQuad")
						{
							declare Integer MapIndex for Event.Control;
							declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MapIndex];
							ChooseQuadLabel.SetText("{{{//L16N Verb, infinitive form, to select a map
								_("Choose track")
								}}}");
							ChooseQuadLabel.TextSizeReal = 2.2;
						} else if (Event.ControlId == "MoveCardQuad") {
							declare Integer MoveCardQuadIndex for Event.Control;
							declare Integer AbsoluteIndex = MoveCardQuadIndex;
							if ((AbsoluteIndex == G_MovingMapStart) && (G_CurrentPage == G_MovingPageStart)) {
								Page.GetFirstChild("MoveHelper_Frame").Hide();
							} else {
								Page.GetFirstChild("MoveHelper_Frame").Show();
							}
							(Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ MoveCardQuadIndex) as CMlFrame).GetFirstChild("Quad_CardShadow").Hide();
						} else if (Event.ControlId == "ButtonRecordCenterStart" || Event.ControlId == "ButtonRanking") {
							declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
							Quad_Over.Show();
						}
					}
					case CMlEvent::Type::MouseOut: {
						MouseOut(Event.ControlId, Event.Control);
						if (Event.ControlId == "ChooseQuad")
						{
							declare Integer MapIndex for Event.Control;
							declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MapIndex];
							ChooseQuadLabel.SetText("+");
							ChooseQuadLabel.TextSizeReal = 7.;
						} else if (Event.ControlId == "MoveCardQuad") {
							if (!G_IsInMoveMode) {
								continue;
							}
							declare Integer MoveCardQuadIndex for Event.Control;
							declare Integer AbsoluteIndex = MoveCardQuadIndex;
							if ((AbsoluteIndex == G_MovingMapStart) && (G_CurrentPage == G_MovingPageStart)) {
								Page.GetFirstChild("MoveHelper_Frame").Show();
								continue;
							}
							(Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ MoveCardQuadIndex) as CMlFrame).GetFirstChild("Quad_CardShadow").Show();
							declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MoveCardQuadIndex];
							ChooseQuadLabel.SetText("");
						} else if (Event.ControlId == "ButtonRecordCenterStart" || Event.ControlId == "ButtonRanking") {
							declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
							Quad_Over.Hide();
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch(Event.CustomEventType) {
							case "StartMovingAllCards" : {
								StartMovingMode();
							}
							case "GiveChooseTrackQuads" : {
								UpdateScroll();
								UpdatePageMove();
								AdjustChooseTrackQuads();
							}
						}
					}
				}
			}
		}
	""";

	return LayerBuilder::Build("MatchSettingsEditor", Manialink, Includes, Declares);
}