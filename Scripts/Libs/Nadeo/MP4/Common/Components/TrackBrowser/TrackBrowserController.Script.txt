#Include "Libs/Nadeo/Common/Core/MenuLayers.Script.txt"												as Layers
#Include "Libs/Nadeo/Common/Core/Pages.Script.txt"													as Pages
#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"													as Logger
#Include "TextLib"																				as TextLib

// APIs
#Include "Libs/Nadeo/MP4/Common/Components/TrackBrowser/TrackBrowserAPI.Script.txt"					as TrackBrowserAPI
#Include "Libs/Nadeo/MP4/Common/Components/MediaBrowser/MediaBrowserController.Script.txt"			as MediaBrowserController

//Layers
#Include "Libs/Nadeo/MP4/Common/Components/TrackBrowser/LBTrackBrowser.Script.txt"					as LBTrackBrowser

#Const C_BrowserName	"TrackBrowser"
#Const C_PageName		"BrowseTracks"
#Const C_TrackManiaTerm _("Tracks")
#Const C_ShootManiaTerm _("Maps")

#Const C_Context1		"MakerCampaign"
#Const C_Context2		"MatchSettingsEditor"
#Const C_Context3		"LocalPlaySingleMap"
#Const C_Context4		"EditorsClassicMapEditor"
#Const C_Context5		"GhostEditor"
#Const C_Context6		"CustomEditor"


#Const C_ImgTrack	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/TrackBrowser/"

declare Text G_FolderPath;
declare Text G_Context;

Void Load() {
	G_FolderPath = "";
	declare Text MediaTitle = C_TrackManiaTerm;
	declare Text ProjectEnviro for LocalUser;
	if (ProjectEnviro == "Storm") {
		MediaTitle = C_ShootManiaTerm;
	}
	MediaBrowserController::Load(LBTrackBrowser::Build(), C_PageName, C_BrowserName, MediaTitle);
	TrackBrowserAPI::Load();
}

Void OpenCurrentFolder()
{
	TrackBrowserAPI::FetchData(G_FolderPath);
}

Void OpenInExplorer()
{
	if (!OpenFileInExplorer(TrackBrowserAPI::FullPath(G_FolderPath))) {
		Logger::Warn(C_BrowserName ^ " : OpenFileInExplorer did not function");
	}
}


Boolean IsRunning()
{
	return MediaBrowserController::IsRunning(C_BrowserName);
}


Void Show(Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle, Text[] _SecondaryButtonNames, Text _Context, Boolean _IsFilteringUnvalidatedTracks)
{
	if (G_Context != _Context) {
		G_Context = _Context;
		G_FolderPath = "";
	}
	TrackBrowserAPI::FetchData(G_FolderPath, _IsFilteringUnvalidatedTracks);
	MediaBrowserController::Show(C_BrowserName, C_PageName, _EventNamePrefix, _ButtonNames, _MediaTitle, _SecondaryButtonNames);
}

Void Show(Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle, Text[] _SecondaryButtonNames, Text _Context) {
	Show(_EventNamePrefix, _ButtonNames, _MediaTitle, _SecondaryButtonNames, _Context, True);
}

Void Show(Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle, Text[] _SecondaryButtonNames)
{
	Show(_EventNamePrefix, _ButtonNames, _MediaTitle, _SecondaryButtonNames, C_Context1);
}

Void Show(Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle)
{
	Show(_EventNamePrefix, _ButtonNames, _MediaTitle, []);
}

Void Show()
{
	MediaBrowserController::Show(C_BrowserName);
	if (Pages::GetCurrentPageName() != C_PageName) {
		Pages::GotoHome(C_PageName);
	}
}

Void MakeIdle()
{
	MediaBrowserController::MakeIdle(C_BrowserName);
}

Void Hide()
{
	MediaBrowserController::Hide(C_BrowserName);
}

Void ForceHide()
{
	MediaBrowserController::ForceHide(C_BrowserName);
}

Text[]		LineLogoFromContext(Text _Context, Text[Text] _Metadata)
{
	declare Text IMGTrack	= C_ImgTrack ^ "TrackType.dds";
	declare Text IMGTime	= C_ImgTrack ^ "LastTime.dds";
	declare Text IMGValid	= C_ImgTrack ^ "Validated.dds";
	declare Text IMGReplay	= C_ImgTrack ^ "Replay.dds";
	declare Text IMGGhosts	= C_ImgTrack ^ "GhostRecord.dds";
	declare Text ProjectEnviro for LocalUser;
	if (ProjectEnviro != "Storm") {
		return		[IMGTime
					, IMGTrack];
	} else {
		return		[IMGTrack];
	}
	switch(_Context) {
		case "MakerCampaign" : {
			if (ProjectEnviro != "Storm") {
				return		[IMGTime
							, IMGTrack];
			} else {
				return		[IMGTrack];
			}
		}
		case "MatchSettingsEditor" : {
			if (ProjectEnviro != "Storm") {
				return		[IMGTime
							, IMGTrack];
			} else {
				return		[IMGTrack];
			}
		}
		case "LocalPlaySingleMap" : {
			if (ProjectEnviro != "Storm") {
				return		[IMGTime
							, IMGTrack];
			} else {
				return		[IMGTrack];
			}
		}
		case "EditorsClassicMapEditor" : {
			if (ProjectEnviro != "Storm") {
				return		[IMGTime
							, IMGTrack];
			} else {
				return		[IMGTrack];
			}
		}
		case "GhostEditor" : {
			
		}
		case "CustomEditor" : {
			
		}
	}
	return [];
}

Text[][]	LineDataFromContext(Text _Context, Text[Text] _Metadata)
{
	declare Text[Text] YesNoArray = ["no" => "$233$<$t" ^ TextLib::GetTranslatedText("|There is none/There are none|No") ^ "$>",
	"yes" => "<$t" ^ TextLib::GetTranslatedText("|There is/There are|Yes") ^ "$>"];
	declare Text[][] Result;
	declare Text ProjectEnviro for LocalUser;
	if (ProjectEnviro != "Storm") {
		declare Text IsValidated	= _Metadata["Validated"];
		declare Text CourseTime		= _Metadata["GoldTime"];
		if (IsValidated == "no") {
			CourseTime = "$900$<" ^ TextLib::GetTranslatedText("Not Validated") ^ "$>";
		}
		declare Text Label = TextLib::GetTranslatedText("Time");
		Result.add([Label^" : " ^ CourseTime]);
	}
	switch(_Context) {
		case "MakerCampaign" : {
			declare Text Coppers		= _Metadata["Coppers"];
			//L16N Noun, plural, specific term used to represent the amount of polygons in a map
			Result.add		([TextLib::GetTranslatedText("Coppers : ") ^ Coppers]);
		}
		case "MatchSettingsEditor" : {
			declare Text Coppers		= _Metadata["Coppers"];
			//L16N Noun, plural, specific term used to represent the amount of polygons in a map
			Result.add		([TextLib::GetTranslatedText("Coppers : ") ^ Coppers]);
		}
		case "LocalPlaySingleMap" : {
			declare Text Coppers		= _Metadata["Coppers"];
			//L16N Noun, plural, specific term used to represent the amount of polygons in a map
			Result.add		([TextLib::GetTranslatedText("Coppers : ") ^ Coppers]);
		}
		case "EditorsClassicMapEditor" : {
			declare Text Coppers		= _Metadata["Coppers"];
			//L16N Noun, plural, specific term used to represent the amount of polygons in a map
			Result.add		([TextLib::GetTranslatedText("Coppers : ") ^ Coppers]);
		}
		case "GhostEditor" : {
			
		}
		case "CustomEditor" : {
			
		}
	}
	return Result;
}

Text[][][] GetLineData(Text _Context)
{
	declare Text[][][] Result;
	declare Text[Text][] MainData = TrackBrowserAPI::GetMainData();
	declare Text ProjectEnviro for LocalUser;
	foreach (Metadata in MainData) {
		if (Metadata.existskey("CardType") && Metadata["CardType"] == "Folder") {
			if (ProjectEnviro == "Storm") {
				Result.add([[""]]);
			} else {
				Result.add([[""], [""]]);
			}
		} else {
			Result.add(LineDataFromContext(_Context, Metadata));
		}
	}
	return Result;
}

Text[][] GetLineLogos(Text _Context)
{
	declare Text[][] Result;
	declare Text[Text][] MainData = TrackBrowserAPI::GetMainData();
	declare Text ProjectEnviro for LocalUser;
	foreach (Metadata in MainData) {
		if (Metadata.existskey("CardType") && Metadata["CardType"] == "Folder") {
			if (ProjectEnviro == "Storm") {
				Result.add([""]);
			} else {
				Result.add(["", ""]);
			}
		} else {
			Result.add(LineLogoFromContext(_Context, Metadata));
		}
	}
	return Result;
}

Text[Text][] GetMainData(Text _Context)
{
	declare Text[Text][] Result;
	declare Text[Text][] MainData = TrackBrowserAPI::GetMainData();
	if (_Context != "LocalPlaySingleMap") {
		foreach (Metadata in MainData) {
			declare MainBit = Metadata;
			MainBit["PersonalTime"] = "";
			MainBit["PersonalMedal"] = "";
			Result.add(MainBit);
		}
		return Result;
	}
	return MainData;
}

Void Loop() {
	if (TrackBrowserAPI::HasFetched()) {
		TrackBrowserAPI::UpdateMainData();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRunning(C_BrowserName)) {
		MediaBrowserController::Loop(C_BrowserName);
	}
	if (MediaBrowserController::IsRequestingFolderOpening(C_BrowserName)) {
		G_FolderPath = MediaBrowserController::FolderOpeningPath(C_BrowserName);
		OpenCurrentFolder();
	}
	if (MediaBrowserController::IsRequestingFolderBack(C_BrowserName)) {
		G_FolderPath = TrackBrowserAPI::FolderParentPath();
		OpenCurrentFolder();
	}
	if (MediaBrowserController::IsRequestingRefreshFolder(C_BrowserName)) {
		TrackBrowserAPI::Refresh();
		OpenCurrentFolder();
	}
	if (MediaBrowserController::IsRequestingOpenInExplorer(C_BrowserName)) {
		OpenInExplorer();
	}
	if (MediaBrowserController::IsRequestingSwitchFlatten(C_BrowserName)) {
		TrackBrowserAPI::SwitchFlatten();
		OpenCurrentFolder();
	}
	if (MediaBrowserController::IsRequestingSortByDateName(C_BrowserName)) {
		TrackBrowserAPI::SwitchSortCriterion();
		OpenCurrentFolder();
	}
	if (MediaBrowserController::IsRequestingSortAscDesc(C_BrowserName)) {
		TrackBrowserAPI::SwitchSortOrder();
		OpenCurrentFolder();
	}
	if (MediaBrowserController::IsRequestingInputPageUp(C_BrowserName)) {
		TrackBrowserAPI::InputPageUp();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRequestingInputPageUpTen(C_BrowserName)) {
		TrackBrowserAPI::InputPageUpTen();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRequestingInputPageDown(C_BrowserName)) {
		TrackBrowserAPI::InputPageDown();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRequestingInputPageDownTen(C_BrowserName)) {
		TrackBrowserAPI::InputPageDownTen();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRequestingInputFirstPage(C_BrowserName)) {
		TrackBrowserAPI::InputFirstPage();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRequestingInputLastPage(C_BrowserName)) {
		TrackBrowserAPI::InputLastPage();
		MediaBrowserController::UpdateData(C_BrowserName, TrackBrowserAPI::FullPath(G_FolderPath), GetMainData(G_Context), GetLineData(G_Context), GetLineLogos(G_Context), TrackBrowserAPI::GetCurrentPageIndex(), TrackBrowserAPI::GetMaxPages());
	}
	if (MediaBrowserController::IsRequestingSteamWorkshop(C_BrowserName)) {
		TitleControl.PublishFile(TrackBrowserAPI::FullPath(MediaBrowserController::RequestingSteamWorkshopMediaName(C_BrowserName)));
	}
}