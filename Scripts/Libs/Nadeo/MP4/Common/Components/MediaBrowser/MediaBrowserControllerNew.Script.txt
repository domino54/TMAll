#Include "Libs/Nadeo/Common/Core/Pages.Script.txt"														as Pages
#Include "Libs/Nadeo/MP4/Common/Components/MediaBrowser/MediaBrowserController.Script.txt"				as MediaBrowserController
#Include "Libs/Nadeo/Common/Core/LBController.Script.txt"											as LBController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/G_BarreSection/BarreSectionController.Script.txt"		as BarreSectionController
#Include "Libs/Nadeo/MP4/Common/GlobalVariables.Script.txt"											as GlobalVariables

Void Load(Text _MLText, Text _PageName, Text _BrowserName, Text _MediaTitle)
{
	LBController::Build(_BrowserName, _MLText);
	if (GlobalVariables::GetLaunchContext() == GlobalVariables::LaunchContext_Title()) {
		BarreSectionController::AddConfiguration(_BrowserName, _MediaTitle,
							Text[],
							Text[]);
		Pages::Compose(_PageName, [_BrowserName, "BarreSection"]);
	} else {
		Pages::Compose(_PageName, [_BrowserName]);
	}
}

Boolean IsRunning(Text _BrowserName)
{
	return MediaBrowserController::IsRunning(_BrowserName);
}

Void UpdateSelectedPaths(Text _BrowserName)
{
	MediaBrowserController::UpdateSelectedPaths(_BrowserName);
}

Void UpdateSteamWorkshop(Text _BrowserName)
{
	MediaBrowserController::UpdateSteamWorkshop(_BrowserName);
}

Void UpdateData(Text _BrowserName, Text _FolderPath, Text[Text][] _MainData, Text[][][] _LineData, Text[][] _LineLogos, Integer _CurrentPageIndex, Integer _MaxPages)
{
	MediaBrowserController::UpdateData(_BrowserName, _FolderPath, _MainData, _LineData, _LineLogos, _CurrentPageIndex, _MaxPages);
}

Void UpdateData(Text _BrowserName, Text _FolderPath, Text[Text][] _MainData, Text[][][] _LineData, Integer _CurrentPageIndex, Integer _MaxPages)
{
	MediaBrowserController::UpdateData(_BrowserName, _FolderPath, _MainData, _LineData, _CurrentPageIndex, _MaxPages);
}

Void UpdateData(Text _BrowserName, Text _FolderPath, Text[Text][] _MainData, Text[][][] _LineData)
{
	MediaBrowserController::UpdateData(_BrowserName, _FolderPath, _MainData, _LineData);
}

Void UpdateBrowser(Text _BrowserName, Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle, Text[] _SecondaryButtonNames, Text _AddToListButtonName)
{
	MediaBrowserController::UpdateBrowser(_BrowserName, _EventNamePrefix, _ButtonNames, _MediaTitle, _SecondaryButtonNames, _AddToListButtonName);
}

Void Show(Text _BrowserName, Text _PageName, Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle, Text[] _SecondaryButtonNames, Text _AddToListButtonName)
{
	MediaBrowserController::Show(_BrowserName, _PageName, _EventNamePrefix, _ButtonNames, _MediaTitle, _SecondaryButtonNames, _AddToListButtonName);
}

Void Show(Text _BrowserName, Text _PageName, Text _EventNamePrefix, Text[] _ButtonNames, Text _MediaTitle, Text[] _SecondaryButtonNames)
{
	MediaBrowserController::Show(_BrowserName, _PageName, _EventNamePrefix, _ButtonNames, _MediaTitle, _SecondaryButtonNames);
}

Void Show(Text _BrowserName)
{
	MediaBrowserController::Show(_BrowserName);
}

Void MakeIdle(Text _BrowserName)
{
	MediaBrowserController::MakeIdle(_BrowserName);
}

Void Hide(Text _BrowserName, Boolean _ForceStop)
{
	MediaBrowserController::Hide(_BrowserName, _ForceStop);
}

Void Hide(Text _BrowserName)
{
	MediaBrowserController::Hide(_BrowserName);
}

Void ForceHide(Text _BrowserName)
{
	MediaBrowserController::ForceHide(_BrowserName);
}

Boolean IsRequestingFolderOpening(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingFolderOpening(_BrowserName);
}

Boolean IsRequestingFolderBack(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingFolderBack(_BrowserName);
}

Boolean IsRequestingRefreshFolder(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingRefreshFolder(_BrowserName);
}

Boolean IsRequestingOpenInExplorer(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingOpenInExplorer(_BrowserName);
}

Boolean IsRequestingSwitchFlatten(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingSwitchFlatten(_BrowserName);
}

Boolean IsRequestingSortByDateName(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingSortByDateName(_BrowserName);
}

Boolean IsRequestingSortAscDesc(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingSortAscDesc(_BrowserName);
}

Boolean IsRequestingInputPageUp(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingInputPageUp(_BrowserName);
}

Boolean IsRequestingInputPageDown(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingInputPageDown(_BrowserName);
}

Boolean IsRequestingSteamWorkshop(Text _BrowserName)
{
	return MediaBrowserController::IsRequestingSteamWorkshop(_BrowserName);
}

Text RequestingSteamWorkshopMediaName(Text _BrowserName)
{
	return MediaBrowserController::RequestingSteamWorkshopMediaName(_BrowserName);
}

Text FolderOpeningPath(Text _BrowserName)
{
	return MediaBrowserController::FolderOpeningPath(_BrowserName);
}

Boolean HasPathsList(Text _BrowserName)
{
	return MediaBrowserController::HasPathsList(_BrowserName);
}

Text[] GetPathsList(Text _BrowserName)
{
	return MediaBrowserController::GetPathsList(_BrowserName);
}

Void AddToList(Text _BrowserName, Text _Path)
{
	MediaBrowserController::AddToList(_BrowserName, _Path);
}

Void MultiSelectSwitch(Text _BrowserName)
{
	MediaBrowserController::MultiSelectSwitch(_BrowserName);
}

Void SelectAll(Text _BrowserName)
{
	MediaBrowserController::SelectAll(_BrowserName);
}

Void SteamWorkshop(Text _BrowserName, Text _MediaName)
{
	MediaBrowserController::SteamWorkshop(_BrowserName, _MediaName);
}

Void Loop(Text _BrowserName) {
	MediaBrowserController::Loop(_BrowserName);
}