#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"		as DesignManialinks
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"				as Font
#Include "TextLib"												as TextLib

#Const C_DefaultAssetCondPos	<-118., -26.2>
#Const C_UGCAssetCondPos		<-118., -26.2>
#Const C_ExtraParamHelperPos	<-118., -26.2>
#Const C_DefaultAssetPositions	<0., -5.>
#Const C_UGCAssetPositions		<0., -85.>
#Const C_IMG_Checkbox_Open		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open.dds"
#Const C_IMG_Checkbox_Closed_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed_Over.dds"
#Const C_IMG_Checkbox_Closed	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed.dds"
#Const C_IMG_Checkbox_Open_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open_Over.dds"
#Const C_IMG_Cross_Remove		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCross.dds"
#Const C_IMG_Cross_RemoveOver	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCrossOver.dds"
#Const C_DefaultLogo			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Editor.dds"
#Const C_DefaultAssetLogo		"file://Media/MEDIABROWSER_HiddenResources/Maker/Images/Editor/Editor_Logo.dds"
#Const C_ScrollButton			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_Scroll_Smallv.dds"
#Const C_ScrollTenButton			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_ScrollTen_Smallv.dds"
#Const C_ScrollLastButton			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_ScrollLast_Smallv.dds"
#Const C_MaxAssetNb				9
#Const C_AllAssetPositions		[<0., -5.0>, <0., -15.65>, <0., -26.3>, <0., -36.95>, <0., -47.6>, <0., -58.25>, <0., -68.9>, <0., -79.55>, <0., -90.2>]

declare Text	G_LayerName;
declare Text[]	G_AssetName;
declare Text	G_DefaultAssetTitle;
declare Text	G_UGCAssetTitle;
declare Text	G_DefaultAssetText;
declare Text	G_UGCAssetText;
declare Text	G_ExtraParamText;
declare Boolean G_CanScroll;
declare Text	G_ExtraParamHelperTitle;
declare Text	G_ExtraParamHelperText;
declare Text	G_SecondaryButtonName;
declare Text	G_Logo;
declare Text	G_AssetLogo;

declare Text	G_SubFont;

Void Init(Text _LayerName, Text[] _AssetName, Text _DefaultAssetTitle, Text _DefaultAssetText, Text _UGCAssetTitle, Text _UGCAssetText,
		Text _ExtraParamText, Boolean _CanScroll, Text _ExtraParamHelperTitle, Text _ExtraParamHelperText, Text _SecondaryButtonName, Text _Logo, Text _AssetLogo) {
	G_LayerName				= _LayerName;
	G_AssetName				= _AssetName;
	G_DefaultAssetTitle		= _DefaultAssetTitle;
	G_UGCAssetTitle			= _UGCAssetTitle;
	G_DefaultAssetText		= _DefaultAssetText;
	G_UGCAssetText			= _UGCAssetText;
	G_ExtraParamText		= _ExtraParamText;
	G_CanScroll				= _CanScroll;
	G_ExtraParamHelperTitle	= _ExtraParamHelperTitle;
	G_ExtraParamHelperText	= _ExtraParamHelperText;
	G_SecondaryButtonName	= _SecondaryButtonName;
	G_Logo					= _Logo;
	G_AssetLogo				= _AssetLogo;
	DesignManialinks::Init();
	G_SubFont				= Font::GetFontName("SubTitle");
}

Void Init(Text _LayerName, Text[] _AssetName, Text _DefaultAssetTitle, Text _DefaultAssetText, Text _UGCAssetTitle, Text _UGCAssetText,
		Text _ExtraParamText, Boolean _CanScroll, Text _ExtraParamHelperTitle, Text _ExtraParamHelperText, Text _SecondaryButtonName)
{
	Init(_LayerName, _AssetName, _DefaultAssetTitle, _DefaultAssetText, _UGCAssetTitle, _UGCAssetText,
		 _ExtraParamText, _CanScroll, _ExtraParamHelperTitle, _ExtraParamHelperText, _SecondaryButtonName, C_DefaultLogo, C_DefaultAssetLogo);
}

Void Init(Text _LayerName, Text[] _AssetName, Text _DefaultAssetTitle, Text _DefaultAssetText, Text _UGCAssetTitle, Text _UGCAssetText, Text _ExtraParamText, Boolean _CanScroll) {
	Init(_LayerName, _AssetName, _DefaultAssetTitle, _DefaultAssetText, _UGCAssetTitle, _UGCAssetText, _ExtraParamText, _CanScroll, "", "", //L16N |Infinitive| In a popup, a button to modify the selected file
					_("Edit"));
}

Void Init(Text _LayerName, Text[] _AssetName, Text _DefaultAssetTitle, Text _DefaultAssetText, Text _UGCAssetTitle, Text _UGCAssetText, Text _ExtraParamText) {
	Init(_LayerName, _AssetName, _DefaultAssetTitle, _DefaultAssetText, _UGCAssetTitle, _UGCAssetText, _ExtraParamText, False);
}

Text HideParamCheckbox() {
	if (G_ExtraParamText == "") {
		return "1";
	}
	return "0";
}

Text ManialinkFrameModels()
{
	return """
	<framemodel id="AssetButton">
		<quad id="Quad_Contour" halign="center" valign="center" size="140 10" bgcolor="000" opacity="0.3"/>
		<quad id="Quad_Section" halign="center" valign="center" size="140 10" scriptevents="1"/>
		<label id="Asset_Label" halign="center" valign="center" size="80 5" pos="0 0.5" z-index="1" text="Classic Map Editor" textfont="{{{G_SubFont}}}" textsize="3.5" textcolor="fff"/>
		<quad id="Quad_ActiveButton"	halign="center" valign="center" size="6.5 6.5" pos="75.65 0" z-index="2" image="{{{C_IMG_Checkbox_Closed}}}" imagefocus="{{{C_IMG_Checkbox_Closed_Over}}}" scriptevents="1"/>
		<quad id="Quad_RemoveButton"	halign="center" valign="center" size="4 4" pos="75.65 0" z-index="2" image="{{{C_IMG_Cross_Remove}}}" colorize="fff" scriptevents="1"/>
		<quad id="Quad_ButtonContour"	halign="center" valign="center" size="10 10" pos="75.65 0" z-index="-1" bgcolor="000" opacity="0.3" scriptevents="1"/>
	</framemodel>""";
}

Text ScrollIfCanScroll()
{
	if (G_CanScroll) {
		return DesignManialinks::ManialinkScrollFrame(<-5., -50.>, C_ScrollButton, C_ScrollTenButton, C_ScrollLastButton, 3.6, "", "AssetScroll");
	}
	return "";
}

Text SecondButtonIfSecondButton()
{
	if (G_SecondaryButtonName != "") {
		return DesignManialinks::ManialinkSecondaryButtonSmall(<0.4, -16.>, <37., 8.5>, G_SecondaryButtonName, "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/AddLogo.dds", "z-index=\"1\"", "Action1", "SecondaryButton");
	}
	return "";
}

Text ManialinkMainBody()
{
	declare Text	MainFont				= Font::GetFontName("Main");
	declare Text	Img_ConditionFlag		= "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Warning.dds";
	return """
		<frame id="AssetMaker_Frame">
			<quad id="Quad_BlurryBG"	halign="center" valign="center" size="180 140" pos="0 15" z-index="-1" opacity="0" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
			<quad id="Quad_AssetBG"  halign="center" valign="center" pos="0 0" size="320 180" z-index="-6" opacity="0." scriptevents="1"/>
			<frame id="Frame_Menu" pos="0 68">
				<quad id="Quad_Title" valign="center" halign="center" size="16 16" pos="-87 -1.5" z-index="3" keepratio="fit" colorize="{{{DesignManialinks::GetColorCode_Overall()}}}" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" image="{{{G_Logo}}}"/>
				<label id="Label_Title" valign="center" size="160 10" textfont="{{{MainFont}}}" z-index="2" textsize="9" textprefix="$t" text="{{{G_AssetName[0]}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" pos="-75 0" halign="left"/>
				<quad id="Quad_Black" halign="center" valign="top" size="151.65 0.2" pos="0.825 -8" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
				<quad id="Quad_Black" halign="left" valign="bottom" size="32 0.8" pos="-75 -8" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
			</frame>

			<frame id="Frame_DefaultAssetList" pos="-5 50">
				<frame id="AddablePart" pos="0 -55">
					<quad id="Quad_Addable" halign="center" valign="center" size="140 8" scriptevents="1"/>
					<label id="Addable_Label" halign="center" valign="center" size="80 5" pos="0 0.5" z-index="1" text="+" textfont="{{{G_SubFont}}}" textsize="5" textcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}"/>
				</frame>
				<frameinstance modelid="AssetButton" id="AssetButton0" pos="0 -5.0"/>
				<frameinstance modelid="AssetButton" id="AssetButton1" pos="0 -15.65"/>
				<frameinstance modelid="AssetButton" id="AssetButton2" pos="0 -26.3"/>
				<frameinstance modelid="AssetButton" id="AssetButton3" pos="0 -36.95"/>
				<frameinstance modelid="AssetButton" id="AssetButton4" pos="0 -47.6"/>
				<frameinstance modelid="AssetButton" id="AssetButton5" pos="0 -58.25"/>
				<frameinstance modelid="AssetButton" id="AssetButton6" pos="0 -68.9"/>
				<frameinstance modelid="AssetButton" id="AssetButton7" pos="0 -79.55"/>
				<frameinstance modelid="AssetButton" id="AssetButton8" pos="0 -90.2"/>
			</frame>

			{{{ScrollIfCanScroll()}}}

			<frame id="ExtraParamsScreen" pos="0 -70" hidden="1">
				<quad id="Quad_Black" halign="center" valign="center" z-index="-1" size="174 10" bgcolor="000" opacity="0.3"/>
				<quad id="Quad_ExtraParams" halign="center" valign="center" size="174 10" scriptevents="1"/>
				<label halign="left" valign="center" size="140 5" pos="-80 0" text="{{{G_ExtraParamText}}}" textcolor="fff" textfont="{{{G_SubFont}}}"/>
				<quad id="ExtraParamCheckBox" halign="center" valign="center" size="6.5 6.5" pos="75 0" z-index="1" image="{{{C_IMG_Checkbox_Closed}}}" hidden="{{{HideParamCheckbox()}}}" scriptevents="1"/>
			</frame>

			<frame id="FrameConditions" pos="-118 -26.2">
				<quad id="ConditionFlag" halign="center" valign="center" size="5.5 5.5" pos ="5 -4" image="{{{Img_ConditionFlag}}}" keepratio="Fit" opacity="0.7" colorize="aaa"/>
				<quad size="41 21" z-index="-1" bgcolor="FFF" opacity="0.4"/>
				<quad size="41 21" z-index="-1" opacity="0" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
				<label id="ConditionsTextTitle" halign="left" valign="center" size="24 4" pos="10 -4" textprefix="$t" text="Conditions" textsize="1.5" textfont="{{{G_SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
				<label id="ConditionsTextLabel" halign="left" valign="top" size="27 10" pos="10 -8" text="Lorem Ipsum dolor sit amet, consectetur adipiscing elit." textsize="0.5" textfont="{{{G_SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" autonewline="1"/>
			</frame>

			<frame id="Frame_CardInfo" pos="-35 -100" z-index="3" hidden="1">
				<quad									size="134.4 28" z-index="-1" opacity="0.3" bgcolor="000"/>
				<quad									size="134.4 0.2"			bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}"/>
				<frame id="Habillage_Menu_Top">
					<quad halign="left" valign="top"	size="2.2 0.7"  pos="0 0" opacity="1." bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}"/>
					<quad halign="left" valign="top"	size="0.7 2.2"  pos="0 0" opacity="1." bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}"/>
				</frame>
				<frame id="GeneralInfo" pos="-15 40">
					<quad	id="Quad_InfoLogo"							halign="center" valign="center"	pos="25.5 -50.5" z-index="1" size="11 11" keepratio="Fit" modulatecolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}" image="{{{G_AssetLogo}}}"/>
					<label	id="MediaCardDisplayer_MediaNameLabel"		halign="left" valign="center"	pos="35 -46.9" z-index="2" size="60 0" textfont="{{{MainFont}}}" textsize="5" textcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}" text="MyScript.Script.txt"/>
					<label	id="MediaCardDisplayer_AuthorNameLabel"		halign="left" valign="center"	pos="35 -53.9" z-index="2" size="60 0" textfont="{{{MainFont}}}" textsize="1" textcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}" text="By Kokolastiko" textprefix="$t"/>
					<quad	id="MediaCardDisplayer_AuthorFlagQuad"		halign="left" valign="center"	pos="54 -54.2" size="5 3.5" z-index="2"/>
				</frame>
				<frame id="Buttons" pos="92.8 0">
					{{{DesignManialinks::ManialinkMainButtonSmall(<0.4, -4.>, <37., 8.5>, //L16N Verb, infinitive, to change the current media with another media
	_("Replace"),
	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/StartLogo.dds", "z-index=\"1\"", "MainButton")}}}
					{{{SecondButtonIfSecondButton()}}}
				</frame>
			</frame>
		</frame>""";
}

Text Includes()
{
	return """
	#Include "TextLib" as Asset_TextLib
	#Const ActiveButtonColorOver	[True => <0.09, 0.14, 0.18>, False => <0.29, 0.34, 0.38>]
	#Const ActiveButtonColorOut		[True => <0.19, 0.24, 0.28>, False => <1., 1., 1.>]
	#Const C_NOASSET				-1
	#Const C_DEFAULTASSET			0
	#Const C_UGCASSET				1
	#Const C_EXTRAPARAM				2
	#Const C_OPPOSITEASSET			[0 => 1, 1 => 0]
	#Const C_AllAssetPositions		{{{dump(C_AllAssetPositions)}}}
	#Const C_AssetPositions	 		[0 => {{{C_DefaultAssetPositions}}},
										1	 => {{{C_UGCAssetPositions}}}]
	#Const C_HelperPositions		[0 => {{{C_DefaultAssetCondPos}}},
										1	 => {{{C_UGCAssetCondPos}}},
										2	 => {{{C_ExtraParamHelperPos}}}]
	#Const C_HelperTitles			[0 => {{{dump(G_DefaultAssetTitle)}}},
										1	 => {{{dump(G_UGCAssetTitle)}}},
										2	 => {{{dump(G_ExtraParamHelperTitle)}}}]
	#Const C_HelperTexts			[0 => {{{dump(G_DefaultAssetText)}}},
										1	 => {{{dump(G_UGCAssetText)}}},
										2	 => {{{dump(G_ExtraParamHelperText)}}}]
	#Const C_Asset_CanScroll		{{{G_CanScroll}}}
	#Const C_Asset_HasExtraParam	{{{G_ExtraParamText != ""}}}

	{{{Manialink::GetIncludes()}}}
	{{{DesignManialinks::Includes()}}}
	""";
}

Text Declares() {
	return """
	{{{Manialink::Load()}}}
	{{{DesignManialinks::Declares()}}}
	declare Integer			 G_Private_Asset_ClickedFrame;
	declare Integer          G_Private_Asset_ActiveFocus;
	declare Boolean[Integer] G_Private_Asset_IsActive;
	declare Integer          G_Private_Asset_ActiveTimeToUnfocus;
	declare Integer			 G_Private_Asset_CurrentFocusedPart;
	declare Boolean			 G_Private_Asset_IsParamTrue;
	declare Text[][Integer]	 G_Private_Asset_AssetLists;

	Void Asset_MoveFrame(Integer _NewPart)
	{
		if (_NewPart == G_Private_Asset_CurrentFocusedPart) {
			return;
		}
		G_Private_Asset_CurrentFocusedPart = _NewPart;
		if (_NewPart == C_NOASSET) {
			log(Now ^ ") WARNING : Asset_MoveFrame(C_NOASSET) utilisé. Arrêt de la fonction");
			return;
		}
		declare Vec2 FramePosition = C_HelperPositions[_NewPart];
		if (_NewPart == C_DEFAULTASSET || _NewPart == C_UGCASSET) {
			declare Real NewCount	= 1. * G_Private_Asset_AssetLists[_NewPart].count;
			declare Real NewFactor	= (NewCount - 1.) / ({{{C_MaxAssetNb - 1}}} * 2.);
			FramePosition	+= NewFactor * (C_HelperPositions[C_OPPOSITEASSET[_NewPart]] - C_HelperPositions[_NewPart]);
		}
		declare TextLabel		= C_HelperTexts[_NewPart];
		declare TextTitle		= C_HelperTitles[_NewPart];
		declare CMlFrame FrameConditions		<=> (Page.GetFirstChild("FrameConditions") as CMlFrame);
		LibManialink_SetTargetPosition(FrameConditions, FramePosition);
		LibManialink_PresetAnim(FrameConditions, 450, "EaseOutExp");
		declare CMlLabel ConditionsTextLabel	<=> (Page.GetFirstChild("ConditionsTextLabel") as CMlLabel);
		ConditionsTextLabel.SetText(TextLabel);
		declare CMlLabel ConditionsTextTitle	<=> (Page.GetFirstChild("ConditionsTextTitle") as CMlLabel);
		ConditionsTextTitle.SetText(TextTitle);
	}

	Void Asset_UpdateLabelSectionState(Integer _Index, Boolean _IsActive)
	{
		declare Real Opacity;
		if(_IsActive) Opacity = 1.0;
		else          Opacity = 0.6;

		declare CMlFrame Frames_Instance	<=> (Page.MainFrame.GetFirstChild("AssetButton"^_Index)	as CMlFrame);
		declare CMlQuad Quad_Contour		<=> (Frames_Instance.GetFirstChild("Quad_Contour")	as CMlQuad);
		declare CMlQuad Quad_ButtonContour	<=> (Frames_Instance.GetFirstChild("Quad_ButtonContour") as CMlQuad);
		declare CMlLabel Asset_Label		<=> (Frames_Instance.GetFirstChild("Asset_Label") as CMlLabel);
		Quad_Contour.Opacity = 0.3 * Opacity;
		Quad_ButtonContour.Opacity = 0.3 * Opacity;
		Asset_Label.Opacity = Opacity;

		declare CMlQuad ParamBox			<=> (Frames_Instance.GetFirstChild("Quad_ActiveButton") as CMlQuad);
		if (_IsActive) {
			ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Closed)}}});
			ParamBox.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Closed_Over)}}};
		} else {
			ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Open)}}});
			ParamBox.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Open_Over)}}};
		}
	}

	Void Asset_UpdateExtraParam(Boolean _IsActive)
	{
		declare CMlQuad ParamBox <=> (Page.GetFirstChild("ExtraParamCheckBox") as CMlQuad);
		if (G_Private_Asset_IsParamTrue) {
			ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Closed)}}});
		} else {
			ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Open)}}});
		}
	}

	Void Asset_SetColorQuadColor(Integer _Index, Vec3 _Color, Real _Opacity)
	{
		declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
		if(Frame_Active == Null) return;
		declare CMlQuad Quad_ActiveButton     <=> (Frame_Active.GetFirstChild("Quad_ActiveButton")	as CMlQuad);
		Quad_ActiveButton.BgColor = _Color;
		Quad_ActiveButton.Opacity = _Opacity;
	}

	Void Asset_MoveActiveQuad(Integer _Index, Real _PosX)
	{
		declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
		if(Frame_Active == Null || !Frame_Active.Visible) return;
		declare CMlQuad Quad_Active     <=> (Frame_Active.GetFirstChild("Quad_Active")	as CMlQuad);
		declare CMlLabel Label_Active     <=> (Frame_Active.GetFirstChild("Label_Active")	as CMlLabel);
		LibManialink_SetTargetPosition(Frame_Active, <_PosX, Frame_Active.RelativePosition_V3.Y>);
		LibManialink_PresetAnim(Frame_Active, 200, "EaseOutCubic");
	}

	Integer Private_Asset_UGCIndex(Integer _AssetIndex)
	{
		if (G_Private_Asset_AssetLists[C_UGCASSET].existskey(_AssetIndex - G_Private_Asset_AssetLists[C_DEFAULTASSET].count)
			&& (G_Private_Asset_AssetLists[C_UGCASSET][_AssetIndex - G_Private_Asset_AssetLists[C_DEFAULTASSET].count] != "")) {
			return _AssetIndex - G_Private_Asset_AssetLists[C_DEFAULTASSET].count;
		}
		return -1;
	}

	Integer Private_Asset_DefaultIndex(Integer _AssetIndex)
	{
		if (G_Private_Asset_AssetLists[C_DEFAULTASSET].existskey(_AssetIndex)
			&& (G_Private_Asset_AssetLists[C_DEFAULTASSET][_AssetIndex] != "")) {
			return _AssetIndex;
		}
		return -1;
	}

	Boolean Asset_IsIndexInvalid(Integer _AssetIndex)
	{
		return ((Private_Asset_UGCIndex(_AssetIndex) == -1)
			&& (Private_Asset_DefaultIndex(_AssetIndex) == -1));
	}

	Void Private_Asset_RefreshLists()
	{
		declare AddablePart		<=> Page.GetFirstChild("AddablePart");
		declare DefaultCount	= G_Private_Asset_AssetLists[C_DEFAULTASSET].count;
		declare UGCCount		= 0;
		foreach (UGCAsset in G_Private_Asset_AssetLists[C_UGCASSET]) {
			if (UGCAsset != "") {
				UGCCount += 1;
			}
		}
		if (DefaultCount + UGCCount < {{{C_MaxAssetNb}}}) {
			AddablePart.RelativePosition_V3 = C_AllAssetPositions[DefaultCount + UGCCount] + <0., -2.>;
			AddablePart.Show();
		} else {
			AddablePart.Hide();
		}
	}

	Void ChangeClickedFrame(Integer _NewClickedFrameIndex)
	{
		if (G_Private_Asset_ClickedFrame == _NewClickedFrameIndex) {
			return;
		}
		if (Asset_IsIndexInvalid(_NewClickedFrameIndex)
			&& (_NewClickedFrameIndex != -1)) {
			return;
		}
		declare OldAssetFrame <=> (Page.GetFirstChild("AssetButton" ^ G_Private_Asset_ClickedFrame) as CMlFrame);
		declare NewAssetFrame <=> (Page.GetFirstChild("AssetButton" ^ _NewClickedFrameIndex) as CMlFrame);
		if (OldAssetFrame != Null) {
			declare Label		<=> (OldAssetFrame.GetFirstChild("Asset_Label") as CMlLabel);
			declare Quad		<=> (OldAssetFrame.GetFirstChild("Quad_Contour") as CMlQuad);
			Label.TextColor		= Asset_TextLib::ToColor("FFF");
			Quad.BgColor		= Asset_TextLib::ToColor("000");
		}
		if (NewAssetFrame != Null) {
			declare Label		<=> (NewAssetFrame.GetFirstChild("Asset_Label") as CMlLabel);
			declare Quad		<=> (NewAssetFrame.GetFirstChild("Quad_Contour") as CMlQuad);
			Label.TextColor		= Asset_TextLib::ToColor("000");
			Quad.BgColor		= Asset_TextLib::ToColor("FFF");
		}
		declare Frame_CardInfo <=> Page.GetFirstChild("Frame_CardInfo");
		if (_NewClickedFrameIndex == -1) {
			LibManialink_AnimStop(Frame_CardInfo);
			LibManialink_SetTargetPosition(Frame_CardInfo, <-35., -100.>);
			LibManialink_PresetAnim(Frame_CardInfo, 300, "EaseOutQuad");
		} else {
			declare MediaCardDisplayer_MediaNameLabel	<=> (Page.GetFirstChild("MediaCardDisplayer_MediaNameLabel")	as CMlLabel);
			declare MediaCardDisplayer_AuthorNameLabel	<=> (Page.GetFirstChild("MediaCardDisplayer_AuthorNameLabel")	as CMlLabel);
			declare MediaCardDisplayer_AuthorFlagQuad	<=> (Page.GetFirstChild("MediaCardDisplayer_AuthorFlagQuad")	as CMlQuad);
			MediaCardDisplayer_MediaNameLabel.SetText("");
			if (Private_Asset_DefaultIndex(_NewClickedFrameIndex) != -1) {
				MediaCardDisplayer_MediaNameLabel.SetText(G_Private_Asset_AssetLists[C_DEFAULTASSET][Private_Asset_DefaultIndex(_NewClickedFrameIndex)]);
				MediaCardDisplayer_AuthorNameLabel.SetText("{{{"By Nadeo"}}}");
				declare MainButton_Frame <=> Page.GetFirstChild("MainButton_Frame");
				MainButton_Frame.Hide();
			}
			if (Private_Asset_UGCIndex(_NewClickedFrameIndex) != -1) {
				MediaCardDisplayer_MediaNameLabel.SetText(G_Private_Asset_AssetLists[C_UGCASSET][Private_Asset_UGCIndex(_NewClickedFrameIndex)]);
				MediaCardDisplayer_AuthorNameLabel.SetText("{{{_("Custom")}}}");
				declare MainButton_Frame <=> Page.GetFirstChild("MainButton_Frame");
				MainButton_Frame.Show();
			}
			LibManialink_AnimStop(Frame_CardInfo);
			LibManialink_SetTargetPosition(Frame_CardInfo, <-35., -60.>);
			LibManialink_PresetAnim(Frame_CardInfo, 300, "EaseOutQuad");
		}
		G_Private_Asset_ClickedFrame = _NewClickedFrameIndex;
	}

	Void Asset_DisplayAssets()
	{
		ChangeClickedFrame(-1);
		declare Text[]	Asset_DefaultAsset			for Page;
		declare Boolean[] Asset_ActivatedDefault	for Page;
		declare Text[]	Asset_UGCAsset				for Page;
		declare Boolean Asset_ExtraParamTrue		for Page;
		declare Integer	Asset_CurrentPage			for Page;
		declare Integer	Asset_MaxPageNb				for Page;
		G_Private_Asset_AssetLists[C_UGCASSET] = Asset_UGCAsset;
		G_Private_Asset_AssetLists[C_DEFAULTASSET] = Asset_DefaultAsset;
		for (I, 0, {{{C_MaxAssetNb - 1}}}) {
			declare AssetFrame			<=> (Page.GetFirstChild("AssetButton" ^ I) as CMlFrame);
			declare Asset_Label			<=> (AssetFrame.GetFirstChild("Asset_Label") as CMlLabel);
			declare Quad_Active			<=> AssetFrame.GetFirstChild("Quad_ActiveButton");
			declare Quad_RemoveButton	<=> (AssetFrame.GetFirstChild("Quad_RemoveButton") as CMlQuad);
			if (!Asset_DefaultAsset.existskey(I) || Asset_DefaultAsset[I] == "") {
				AssetFrame.RelativePosition_V3 = C_AllAssetPositions[I] + <0., -2.>;
				Quad_Active.Hide();
				declare NewIndex = I - Asset_DefaultAsset.count;
				if (!Asset_UGCAsset.existskey(NewIndex) || Asset_UGCAsset[NewIndex] == "") {
					Asset_Label.SetText("");
					Asset_UpdateLabelSectionState(I, False);
					if (!G_Private_Asset_AssetLists[C_UGCASSET].existskey(NewIndex)) {
						G_Private_Asset_AssetLists[C_UGCASSET].add("");
					}
					Quad_RemoveButton.Hide();
				} else {
					Asset_Label.SetText(Asset_UGCAsset[NewIndex]);
					Asset_UpdateLabelSectionState(I, True);
					Quad_RemoveButton.Show();
					Quad_RemoveButton.ChangeImageUrl({{{dump(C_IMG_Cross_Remove)}}});
				}
			} else {
				AssetFrame.RelativePosition_V3 = C_AllAssetPositions[I] + <0., 2.>;
				G_Private_Asset_IsActive[I] = Asset_ActivatedDefault[I];
				Asset_UpdateLabelSectionState(I, G_Private_Asset_IsActive[I]);
				Asset_Label.SetText(Asset_DefaultAsset[I]);
				Quad_Active.Show();
				Quad_RemoveButton.Hide();
			}
		}
		if (C_Asset_CanScroll) {
			DesignManialinks_ScrollButtons_Update("AssetScroll", Asset_CurrentPage, Asset_MaxPageNb);
		}
		G_Private_Asset_IsParamTrue = Asset_ExtraParamTrue;
		Asset_UpdateExtraParam(G_Private_Asset_IsParamTrue);
		Private_Asset_RefreshLists();
	}

	Void Asset_Init()
	{
		G_Private_Asset_ClickedFrame		= -1;
		G_Private_Asset_ActiveFocus			= 0;
		G_Private_Asset_IsActive			= Boolean[Integer];
		G_Private_Asset_ActiveTimeToUnfocus	= -1;
		G_Private_Asset_CurrentFocusedPart	= C_NOASSET;
		G_Private_Asset_IsParamTrue			= True;
		G_Private_Asset_AssetLists			= [	C_NOASSET		=> Text[],
												C_DEFAULTASSET	=> Text[],
												C_UGCASSET		=> Text[]];
		declare CMlQuad ConditionFlag	<=> (Page.MainFrame.GetFirstChild("ConditionFlag")	as CMlQuad);
		ConditionFlag.Colorize = <0.6,0.6,0.6>;
		for(I, 0, {{{C_MaxAssetNb - 1}}})
		{
			G_Private_Asset_IsActive[I] = True;
			declare CMlFrame Frames_Instance	<=> (Page.MainFrame.GetFirstChild("AssetButton"^I)	as CMlFrame);
			declare CMlQuad Quad_ActiveButton	<=> (Frames_Instance.GetFirstChild("Quad_ActiveButton")	as CMlQuad);
			declare Integer QuadId for Quad_ActiveButton;
			declare CMlQuad Quad_Section		<=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
			declare Integer SectionId for Quad_Section;
			declare CMlQuad Quad_RemoveButton	<=> (Frames_Instance.GetFirstChild("Quad_RemoveButton") as CMlQuad);
			declare Integer RemoveId for Quad_RemoveButton;
			QuadId = I;
			SectionId = I;
			RemoveId = I;
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^I)	as CMlFrame);
			if(Frame_Active == Null) {
				Asset_UpdateLabelSectionState(I, False);
			} else {
				Asset_MoveActiveQuad(I, -20.);
			}
		}
	}

	Void Asset_Show()
	{
		DesignManialinks_Show();
		SendCustomEvent("Asset_ShowRefresh", [{{{dump(G_LayerName)}}}]);
		if (G_Private_Asset_CurrentFocusedPart == C_NOASSET) {
			Asset_MoveFrame(C_DEFAULTASSET);
		}
	}

	Void Asset_Loop()
	{
		DesignManialinks_Loop();
		LibManialink_AnimLoop();
		if(G_Private_Asset_ActiveTimeToUnfocus < Now && G_Private_Asset_ActiveTimeToUnfocus != -1)
		{
			Asset_MoveActiveQuad(G_Private_Asset_ActiveFocus, -20.);
			G_Private_Asset_ActiveFocus = 0;
			G_Private_Asset_ActiveTimeToUnfocus = -1;
		}
		foreach(Event in PendingEvents) {
			switch(Event.Type) {
				case CMlEvent::Type::MouseClick: {
					if (Event.ControlId == "Quad_Section")
					{
						declare Integer SectionId for Event.Control;
						ChangeClickedFrame(SectionId);
					}
					else if(Event.ControlId == "Quad_ActiveButton")
					{
						declare Integer QuadId for Event.Control;
						if (QuadId <= -1) continue;
						G_Private_Asset_IsActive[QuadId] = !G_Private_Asset_IsActive[QuadId];
						declare Vec3 Color = ActiveButtonColorOver[G_Private_Asset_IsActive[QuadId]];
						Asset_SetColorQuadColor(QuadId, Color, 0.8);
						Asset_UpdateLabelSectionState(QuadId, G_Private_Asset_IsActive[QuadId]);
						SendCustomEvent("Asset_SetActive", [{{{dump(G_LayerName)}}}, Asset_TextLib::ToText(QuadId), Asset_TextLib::ToText(G_Private_Asset_IsActive[QuadId])]);
						declare CMlQuad ParamBox <=> (Event.Control as CMlQuad);
					}
					else if (Event.ControlId == "ExtraParamCheckBox")
					{
						G_Private_Asset_IsParamTrue = !G_Private_Asset_IsParamTrue;
						Asset_UpdateExtraParam(G_Private_Asset_IsParamTrue);
						SendCustomEvent("Asset_SpecialParamSwitch", [{{{dump(G_LayerName)}}}, Asset_TextLib::ToText(G_Private_Asset_IsParamTrue)]);
					}
					else if (Event.ControlId == "Quad_Addable")
					{
						declare Addable_Label <=> (Page.GetFirstChild("Addable_Label") as CMlLabel);
						Addable_Label.TextColor = Asset_TextLib::ToColor("{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}");
						Addable_Label.TextSizeReal = 5.;
						Addable_Label.SetText("+");
						SendCustomEvent("Asset_AddNew", [{{{dump(G_LayerName)}}}]);
					}
					else if (Event.ControlId == "AssetScroll_ScrollL")
					{
						SendCustomEvent("Asset_PageDown", [{{{dump(G_LayerName)}}}]);
					}
					else if (Event.ControlId == "AssetScroll_ScrollR")
					{
						SendCustomEvent("Asset_PageUp", [{{{dump(G_LayerName)}}}]);
					}
					else if (Event.ControlId == "Quad_AssetBG")
					{
						ChangeClickedFrame(-1);
					}
					else if (Event.ControlId == "Quad_RemoveButton")
					{
						declare Integer RemoveId for Event.Control;
						SendCustomEvent("Asset_Remove", [{{{dump(G_LayerName)}}}, Asset_TextLib::ToText(RemoveId)]);
					}
				}
				case CMlEvent::Type::MouseOver: {
					if (Event.ControlId == "Quad_Section")
					{
						declare Integer SectionId for Event.Control;
						declare AssetButton <=> (Page.GetFirstChild("AssetButton" ^ SectionId) as CMlFrame);
						declare Quad_Contour <=> (AssetButton.GetFirstChild("Quad_Contour") as CMlQuad);
						if (G_Private_Asset_ClickedFrame == SectionId) {
							Quad_Contour.BgColor = Asset_TextLib::ToColor("9EF");
						} else if (!Asset_IsIndexInvalid(SectionId)) {
							Quad_Contour.BgColor = Asset_TextLib::ToColor("045");
						}
						if(G_Private_Asset_ActiveFocus != SectionId) Asset_MoveActiveQuad(G_Private_Asset_ActiveFocus, -20.);
						declare Text[] Asset_DefaultAsset	for Page;
						if (!Asset_DefaultAsset.existskey(SectionId)) {
							Asset_MoveFrame(C_UGCASSET);
						} else {
							G_Private_Asset_ActiveFocus = SectionId;
							Asset_MoveActiveQuad(G_Private_Asset_ActiveFocus, 10.);
							G_Private_Asset_ActiveTimeToUnfocus = -1;
							Asset_MoveFrame(C_DEFAULTASSET);
						}
					}
					else if(Event.ControlId == "Quad_Active")
					{
						G_Private_Asset_ActiveTimeToUnfocus = -1;
						Asset_MoveFrame(C_DEFAULTASSET);
					}
					else if(Event.ControlId == "Quad_ActiveButton")
					{
						G_Private_Asset_ActiveTimeToUnfocus = -1;
						declare Vec3 Color = ActiveButtonColorOver[G_Private_Asset_IsActive[G_Private_Asset_ActiveFocus]];
						declare Real Opacity;
						if(G_Private_Asset_IsActive[G_Private_Asset_ActiveFocus]) Opacity = 0.8;
						else                          Opacity = 0.5;
						Asset_SetColorQuadColor(G_Private_Asset_ActiveFocus, Color, Opacity);
						Asset_MoveFrame(C_DEFAULTASSET);
					}
					else if (Event.ControlId == "Quad_AssetBG")
					{
						G_Private_Asset_ActiveTimeToUnfocus = 1000 + Now;
					}
					else if (Event.ControlId == "Quad_Addable")
					{
						declare Addable_Label <=> (Page.GetFirstChild("Addable_Label") as CMlLabel);
						Addable_Label.TextColor = Asset_TextLib::ToColor("FFF");
						Addable_Label.TextSizeReal = 2.7;
						Addable_Label.SetText("{{{TextLib::ToUpperCase(G_AssetName[1])}}}");
						Asset_MoveFrame(C_UGCASSET);
					}
					else if (Event.ControlId == "Quad_RemoveButton")
					{
						declare Quad_RemoveButton <=> (Event.Control as CMlQuad);
						Quad_RemoveButton.ChangeImageUrl({{{dump(C_IMG_Cross_RemoveOver)}}});
						Asset_MoveFrame(C_UGCASSET);
					}
					else if (Event.ControlId == "Quad_ExtraParams")
					{
						if (C_Asset_HasExtraParam) {
							Asset_MoveFrame(C_EXTRAPARAM);
						}
					}
					else if (Event.ControlId == "ExtraParamCheckBox")
					{
						Asset_MoveFrame(C_EXTRAPARAM);
					}
				}
				case CMlEvent::Type::MouseOut: {
					if (Event.ControlId == "Quad_Section")
					{
						declare Integer SectionId for Event.Control;
						declare AssetButton <=> (Page.GetFirstChild("AssetButton" ^ SectionId) as CMlFrame);
						declare Quad_Contour <=> (AssetButton.GetFirstChild("Quad_Contour") as CMlQuad);
						if (G_Private_Asset_ClickedFrame == SectionId) {
							Quad_Contour.BgColor = Asset_TextLib::ToColor("FFF");
						} else {
							Quad_Contour.BgColor = Asset_TextLib::ToColor("000");
						}
					}
					else if (Event.ControlId == "Quad_ActiveButton")
					{
						declare Vec3 Color = ActiveButtonColorOut[G_Private_Asset_IsActive[G_Private_Asset_ActiveFocus]];
						declare Real Opacity;
						if(G_Private_Asset_IsActive[G_Private_Asset_ActiveFocus]) Opacity = 0.8;
						else                          Opacity = 0.5;
						Asset_SetColorQuadColor(G_Private_Asset_ActiveFocus, Color, Opacity);
					}
					else if (Event.ControlId == "Quad_Addable")
					{
						declare Addable_Label <=> (Page.GetFirstChild("Addable_Label") as CMlLabel);
						Addable_Label.TextColor = Asset_TextLib::ToColor("{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}");
						Addable_Label.TextSizeReal = 5.;
						Addable_Label.SetText("+");
					}
					else if (Event.ControlId == "Quad_RemoveButton")
					{
						declare Quad_RemoveButton <=> (Event.Control as CMlQuad);
						Quad_RemoveButton.ChangeImageUrl({{{dump(C_IMG_Cross_Remove)}}});
					}
				}
				case CMlEvent::Type::PluginCustomEvent: {
					switch(Event.CustomEventType) {
						case "GetAssets" : {
							Asset_DisplayAssets();
						}
					}
				}
			}
		}
	}""";
}