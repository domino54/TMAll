#Include "TextLib"											as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 		as Font
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks

declare Text	MainFont;
declare Vec2    SizeServerInfo;
declare Text    LabelPlayers;
declare Text    LabelMaps;
declare Integer ServerInfo_Count_InstancesPlayerY;
declare Integer ServerInfo_Count_InstancesPlayerX;
declare Real	ServerInfo_PosXFirstPlayer;
declare Real	ServerInfo_PosYFirstPlayer;
declare Real	ServerInfo_SizeXQuad;
declare Real	ServerInfo_SizeYQuad;
declare Real	ServerInfo_MarginY_ButtonPlayer;
declare Real	ServerInfo_MarginX_ButtonPlayer;
declare Vec2	MainActionPosition;
declare Vec2	MainActionPosition2;
declare Text	SubFont;

Void Load()
{
	MainFont                          = Font::GetFontName("Main");
	SubFont							  = Font::GetFontName("SubTitle");
	SizeServerInfo                    = <197.7, 95.>;
	LabelPlayers                      = TextLib::GetTranslatedText(_("Players"));
	LabelMaps                         = TextLib::GetTranslatedText(_("Maps"));
	ServerInfo_Count_InstancesPlayerY = 10;
	ServerInfo_Count_InstancesPlayerX = 1;
	ServerInfo_PosXFirstPlayer        = -10.8;
	ServerInfo_PosYFirstPlayer        = -33.;
	ServerInfo_SizeXQuad              = 40.;
	ServerInfo_SizeYQuad              = 7.;
	ServerInfo_MarginY_ButtonPlayer   = 0.3;
	ServerInfo_MarginX_ButtonPlayer   = 4.0;
	MainActionPosition                = <-87.3, -28.7>;
	MainActionPosition2               = <-40.3, -28.7>;
	DesignManialinks::Init();

}

Text Inject_ManialinkFrameModels()
{

	declare Text    IMGButton          = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_Scroll_v.dds";

	declare Text MLText = """
	<framemodel id="FrameModel_ServerInfoList">
		""";
		for(I, 0, ServerInfo_Count_InstancesPlayerY-1)
		{
			declare Real IndexY = I*1.;
			declare Real PosnY = ServerInfo_PosYFirstPlayer + IndexY*-ServerInfo_SizeYQuad - IndexY*ServerInfo_MarginY_ButtonPlayer*1.;
			for(J, 0, ServerInfo_Count_InstancesPlayerX-1)
			{
				declare Real IndexX = J*1.;
				declare Real PosnX = ServerInfo_PosXFirstPlayer + IndexX*ServerInfo_SizeXQuad + IndexX*ServerInfo_MarginX_ButtonPlayer*1.;
				MLText^="""
		<frame id="Frame_InfoList{{{I}}}" pos="{{{PosnX}}} {{{PosnY}}}">
			<quad id="Quad_DataBg" halign="center" valign="center" size="{{{ServerInfo_SizeXQuad}}} {{{ServerInfo_SizeYQuad}}}"   z-index="0" opacity="0.6" bgcolor="000" scriptevents="1"/>
			<label id="Label_DataInfo" z-index="0" pos="{{{-ServerInfo_SizeXQuad/2.+2.}}} 0." size="{{{ServerInfo_SizeXQuad-4.}}}" valign="center" halign="left" textsize="1.5" textprefix="$t" text=""  textcolor="fff" textfont="{{{SubFont}}}"/>
		</frame>
				""";
			}
		}
		
		declare Real IndexYMax = ServerInfo_Count_InstancesPlayerY*1.;
		declare Real ArrowPosX = 6.4;
		declare Real ArrowPosY = ServerInfo_PosYFirstPlayer - ServerInfo_SizeYQuad * IndexYMax - IndexYMax * ServerInfo_MarginY_ButtonPlayer-2.;
		MLText^="""
		<frame id="Frame_Arrow">
			<quad id="MenuButtons_ZonePrev"  halign="center"  valign="center" size="6.2 9.2"  pos="{{{ArrowPosX-7.}}} {{{ArrowPosY+0.1}}}" z-index="3" opacity="1.0" image="{{{IMGButton}}}" keepratio="Fit" colorize="ddd" scriptevents="1" />
			<quad id="MenuButtons_ZoneNext"  halign="center"  valign="center" size="6.2 9.2"  pos="{{{ArrowPosX}}} {{{ArrowPosY}}}" z-index="3" opacity="1.0" image="{{{IMGButton}}}" keepratio="Fit" colorize="ddd" scriptevents="1" rot="180"/>
		</frame>
	</framemodel>
	""";
	return MLText;
}

Text Inject_Manialink()
{

	declare Real SizeServerPasswordX      = SizeServerInfo.X/2.;
	declare Real SizeServerPasswordY      = SizeServerInfo.Y/3.;
	declare Real SizeServerPasswordEntryX = SizeServerInfo.X/2.5;

	declare Text    IMGEmpty          = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/EmptyLogo.dds";

	declare Text MLText = """
	<frame id="Frame_ServerInfo" z-index="1" pos="-19.8 -7.5" hidden="1">
		<quad id="BG" halign="center" valign="center" size="{{{SizeServerInfo.X}}} {{{SizeServerInfo.Y}}}"   z-index="-1" pos="0 0" opacity="0.6" bgcolor="000"/>
		<label id="Label_ServerName"  z-index="2" pos="{{{-SizeServerInfo.X/2.+5.}}} {{{SizeServerInfo.Y/2.-5.}}}" size="100." valign="center" halign="left" textsize="5" textprefix="$s" text=""  textcolor="fff" textfont="{{{MainFont}}}"/>
		<label id="Label_ServerComment" halign="left" valign="center" size="75. 50."   z-index="1" pos="{{{-SizeServerInfo.X/2.+5.}}} 0" opacity="1.0" bgcolor="fff"/>
		
		<frame id="Frame_ServerInfo_Players" z-index="2" pos="6 {{{SizeServerInfo.Y/2.-6.}}}">
			<label  z-index="0" pos="0. 0." size="20." valign="center" halign="left" textsize="2" textprefix="$t" text="{{{LabelPlayers}}}:"  textcolor="fff" textfont="{{{SubFont}}}"/>
			<label id="Label_ServerPlayers" z-index="0" pos="{{{ServerInfo_SizeXQuad}}} 0." size="20." valign="center" halign="right" textsize="2" textprefix="$t" text=""  textcolor="fff" textfont="{{{SubFont}}}"/>
			<frameinstance id="Frame_ServerInfoList_Players"  z-index="1" pos="31. 26."  modelid="FrameModel_ServerInfoList" />
		</frame>

		<frame id="Frame_ServerInfo_Maps" z-index="2" pos="{{{ServerInfo_SizeXQuad+10.}}} {{{SizeServerInfo.Y/2.-6.}}}">
			<label  z-index="0" pos="0. 0." size="20." valign="center" halign="left" textsize="2" textprefix="$t" text="{{{LabelMaps}}}:"  textcolor="fff" textfont="{{{SubFont}}}"/>
			<label id="Label_ServerMaps" z-index="0" pos="{{{ServerInfo_SizeXQuad}}} 0." size="20." valign="center" halign="right" textsize="2" textprefix="$t" text=""  textcolor="fff" textfont="{{{SubFont}}}"/>
			<frameinstance id="Frame_ServerInfoList_Maps"  z-index="1" pos="31. 26."  modelid="FrameModel_ServerInfoList" />
		</frame>

		{{{DesignManialinks::ManialinkMainButtonLarge(MainActionPosition, _("Join"), "", "InfoServer_Join")}}}
		{{{DesignManialinks::ManialinkSecondaryButtonLarge(MainActionPosition2, _("Spectate"), "", "", "InfoServer_Spectate")}}}

	</frame>
	<frame id="Frame_ServerPassword" z-index="2" pos="-19.8 -7.5" hidden="1">
		<quad id="BG_Password" halign="center" valign="center" size="390 200"   z-index="-2" pos="19.8 0" opacity="0.5" bgcolor="000" scriptevents="1"/>
		<label id="Label_PassTitle" z-index="0" pos="{{{-SizeServerPasswordX/2.+2.}}} {{{SizeServerPasswordY/2.-3.}}}" size="20." valign="center" halign="left" textsize="4" textprefix="$t" text="{{{_("Join")}}}"  textcolor="fff" textfont="{{{SubFont}}}"/>
		<label  z-index="0" pos="{{{-SizeServerPasswordEntryX/2.0}}} {{{SizeServerPasswordY/2.-10.}}}" size="20." valign="center" halign="left" textsize="2" textprefix="$t" text="{{{_("Password")}}}:"  textcolor="fff" textfont="{{{SubFont}}}"/>
		<quad id="aa" halign="center" valign="center" size="{{{SizeServerPasswordX}}} {{{SizeServerPasswordY}}}"   z-index="-1" pos="0 0" opacity="0.8" bgcolor="000" scriptevents="1"/>
		<quad id="aa" halign="center" valign="center" size="{{{SizeServerPasswordEntryX}}} {{{SizeServerPasswordY/6.}}}"   z-index="0" pos="0 0" opacity="0.8" bgcolor="fff"/>
		<entry halign="center" valign="center" z-index="2" size="{{{SizeServerPasswordEntryX}}} {{{SizeServerPasswordY/6.}}}" default="aaaa" id="Entry_Password" style="TextValueMedium" scriptevents="1"/>
	</frame>
	<frame id="Frame_JoinOrSpectate" z-index="2" pos="-19.8 -7.5" hidden="1">
		{{{DesignManialinks::ManialinkSecondaryButtonSmall(<-40.,5.>, _("Join"), IMGEmpty, "", "", "JoinOrSpect_Join")}}}
		{{{DesignManialinks::ManialinkSecondaryButtonSmall(<5.,5.>,
		//L16N |Verb, infinitive| In a popup, a button to watch the match as a spectator
		_("Spectate"), IMGEmpty, "", "", "JoinOrSpect_Spectate")}}}
		<quad id="BG_JoinOrSpectate" halign="center" valign="center" size="390 200"   z-index="-2" pos="19.8 0" opacity="0.5" bgcolor="000" scriptevents="1"/>
		<label  z-index="0" pos="{{{-SizeServerPasswordX/2.+2.}}} {{{SizeServerPasswordY/2.-3.}}}" size="40." valign="center" halign="left" textsize="4" textprefix="$t" text="{{{_("Join Server")}}}"  textcolor="fff" textfont="{{{SubFont}}}"/>
		<quad id="aa" halign="center" valign="center" size="{{{SizeServerPasswordX}}} {{{SizeServerPasswordY}}}"   z-index="-1" pos="0 0" opacity="0.8" bgcolor="000" scriptevents="1"/>
	</frame>
	
	""";
	return MLText;
}

Text Inject_Include()
{
	return """
#Include "TextLib" as ListDisplayer_InfoServer_TextLib
{{{DesignManialinks::Includes()}}}
""";
}

Text Inject_Declare()
{
	declare Text MLText = """
{{{DesignManialinks::Declares()}}}
	declare Boolean G_IsServerInfo;
	declare Boolean G_IsServerPassword;
	declare Integer G_PlayerPage;
	declare Integer G_MapPage;
	declare Integer G_PlayerPageMax;
	declare Integer G_MapPageMax;
	declare Boolean G_TryToSpectate;
	""";
	return MLText;

}
Text Inject_Function()
{
	declare Text MLText = """
	Void HideServerInfo()
	{
		declare CMlFrame Frame_ServerInfo <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfo") as CMlFrame);
		declare CMlFrame Frame_ServerPassword <=> (Page.MainFrame.GetFirstChild("Frame_ServerPassword") as CMlFrame);
		Frame_ServerInfo.Hide();
		Frame_ServerPassword.Hide();
		G_IsServerInfo = True;
		G_IsServerPassword = False;
		EnableMenuNavigation(True,False,Null,0);
	}

	Void UpdateArrow(Text _FrameFocus, Integer _PageFocus, Integer _PageMax)
	{
		declare CMlFrame Frame_ServerInfoList <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfoList_"^_FrameFocus)   as CMlFrame);
		declare CMlQuad  MenuButtons_ZonePrev <=> (Frame_ServerInfoList.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
		declare CMlQuad  MenuButtons_ZoneNext <=> (Frame_ServerInfoList.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
		if(_PageMax == 0)
		{
			MenuButtons_ZonePrev.Hide();
			MenuButtons_ZoneNext.Hide();
		}
		else
		{
			MenuButtons_ZonePrev.Show();
			MenuButtons_ZoneNext.Show();	
			if(_PageFocus == 0)
			{
				MenuButtons_ZonePrev.Opacity = 0.2;
				MenuButtons_ZoneNext.Opacity = 0.8;
				declare Boolean IsActivate as Prev_IsActivate for MenuButtons_ZonePrev;
				declare Boolean IsActivate as Next_IsActivate for MenuButtons_ZoneNext;
				Prev_IsActivate = False;
				Next_IsActivate = True;

			}
			else if(_PageFocus == _PageMax)
			{
				MenuButtons_ZonePrev.Opacity = 0.8;
				MenuButtons_ZoneNext.Opacity = 0.2;
				declare Boolean IsActivate as Prev_IsActivate for MenuButtons_ZonePrev;
				declare Boolean IsActivate as Next_IsActivate for MenuButtons_ZoneNext;
				Prev_IsActivate = True;
				Next_IsActivate = False;
			}
			else
			{
				MenuButtons_ZonePrev.Opacity = 0.8;
				MenuButtons_ZoneNext.Opacity = 0.8;
				declare Boolean IsActivate as Prev_IsActivate for MenuButtons_ZonePrev;
				declare Boolean IsActivate as Next_IsActivate for MenuButtons_ZoneNext;
				Prev_IsActivate = True;
				Next_IsActivate = True;
			}
		}

	}

	Void UpdateListPlayer()
	{
		declare Text[Text] DataServerInfo for Page;
		declare Text[] PlayerListServerInfo for Page;

		declare CMlFrame Frame_ServerInfoList_Players <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfoList_Players")   as CMlFrame);
		for(I, 0, {{{ServerInfo_Count_InstancesPlayerY-1}}})
		{
			declare CMlFrame Frame_InfoList <=> (Frame_ServerInfoList_Players.GetFirstChild("Frame_InfoList"^I) as CMlFrame);
			declare Integer Index = {{{ServerInfo_Count_InstancesPlayerY}}}*G_PlayerPage + I;
			if(PlayerListServerInfo.existskey(Index))
			{
				Frame_InfoList.Show();
				declare CMlLabel Label_DataInfo <=> (Frame_InfoList.GetFirstChild("Label_DataInfo")	as CMlLabel);
				Label_DataInfo.SetText(PlayerListServerInfo[Index]);
			}
			else
			{
				Frame_InfoList.Hide();
			}	
		}
		declare CMlFrame Frame_ServerInfo_Players <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfo_Players")   as CMlFrame);
		declare CMlLabel Label_ServerPlayers <=> (Frame_ServerInfo_Players.GetFirstChild("Label_ServerPlayers")	as CMlLabel);
		if(DataServerInfo.existskey("PlayerCount") && DataServerInfo.existskey("MaxPlayerCount"))
		{
			Label_ServerPlayers.SetText(DataServerInfo["PlayerCount"]^"/"^DataServerInfo["MaxPlayerCount"]);
		}
		else
		{
			Label_ServerPlayers.SetText("");
		}



		UpdateArrow("Players", G_PlayerPage, G_PlayerPageMax);
	}

	Void UpdateListMap()
	{
		declare Text[Text] DataServerInfo for Page;
		declare Text[] MapListServerInfo for Page;

		declare CMlFrame Frame_ServerInfoList_Maps <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfoList_Maps")   as CMlFrame);
		for(I, 0, {{{ServerInfo_Count_InstancesPlayerY-1}}})
		{
			declare CMlFrame Frame_InfoList <=> (Frame_ServerInfoList_Maps.GetFirstChild("Frame_InfoList"^I) as CMlFrame);
			declare Integer Index = {{{ServerInfo_Count_InstancesPlayerY}}}*G_MapPage + I;
			if(MapListServerInfo.existskey(Index))
			{
				Frame_InfoList.Show();
				declare CMlLabel Label_DataInfo <=> (Frame_InfoList.GetFirstChild("Label_DataInfo")	as CMlLabel);
				Label_DataInfo.SetText(MapListServerInfo[Index]);
			}
			else
			{
				Frame_InfoList.Hide();
			}	
		}
		declare CMlFrame Frame_ServerInfo_Maps <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfo_Maps")   as CMlFrame);
		declare CMlLabel Label_ServerMaps <=> (Frame_ServerInfo_Maps.GetFirstChild("Label_ServerMaps")	as CMlLabel);
		Label_ServerMaps.SetText(MapListServerInfo.count^"");
		
		UpdateArrow("Maps", G_MapPage, G_MapPageMax);
	}

	Void ShowJoinOrSpectate()
	{
		declare CMlFrame Frame_JoinOrSpectate <=> (Page.MainFrame.GetFirstChild("Frame_JoinOrSpectate") as CMlFrame);
		declare CMlFrame Frame_ServerPassword <=> (Page.MainFrame.GetFirstChild("Frame_ServerPassword") as CMlFrame);
		Frame_JoinOrSpectate.Show();
		Frame_ServerPassword.Hide();
		declare CMlEntry Entry_Password    <=> (Page.MainFrame.GetFirstChild("Entry_Password") as CMlEntry);
		Entry_Password.TextFormat = CMlEntry::ETextFormat::Password;

		EnableMenuNavigation(True,False,Null,3);
		G_IsServerPassword = True;
		G_IsServerInfo = False;

	}

	Void HideJoinOrSpectate()
	{
		declare CMlFrame Frame_JoinOrSpectate <=> (Page.MainFrame.GetFirstChild("Frame_JoinOrSpectate") as CMlFrame);
		Frame_JoinOrSpectate.Hide();
	}

	Void ShowServerPassword()
	{
		EnableMenuNavigation(True,False,Null,3);
		declare CMlFrame Frame_ServerPassword <=> (Page.MainFrame.GetFirstChild("Frame_ServerPassword") as CMlFrame);
		declare CMlFrame Frame_JoinOrSpectate <=> (Page.MainFrame.GetFirstChild("Frame_JoinOrSpectate") as CMlFrame);
		declare CMlLabel Label_PassTitle      <=> (Frame_ServerPassword.GetFirstChild("Label_PassTitle") as CMlLabel);

		if(!G_TryToSpectate)
		{
			Label_PassTitle.SetText("{{{_("Join")}}}");
		}
		else
		{
			Label_PassTitle.SetText("{{{_("Spectate")}}}");
		}

		Frame_ServerPassword.Show();
		Frame_JoinOrSpectate.Hide();

		declare CMlEntry Entry_Password    <=> (Page.MainFrame.GetFirstChild("Entry_Password") as CMlEntry);
		Entry_Password.SetText("", False);
		Entry_Password.TextFormat = CMlEntry::ETextFormat::Password;
		Entry_Password.StartEdition();
		G_IsServerPassword = True;
		G_IsServerInfo = False;
	}

	Void ShowServerInfo()
	{
		EnableMenuNavigation(True,False,Null,3);
		declare CMlFrame Frame_ServerInfo <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfo") as CMlFrame);
		declare CMlFrame Frame_ServerPassword <=> (Page.MainFrame.GetFirstChild("Frame_ServerPassword") as CMlFrame);
		Frame_ServerInfo.Show();
		Frame_ServerPassword.Hide();
		G_IsServerInfo = False;
		G_IsServerPassword = False;

		G_PlayerPage    = 0;
		G_MapPage       = 0;
		
		declare Text[Text] DataServerInfo for Page;
		declare Text[] PlayerListServerInfo for Page;
		declare Text[] MapListServerInfo for Page;
		G_PlayerPageMax = (PlayerListServerInfo.count-1)/{{{ServerInfo_Count_InstancesPlayerY}}};
		G_MapPageMax = (MapListServerInfo.count-1)/{{{ServerInfo_Count_InstancesPlayerY}}};
		declare CMlLabel Label_ServerName <=> (Page.MainFrame.GetFirstChild("Label_ServerName") as CMlLabel);
		declare CMlLabel Label_ServerComment <=> (Page.MainFrame.GetFirstChild("Label_ServerComment") as CMlLabel);
		if(DataServerInfo.existskey("ServerName")) Label_ServerName.SetText(DataServerInfo["ServerName"]);
		if(DataServerInfo.existskey("Comment"))    Label_ServerComment.SetText(DataServerInfo["Comment"]);
		declare CMlEntry Entry_Password    <=> (Page.MainFrame.GetFirstChild("Entry_Password") as CMlEntry);
		Entry_Password.TextFormat = CMlEntry::ETextFormat::Password;

		UpdateListPlayer();
		UpdateListMap();
	}
	
	Void ArrowPrevious(Text _ListId)
	{
		declare CMlFrame Frame_ServerInfo     <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfo_" ^ _ListId)   as CMlFrame);
		declare CMlQuad  MenuButtons_ZonePrev <=> (Frame_ServerInfo.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
		declare CMlQuad  MenuButtons_ZoneNext <=> (Frame_ServerInfo.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
		if(_ListId == "Players" && G_PlayerPage > 0)
		{
			G_PlayerPage -= 1;
			UpdateListPlayer();
		}
		else if(_ListId == "Maps" && G_MapPage > 0)
		{
			G_MapPage -= 1;
			UpdateListMap();
		}
	}
	
	Void ArrowNext(Text _ListId)
	{
		declare CMlFrame Frame_ServerInfo     <=> (Page.MainFrame.GetFirstChild("Frame_ServerInfo_" ^ _ListId)   as CMlFrame);
		declare CMlQuad  MenuButtons_ZonePrev <=> (Frame_ServerInfo.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
		declare CMlQuad  MenuButtons_ZoneNext <=> (Frame_ServerInfo.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
		if(_ListId == "Players" && G_PlayerPage < G_PlayerPageMax)
		{
			G_PlayerPage += 1;
			UpdateListPlayer();
		}
		else if(_ListId == "Maps" && G_MapPage < G_MapPageMax)
		{
			G_MapPage += 1;
			UpdateListMap();
		}

	}

	Void ListDisplayer_InfoServer_ServerJoin()
	{
		declare Boolean Page_IsServerPrivate for Page;
		if(!Page_IsServerPrivate)
		{
			declare Boolean IsSpectate = False;
			SendCustomEvent("InfoServer_JoinServer", [IsSpectate^""]);
		}
		else
		{
			G_TryToSpectate = False;
			ShowServerPassword();
		}
	}
	""";
	return MLText;
}

Text Inject_Init()
{
	return """
	DesignManialinks_Init();
	""";
}

Text Inject_While()
{
	declare Text MLText = """
		DesignManialinks_Loop();
			foreach(Event in PendingEvents) {
				switch(Event.Type) {

					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								if(G_IsServerInfo)
								{
									SendCustomEvent("GotoPrevious", [""]);
								}
								else if(G_IsServerPassword)
								{
									HideServerInfo();
									HideJoinOrSpectate();
								}
							}
							case CMlEvent::EMenuNavAction::Select : {
								ListDisplayer_InfoServer_ServerJoin();
							}
						}
					}
					case CMlEvent::Type::MouseClick: {
						if (Event.ControlId == "MenuButtons_ZonePrev")
						{
							declare EventIdSplit = ListDisplayer_InfoServer_TextLib::Split("_", Event.Control.Parent.Parent.ControlId);
							declare Text Split = EventIdSplit[EventIdSplit.count-1];
							ArrowPrevious(Split);
							//Split
						}
						else if (Event.ControlId == "MenuButtons_ZoneNext")
						{
							declare EventIdSplit = ListDisplayer_InfoServer_TextLib::Split("_", Event.Control.Parent.Parent.ControlId);
							declare Text Split = EventIdSplit[EventIdSplit.count-1];
							ArrowNext(Split);
						}
						else if (Event.ControlId == "InfoServer_Join")
						{
							ListDisplayer_InfoServer_ServerJoin();
						}
						else if (Event.ControlId == "InfoServer_Spectate")
						{
							declare Boolean Page_IsServerSpectPrivate for Page;
							if(!Page_IsServerSpectPrivate)
							{
								declare Boolean IsSpectate = True;
								SendCustomEvent("InfoServer_JoinServer", [IsSpectate^""]);
							}
							else
							{
								G_TryToSpectate = True;
								ShowServerPassword();

							}

						}
						else if (Event.ControlId == "BG_Password")
						{
							declare Boolean Page_IsServerSpectPrivate for Page;
							declare Boolean Page_IsServerPrivate for Page;
							if(Page_IsServerPrivate && Page_IsServerSpectPrivate)
							{
								HideServerInfo();
							}
							else
							{
								ShowServerInfo();
							}
						}
						else if (Event.ControlId == "BG_JoinOrSpectate")
						{
							HideJoinOrSpectate();
						}
						else if (Event.ControlId == "JoinOrSpect_Join")
						{
							G_TryToSpectate = False;
							ShowServerPassword();
						}
						else if (Event.ControlId == "JoinOrSpect_Spectate")
						{
							G_TryToSpectate = True;
							ShowServerPassword();
						}
					}
					case CMlEvent::Type::MouseOver: {
						if (Event.ControlId == "MenuButtons_ZonePrev")
						{
							declare Boolean IsActivate for Event.Control;
							if(IsActivate)
							{
								declare Quad <=> (Event.Control as CMlQuad);
								Quad.Opacity = 1.;
							}
						}
						else if (Event.ControlId == "MenuButtons_ZoneNext")
						{
							declare Boolean IsActivate for Event.Control;
							if(IsActivate)
							{
								declare Quad <=> (Event.Control as CMlQuad);
								Quad.Opacity = 1.;
							}
						}
					}
					case CMlEvent::Type::MouseOut: {
						if (Event.ControlId == "MenuButtons_ZonePrev")
						{
							declare Boolean IsActivate for Event.Control;
							if(IsActivate)
							{
								declare Quad <=> (Event.Control as CMlQuad);
								Quad.Opacity = 0.8;
							}
						}
						else if (Event.ControlId == "MenuButtons_ZoneNext")
						{
							declare Boolean IsActivate for Event.Control;
							if(IsActivate)
							{
								declare Quad <=> (Event.Control as CMlQuad);
								Quad.Opacity = 0.8;
							}
						}
					}
					case CMlEvent::Type::EntrySubmit: {
						if(Event.ControlId == "Entry_Password")
						{
							declare CMlEntry Entry_Password    <=> (Event.Control as CMlEntry);
							//HideServerInfo();
							//log("Entry_Password.Value: "^ Entry_Password.Value);
							SendCustomEvent("ListDisplayer_Password", [Entry_Password.Value, G_TryToSpectate^""]);

							//Private_ListDisplayer_SetTextFilter(Label_Search.Value);
							//Private_ListDisplayer_CheckSorts();
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {

						switch(Event.CustomEventType) {
							case "ShowServerInfo" : {
								ShowServerInfo();
							}
							case "ShowServerPassword" : {
								ShowServerPassword();
							}
							case "JoinOrSpectate" : {
								ShowJoinOrSpectate();
							}
							case "HideServerInfo" : {
								HideServerInfo();
							}
							case "Back" : {
								if(G_IsServerInfo)
								{
									SendCustomEvent("GotoPrevious", [""]);
								}
								else if(G_IsServerPassword)
								{
									HideServerInfo();
								}
							}
						}
					}
				}
			}
	""";
	return MLText;
}