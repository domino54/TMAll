// ATTENTION, UTILISE LibButton_Img

#Include "Libs/Nadeo/MP4/TPLagoon/LibButton_Img.Script.txt"			as LibButton_Img
#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"					as Logger
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"				as Font
#Include "TextLib"												as TextLib

#Include "Libs/Nadeo/MP4/Common/GlobalVariables.Script.txt"			as GlobalVariables

#Const C_Default_MainButtonLargeSize				<42.8, 13.>
#Const C_Default_MainButtonLargeQuadImageUrl		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/StartLogo.dds"
#Const C_Default_MainButtonLargeLabelSize			4.
#Const C_Default_MainButtonSmallSize				<38., 8.5>
#Const C_Default_MainButtonSmallQuadImageUrl		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/LogoPlaySmall.dds"
#Const C_Default_MainButtonSmallLabelSize			2.
#Const C_Default_SecondaryButtonLargeSize			<42.8, 13.>
#Const C_Default_SecondaryButtonLargeQuadImageUrl	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/AddLogo.dds"
#Const C_Default_SecondaryButtonLargeLabelSize		4.
#Const C_Default_SecondaryButtonSmallSize			<38., 8.5>
#Const C_Default_SecondaryButtonSmallQuadImageUrl	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/LogoPlaySmallSecondary.dds"
#Const C_Default_SecondaryButtonSmallLabelSize		2.
#Const C_Default_ScrollFrameContainerImageUrl		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Container_Scroll.dds"
#Const C_Default_ScrollFrameIconImageUrl			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_Scroll_v.dds"
#Const C_Default_ScrollTenFrameIconImageUrl			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_ScrollTen_v.dds"
#Const C_Default_ScrollLastFrameIconImageUrl			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_ScrollLast_v.dds"
#Const C_Default_FloatingButtonFrameContainerImageUrl	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Container_Refresh.dds"
#Const C_Default_FloatingButtonFrameIconImageUrl	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Icon_Refresh.dds"
#Const C_Default_ExpandingButtonFrameIconImageUrl	""
#Const C_Default_FloatingExpandingButtonFrameContainerImageUrl "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Container_Refresh.dds"
#Const C_Default_FloatingExpandingButtonFrameIconImageUrl "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Icon_Refresh.dds"
#Const C_Default_SearchEntrySize					<46.8, 7.02>
#Const C_Default_SearchEntryIconImageUrl			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Icon_Search.dds"

#Const C_LargeButtonEmptyContourUrl					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/EmptyContour.dds"
#Const C_SmallButtonEmptyContourUrl					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/EmptyContour2.dds"

#Const C_EmptyLogoUrl								"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/EmptyLogo.dds"

#Const C_Default_CancelImageUrl						"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCross.dds"
#Const C_Default_CancelImageUrlOver					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCrossOver.dds"

#Const C_HoverOpacity								0.3
#Const C_LabelMargin								3.
#Const C_Thickness									2.
#Const C_MaxNbExpandedButtons						13

declare Text[] G_Actions; // Sert pour la LibButton_Img afin d'afficher les images de touche correspondant aux manettes PS4/XBOne

declare Text G_ColorCode_ButtonOutline_Normal;
declare Text G_ColorCode_ButtonOutline_Dark;
declare Text G_ColorCode_ButtonOutline_Hover;
declare Text G_ColorCode_TextLabel_Normal;
declare Text G_ColorCode_TextLabel_Dark;
declare Text G_ColorCode_TextLabel_Hover;
declare Text G_ColorCode_Overall;
declare Text G_MainFont;
declare Text G_SubFont;

Vec2 GetSecondaryButtonLargeSize()
{
	return C_Default_SecondaryButtonLargeSize;
}

Text Includes() {
	return """	#Include "TextLib" as DesignManialinks_TextLib
	#Const C_DesignManialinks_MaxNbExpandedButtons {{{C_MaxNbExpandedButtons}}}
""";
}

Void Load()
{
	declare Text[Integer] Array_ColorCode_ButtonOutline_Normal	= [GlobalVariables::LaunchContext_Maker() => "D6E9F7",
				GlobalVariables::LaunchContext_MakerSM() => "D6E9F7",	GlobalVariables::LaunchContext_Title() => "FFF"];
	declare Text[Integer] Array_ColorCode_ButtonOutline_Dark	= [GlobalVariables::LaunchContext_Maker() => "809297",
				GlobalVariables::LaunchContext_MakerSM() => "809297",	GlobalVariables::LaunchContext_Title() => "667"];
	declare Text[Integer] Array_ColorCode_ButtonOutline_Hover	= [GlobalVariables::LaunchContext_Maker() => "8699A9",
				GlobalVariables::LaunchContext_MakerSM() => "8699A9",	GlobalVariables::LaunchContext_Title() => "999"];
	declare Text[Integer] Array_ColorCode_TextLabel_Normal		= [GlobalVariables::LaunchContext_Maker() => "D6E9F7",
				GlobalVariables::LaunchContext_MakerSM() => "D6E9F7",	GlobalVariables::LaunchContext_Title() => "FFF"];
	declare Text[Integer] Array_ColorCode_TextLabel_Dark		= [GlobalVariables::LaunchContext_Maker() => "585F61",
				GlobalVariables::LaunchContext_MakerSM() => "585F61",	GlobalVariables::LaunchContext_Title() => "000"];
	declare Text[Integer] Array_ColorCode_TextLabel_Hover		= [GlobalVariables::LaunchContext_Maker() => "999",
				GlobalVariables::LaunchContext_MakerSM() => "999",		GlobalVariables::LaunchContext_Title() => "4DB3FF"];
	declare Text[Integer] Array_ColorCode_Overall				= [GlobalVariables::LaunchContext_Maker() => "4A5861",
				GlobalVariables::LaunchContext_MakerSM() => "4A5861",	GlobalVariables::LaunchContext_Title() => "000"];
	G_ColorCode_ButtonOutline_Normal	= Array_ColorCode_ButtonOutline_Normal	[GlobalVariables::GetLaunchContext()];
	G_ColorCode_ButtonOutline_Dark		= Array_ColorCode_ButtonOutline_Dark	[GlobalVariables::GetLaunchContext()];
	G_ColorCode_ButtonOutline_Hover		= Array_ColorCode_ButtonOutline_Hover	[GlobalVariables::GetLaunchContext()];
	G_ColorCode_TextLabel_Normal		= Array_ColorCode_TextLabel_Normal		[GlobalVariables::GetLaunchContext()];
	G_ColorCode_TextLabel_Dark			= Array_ColorCode_TextLabel_Dark		[GlobalVariables::GetLaunchContext()];
	G_ColorCode_TextLabel_Hover			= Array_ColorCode_TextLabel_Hover		[GlobalVariables::GetLaunchContext()];
	G_ColorCode_Overall					= Array_ColorCode_Overall				[GlobalVariables::GetLaunchContext()];
	G_MainFont				= Font::GetFontName("Main");
	G_SubFont				= Font::GetFontName("SubTitle");
}

Void Init() {
	G_Actions.clear();
}

Text GetColorCode_ButtonOutline_Normal() {
	return G_ColorCode_ButtonOutline_Normal;
}

Text GetColorCode_ButtonOutline_Dark() {
	return G_ColorCode_ButtonOutline_Dark;
}

Text GetColorCode_ButtonOutline_Hover() {
	return G_ColorCode_ButtonOutline_Hover;
}

Text GetColorCode_TextLabel_Normal() {
	return G_ColorCode_TextLabel_Normal;
}

Text GetColorCode_TextLabel_Dark() {
	return G_ColorCode_TextLabel_Dark;
}

Text GetColorCode_TextLabel_Hover() {
	return G_ColorCode_TextLabel_Hover;
}

Text GetColorCode_Overall() {
	return G_ColorCode_Overall;
}

Void AddAction(Text _ActionName) {
	if (G_Actions.exists(_ActionName)) {
		Logger::Warn(_ActionName ^ " ajout√© deux fois dans le manialink, conflit potentiel avec LibButton_Img");
	}
	G_Actions.add(_ActionName);
}

// ATTENTION : CONTIENT UN BOUTON SELECT A NE PAS DUPLIQUER DANS LA LAYER
Text ManialinkMainButton(Vec2 _Position, Vec2 _Size, Real _LabelSize, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	AddAction("Button_Select");

	declare Real MiniThickness	= 1.;
	declare Real ThinThickness	= MiniThickness / 2.;
	declare Real ExtraWidth		= _Size.Y * 0.1;

	declare Real SizeX			= _Size.X;
	declare Real SizeY			= _Size.Y;
	declare Real OverQuadSizeX	= SizeX + 2. * ExtraWidth;
	declare Real OverQuadSizeY	= SizeY + 2. * ExtraWidth;
	declare Real ImageSize		= SizeY - ThinThickness;
	declare Real TruncatedSizeX	= SizeX - ThinThickness;
	declare Real LabelQuadSizeX	= SizeX - SizeY + ThinThickness;
	declare Real LabelSizeX		= SizeX - C_LabelMargin - ImageSize;
	declare Real LabelPosX		= (LabelSizeX + C_LabelMargin) / 2. + ImageSize - ThinThickness;
	declare Real BigImageSize	= SizeY - MiniThickness;

	declare Text ExtraLabelContent;
	declare Boolean HasNoLogo = _QuadImageUrl == "" || _QuadImageUrl == C_LargeButtonEmptyContourUrl
		 || _QuadImageUrl == C_SmallButtonEmptyContourUrl || _QuadImageUrl == C_EmptyLogoUrl;
	if (HasNoLogo) {
		ExtraLabelContent = "halign=\"center\"";
		LabelSizeX = SizeX - 2 * MiniThickness;
		LabelPosX = LabelSizeX / 2. + MiniThickness * 1.25;
	} else if (_LabelSize <= C_Default_MainButtonSmallLabelSize + 0.1) {
		ExtraLabelContent = "halign=\"right\"";
		LabelPosX += LabelSizeX / 2.;
	} else {
		ExtraLabelContent = "halign=\"center\"";
	}
	return """	<frame id="{{{_EventControlId}}}_Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<quad	id="{{{_EventControlId}}}" size="{{{SizeX}}} {{{SizeY}}}" class="MainButton" scriptevents="1"/>
		<quad	id="{{{_EventControlId}}}_OverQuad" size="{{{OverQuadSizeX}}} {{{OverQuadSizeY}}}" pos="{{{-ExtraWidth}}} {{{ExtraWidth}}}" z-index="3" bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}" opacity="0.3" hidden="1"/>
		<frame	id="Outline_{{{_EventControlId}}}">
			<quad size="{{{ThinThickness}}} {{{SizeY}}}"														bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{ThinThickness}}}"	pos="{{{ThinThickness}}} 0"					bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{BigImageSize}}} {{{ThinThickness}}}"		pos="{{{ThinThickness}}} {{{- ImageSize}}}"	bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{LabelQuadSizeX}}} {{{ImageSize}}}"		pos="{{{ImageSize}}} {{{- ThinThickness}}}"	bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
		</frame>
		<label id="{{{_EventControlId}}}_Label" {{{ExtraLabelContent}}} valign="center"		pos="{{{LabelPosX}}} {{{- BigImageSize / 2.}}}" z-index="2" size="{{{LabelSizeX}}} {{{ImageSize}}}"
			textfont="{{{G_SubFont}}}" textprefix="$t" text="{{{_LabelText}}}" textsize="{{{_LabelSize}}}" textcolor="444"/>
		<frame hidden="{{{HasNoLogo}}}" z-index="2">
			<quad id="Button_Select"					valign="center" size="{{{BigImageSize}}} {{{BigImageSize}}}" pos="0.5 {{{- SizeY / 2.}}}" keepratio="Fit"/>
		</frame>
		<quad id="Quad_Base_{{{_EventControlId}}}" 	valign="center" size="{{{BigImageSize}}} {{{BigImageSize}}}" pos="0.5 {{{- SizeY / 2.}}}" 
			z-index="1" keepratio="Fit" modulatecolor="{{{G_ColorCode_ButtonOutline_Normal}}}" image="{{{_QuadImageUrl}}}" bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
	</frame>
""";
}

Text ManialinkMainButtonLarge(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkMainButton(_Position, _Size, C_Default_MainButtonLargeLabelSize, _LabelText, _QuadImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkMainButtonLarge(Vec2 _Position, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkMainButtonLarge(_Position, C_Default_MainButtonLargeSize, _LabelText, _QuadImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkMainButtonLarge(Vec2 _Position, Text _LabelText, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkMainButtonLarge(_Position, _LabelText, C_Default_MainButtonLargeQuadImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkMainButtonSmall(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkMainButton(_Position, _Size, C_Default_MainButtonSmallLabelSize, _LabelText, _QuadImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkMainButtonSmall(Vec2 _Position, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkMainButtonSmall(_Position, C_Default_MainButtonSmallSize, _LabelText, _QuadImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkMainButtonSmall(Vec2 _Position, Text _LabelText, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkMainButtonSmall(_Position, _LabelText, C_Default_MainButtonSmallQuadImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkSecondaryButton(Vec2 _Position, Vec2 _Size, Real _LabelSize, Text _OutlineColor, Text _LabelText, Text _QuadImageUrl, Text _ContourImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	if (_ActionName != "") {
		AddAction("Button_" ^ _ActionName);
	}

	declare Real MiniThickness	= 1.;
	declare Real LineThickness	= 0.45;
	declare Real DoubleThickness = 2. * LineThickness;
	declare Real ThinThickness	= MiniThickness / 2.;

	declare Real SizeX			= _Size.X;
	declare Real SizeY			= _Size.Y;
	declare Real ImageSize		= SizeY - DoubleThickness;
	declare Real TruncatedSizeX	= SizeX - LineThickness;
	declare Real LabelQuadSizeX	= SizeX - SizeY - DoubleThickness + ThinThickness;
	declare Real LabelSizeX		= SizeX - C_LabelMargin - ImageSize;
	declare Real LabelPosX		= (LabelSizeX + C_LabelMargin) / 2. + ImageSize;
	declare Real RightBorderY	= SizeY - LineThickness;
	declare Real BigImageSize	= SizeY - ThinThickness;
	declare Text ExtraLabelContent;
	declare Boolean HasNoLogo = _QuadImageUrl == "" || _QuadImageUrl == C_LargeButtonEmptyContourUrl
		 || _QuadImageUrl == C_SmallButtonEmptyContourUrl || _QuadImageUrl == C_EmptyLogoUrl;
	if (HasNoLogo) {
		ExtraLabelContent = "halign=\"center\"";
		LabelSizeX = SizeX - 2 * MiniThickness;
		LabelPosX = LabelSizeX / 2. + MiniThickness * 1.25;
	} else if (_LabelSize <= C_Default_MainButtonSmallLabelSize + 0.1) {
		ExtraLabelContent = "halign=\"right\"";
		LabelPosX += LabelSizeX / 2.;
	} else {
		ExtraLabelContent = "halign=\"center\"";
	}
	declare ColorOutline = G_ColorCode_ButtonOutline_Normal;
	if (_OutlineColor != "") {
		ColorOutline = _OutlineColor;
	}
	return """	<frame id="{{{_EventControlId}}}_Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<quad id="{{{_EventControlId}}}" size="{{{SizeX}}} {{{SizeY}}}" class="SecondaryButton" scriptevents="1"/>
		<frame id="Outline_{{{_EventControlId}}}">
			<quad size="{{{LineThickness}}} {{{SizeY}}}"																bgcolor="{{{ColorOutline}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} 0"							bgcolor="{{{ColorOutline}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} {{{- RightBorderY}}}"		bgcolor="{{{ColorOutline}}}"/>
			<quad size="{{{LineThickness}}} {{{ImageSize}}}"		pos="{{{TruncatedSizeX}}} {{{- LineThickness}}}"	bgcolor="{{{ColorOutline}}}"/>
		</frame>
		<label id="{{{_EventControlId}}}_Label" {{{ExtraLabelContent}}} valign="center" pos="{{{LabelPosX}}} {{{- BigImageSize / 2.}}}"
			z-index="2" size="{{{LabelSizeX}}} {{{ImageSize}}}"  textprefix="$t" textfont="{{{G_SubFont}}}" text="{{{_LabelText}}}" textsize="{{{_LabelSize}}}" textcolor="{{{ColorOutline}}}"/>
		<frame hidden="{{{HasNoLogo}}}" z-index="2">
			<quad id="Button_{{{_ActionName}}}" valign="center" size="{{{BigImageSize}}} {{{BigImageSize}}}" pos="{{{LineThickness}}} {{{- SizeY / 2.}}}" keepratio="Fit"/>
		</frame>
		<frame id="Frame_Contour_{{{_EventControlId}}}" hidden="1">
			<quad id="Quad_Contour_{{{_EventControlId}}}" valign="center" size="{{{BigImageSize}}} {{{BigImageSize}}}" pos="{{{LineThickness}}} {{{- SizeY / 2.}}}" z-index="1" 
				opacity="{{{C_HoverOpacity}}}" keepratio="Fit" modulatecolor="{{{ColorOutline}}}" image="{{{_ContourImageUrl}}}" bgcolor="{{{ColorOutline}}}"/>
			<quad id="Right_Contour_{{{_EventControlId}}}" halign="right" size="{{{LabelQuadSizeX}}} {{{ImageSize}}}"		pos="{{{TruncatedSizeX}}} {{{- LineThickness}}}" opacity="{{{C_HoverOpacity}}}"	bgcolor="{{{ColorOutline}}}"/>
		</frame>
		<quad id="Quad_Base_{{{_EventControlId}}}" valign="center" size="{{{BigImageSize}}} {{{BigImageSize}}}" pos="{{{LineThickness}}} {{{- SizeY / 2.}}}" z-index="1" 
			opacity="1.0" keepratio="Fit" modulatecolor="{{{ColorOutline}}}" image="{{{_QuadImageUrl}}}"/>
	</frame>
""";
}

Text ManialinkSecondaryButton(Vec2 _Position, Vec2 _Size, Real _LabelSize, Text _LabelText, Text _QuadImageUrl, Text _ContourImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButton(_Position, _Size, _LabelSize, "", _LabelText, _QuadImageUrl, _ContourImageUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkFloatingSecondaryButtonLarge(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButton(_Position, _Size, C_Default_SecondaryButtonLargeLabelSize, "FFF", _LabelText, _QuadImageUrl, C_LargeButtonEmptyContourUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkSecondaryButtonLarge(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButton(_Position, _Size, C_Default_SecondaryButtonLargeLabelSize, _LabelText, _QuadImageUrl, C_LargeButtonEmptyContourUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkSecondaryButtonLarge(Vec2 _Position, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButtonLarge(_Position, C_Default_SecondaryButtonLargeSize, _LabelText, _QuadImageUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkSecondaryButtonLarge(Vec2 _Position, Text _LabelText, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButtonLarge(_Position, _LabelText, C_Default_SecondaryButtonLargeQuadImageUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkSecondaryButtonSmall(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButton(_Position, _Size, C_Default_SecondaryButtonSmallLabelSize, _LabelText, _QuadImageUrl, C_SmallButtonEmptyContourUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkSecondaryButtonSmall(Vec2 _Position, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButtonSmall(_Position, C_Default_SecondaryButtonSmallSize, _LabelText, _QuadImageUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkSecondaryButtonSmall(Vec2 _Position, Text _LabelText, Text _FrameAttributes, Text _ActionName, Text _EventControlId)
{
	return ManialinkSecondaryButtonSmall(_Position, _LabelText, C_Default_SecondaryButtonSmallQuadImageUrl, _FrameAttributes, _ActionName, _EventControlId);
}

Text ManialinkScrollFrame(Vec2 _Position, Text _ScrollImageUrl, Text _ScrollTenImageUrl, Text _ScrollLastImageUrl, Real _ButtonHeight, Text _FrameAttributes, Text _EventControlId)
{
	return """	<frame id="{{{_EventControlId}}}_Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}} hidden="1">
		<quad	id="{{{_EventControlId}}}_ScrollL"		halign="center" valign="bottom" pos="-12. {{{- _ButtonHeight / 2. + (_ButtonHeight - 9.6) / 2.5}}}"	z-index="2"	size="5.63 {{{_ButtonHeight}}}" opacity="0.6" colorize="fff" image="{{{_ScrollImageUrl}}}" keepratio="Fit" class="ScrollFrame" scriptevents="1" />
		<quad	id="{{{_EventControlId}}}_ScrollLTen"	halign="center" valign="bottom" pos="-20. {{{- _ButtonHeight / 2. + (_ButtonHeight - 9.6) / 2.5}}}"	z-index="2"	size="5.63 {{{_ButtonHeight}}}" opacity="0.6" colorize="fff" image="{{{_ScrollTenImageUrl}}}" keepratio="Fit" class="ScrollFrame" scriptevents="1" hidden="1" />
		<quad	id="{{{_EventControlId}}}_ScrollLFirst"	halign="center" valign="bottom" pos="-28. {{{- _ButtonHeight / 2. + (_ButtonHeight - 9.6) / 2.5}}}"	z-index="2"	size="5.63 {{{_ButtonHeight}}}" opacity="0.6" colorize="fff" image="{{{_ScrollLastImageUrl}}}" keepratio="Fit" class="ScrollFrame" scriptevents="1" hidden="1" />
		<quad	id="{{{_EventControlId}}}_ScrollR"		halign="center" valign="bottom" pos="12.4 {{{_ButtonHeight / 2. + (_ButtonHeight - 9.6) / 2.5}}}"		z-index="2"	size="5.63 {{{_ButtonHeight}}}" opacity="0.6" colorize="fff" image="{{{_ScrollImageUrl}}}" keepratio="Fit" class="ScrollFrame" scriptevents="1" rot="180"/>
		<quad	id="{{{_EventControlId}}}_ScrollRTen"	halign="center" valign="bottom" pos="20. {{{_ButtonHeight / 2. + (_ButtonHeight - 9.6) / 2.5}}}"		z-index="2"	size="5.63 {{{_ButtonHeight}}}" opacity="0.6" colorize="fff" image="{{{_ScrollTenImageUrl}}}" keepratio="Fit" class="ScrollFrame" scriptevents="1" hidden="1" rot="180"/>
		<quad	id="{{{_EventControlId}}}_ScrollRLast"	halign="center" valign="bottom" pos="28. {{{_ButtonHeight / 2. + (_ButtonHeight - 9.6) / 2.5}}}"		z-index="2"	size="5.63 {{{_ButtonHeight}}}" opacity="0.6" colorize="fff" image="{{{_ScrollLastImageUrl}}}" keepratio="Fit" class="ScrollFrame" scriptevents="1" hidden="1" rot="180"/>
		<label	id="{{{_EventControlId}}}"			halign="center" valign="center" text="1/XXX" scriptevents="1" pos="0 {{{(_ButtonHeight - 9.6) / 2.5}}}" z-index="2" textsize="2" textcolor="fff" opacity="1."/>
		<quad	halign="center" valign="center" pos="0.2 -6.5" z-index="2" size="30.8 6.5" opacity="1." image="{{{C_Default_ScrollFrameContainerImageUrl}}}" keepratio="Fit"/>
	</frame>
""";
}

Text ManialinkScrollFrame(Vec2 _Position, Text _ScrollImageUrl, Text _ScrollTenImageUrl, Text _ScrollLastImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkScrollFrame(_Position, _ScrollImageUrl, _ScrollTenImageUrl, _ScrollLastImageUrl, 9.6, _FrameAttributes, _EventControlId);
}


Text ManialinkScrollFrame(Vec2 _Position, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkScrollFrame(_Position, C_Default_ScrollFrameIconImageUrl, C_Default_ScrollTenFrameIconImageUrl, C_Default_ScrollLastFrameIconImageUrl, 9.6, _FrameAttributes, _EventControlId);
}

Text ManialinkFloatingButtonFrame(Vec2 _Position, Text _LabelText, Text _FloatingButtonImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return """	<frame id="{{{_EventControlId}}}_Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<quad	halign="center" valign="center" pos="10.7 0" z-index="1" size="4.0 4.0"	opacity="1." image="{{{_FloatingButtonImageUrl}}}" keepratio="Fit"/>
		<quad	id="{{{_EventControlId}}}" halign="center" valign="center" pos="0. 0" size="29.0 7.0" opacity="0.7" bgcolor="111" class="FloatingButtonFrame" scriptevents="1"/>
		<label	id="{{{_EventControlId}}}_Label" halign="left" textfont="{{{G_SubFont}}}" text="{{{_LabelText}}}" pos="-10.5 1.1" z-index="1" textprefix="$t" textsize="1."/>
		<quad	halign="center" valign="center" pos="0. 0" z-index="2" size="29.0 7.0"	opacity="1." image="{{{C_Default_FloatingButtonFrameContainerImageUrl}}}" keepratio="Fit"/>
	</frame>
""";
}

Text ManialinkFloatingButtonFrame(Vec2 _Position, Text _LabelText, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkFloatingButtonFrame(_Position, _LabelText, "", _FrameAttributes, _EventControlId);
}

Text ManialinkFloatingExpandingButtonFrame(Vec2 _Position, Text _LabelText, Text _FloatingExpandingButtonImageUrl, Text _FrameAttributes, Text[] _ButtonNames, Text _EventControlId)
{
	return """	<frame id="{{{_EventControlId}}}_Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<quad	halign="center" valign="center" pos="10.7 0" z-index="1" size="4.0 4.0"	opacity="1." image="{{{_FloatingExpandingButtonImageUrl}}}" keepratio="Fit"/>
		<quad	id="{{{_EventControlId}}}" halign="center" valign="center" pos="0. 0" size="29.0 7.0" opacity="0.7" bgcolor="111" class="FloatingExpandingButtonFrame" scriptevents="1"/>
		<label	id="{{{_EventControlId}}}_Label" halign="left" textfont="{{{G_SubFont}}}" text="{{{_LabelText}}}" pos="-10.5 1.1" z-index="1" textprefix="$t" textsize="1."/>
		<quad	halign="center" valign="center" pos="0. 0" z-index="2" size="29.0 7.0"	opacity="1." image="{{{C_Default_FloatingExpandingButtonFrameContainerImageUrl}}}" keepratio="Fit"/>
	</frame>
""";
}

Text ManialinkFloatingExpandingButtonFrame(Vec2 _Position, Text _LabelText, Text _FrameAttributes, Text[] _ButtonNames, Text _EventControlId)
{
	return ManialinkFloatingExpandingButtonFrame(_Position, _LabelText, "", _FrameAttributes, _ButtonNames, _EventControlId);
}

Text ManialinkQuadEntry(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _CancelImageUrl, Text _CancelOverImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	declare Real LineThickness	= 0.25;
	declare Real DoubleThickness = 2. * LineThickness;

	declare Real SizeX			= _Size.X;
	declare Real SizeY			= _Size.Y;
	declare Real ImageSize		= SizeY - DoubleThickness;
	declare Real TruncatedSizeX	= SizeX - LineThickness;
	declare Real LabelQuadSizeX	= SizeX - SizeY + C_Thickness;
	declare Real RightBorderY	= SizeY - LineThickness;

	declare Real LittleMove		= 0.;
	if (_QuadImageUrl == "") {
		LittleMove = 4.4;
	}

	declare Vec2 EntrySize		= <SizeX - 13. + LittleMove - DoubleThickness * 2., SizeY - DoubleThickness * 4.>;
	declare Vec2 EntryPos		= <- SizeX / 2. + DoubleThickness * 2., 0.>;
	declare Vec2 CancelPos		= <SizeX / 2. - 9. + LittleMove, 0.>;

	return """	<frame pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<frame pos="{{{- SizeX / 2.}}} {{{SizeY / 2.}}}">
			<quad size="{{{LineThickness}}} {{{SizeY}}}"																bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} 0"							bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} {{{- RightBorderY}}}"		bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{LineThickness}}} {{{ImageSize}}}"		pos="{{{TruncatedSizeX}}} {{{- LineThickness}}}"	bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{SizeX}}} {{{SizeY}}}"														opacity="0.2"	bgcolor="000"/>
		</frame>
		<quad	halign="center" valign="center" pos="{{{SizeX / 2. - 3.6}}} 0" z-index="1" size="4.4 4.4" opacity="1." image="{{{_QuadImageUrl}}}" keepratio="Fit"/>
		<entry	id="{{{_EventControlId}}}"		halign="left" valign="center" size="{{{EntrySize.X}}} {{{EntrySize.Y}}}" pos="{{{EntryPos.X}}} {{{EntryPos.Y}}}" textfont="{{{G_SubFont}}}" default="{{{_LabelText}}}" z-index="1" textsize="1." scriptevents="1" class="EntryEntry"/>
		<quad	id="{{{_EventControlId}}}_EntryCancel"		halign="center" valign="center" pos="{{{CancelPos.X}}} {{{CancelPos.Y}}}" z-index="2" size="4 4" opacity="1."	image="{{{_CancelImageUrl}}}" imagefocus="{{{_CancelOverImageUrl}}}" keepratio="Fit" scriptevents="1" class="QuadEntryCancel" hidden="1"/>
		<quad	id="{{{_EventControlId}}}_FakeEntryCancel"	halign="center" valign="center" pos="{{{CancelPos.X}}} {{{CancelPos.Y}}}" z-index="2" size="4 4" opacity="0.3"	image="{{{_CancelImageUrl}}}" keepratio="Fit"/>
	</frame>
""";
}

Text ManialinkQuadEntry(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkQuadEntry(_Position, _Size, _LabelText, _QuadImageUrl,
		C_Default_CancelImageUrl, C_Default_CancelImageUrlOver, _FrameAttributes, _EventControlId);
}

Text ManialinkSearchEntry(Vec2 _Position, Text _FrameAttributes, Text _EventControlId)
{
	return ManialinkQuadEntry(_Position, C_Default_SearchEntrySize, "", C_Default_SearchEntryIconImageUrl, _FrameAttributes, _EventControlId);
}

Text ManialinkTextEdit(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _QuadImageUrl, Text _CancelImageUrl, Text _FrameAttributes, Text _EventControlId)
{
	declare Real LineThickness	= 0.25;
	declare Real DoubleThickness = 2. * LineThickness;

	declare Real SizeX			= _Size.X;
	declare Real SizeY			= _Size.Y;
	declare Real ImageSize		= SizeY - DoubleThickness;
	declare Real TruncatedSizeX	= SizeX - LineThickness;
	declare Real LabelQuadSizeX	= SizeX - SizeY + C_Thickness;
	declare Real RightBorderY	= SizeY - LineThickness;

	return """	<frame pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<frame pos="{{{- SizeX / 2.}}} {{{SizeY / 2.}}}">
			<quad size="{{{LineThickness}}} {{{SizeY}}}"																bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} 0"							bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} {{{- RightBorderY}}}"		bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{LineThickness}}} {{{ImageSize}}}"		pos="{{{TruncatedSizeX}}} {{{- LineThickness}}}"	bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{SizeX}}} {{{SizeY}}}"														opacity="0.2"	bgcolor="000"/>
		</frame>
		<quad	halign="left" valign="center" pos="18.7 0" z-index="1" size="4.4 4.4" opacity="1." image="{{{_QuadImageUrl}}}" keepratio="Fit"/>
		<textedit	id="{{{_EventControlId}}}_TextEdit"		halign="left" valign="center" size="{{{SizeX - 2.}}} {{{SizeY}}}" pos="{{{- SizeX / 2. + 1.}}} 0" textfont="{{{G_SubFont}}}" default="{{{_LabelText}}}" z-index="1" textsize="1." scriptevents="1" class="EntryTextEdit"/>
		<quad	id="{{{_EventControlId}}}_TextEditCancel"	halign="center" valign="center" pos="13.5 0" z-index="2" size="4 4" opacity="1." bgcolor="900" image="{{{_CancelImageUrl}}}" keepratio="Fit" scriptevents="1" class="QuadTextEditCancel" hidden="1"/>
	</frame>
""";
}

Text AllExpandedButtons(Text _EventControlId, Vec2 _Size)
{
	declare Text Result;
	for (ButtonIndex, 0,  C_MaxNbExpandedButtons - 1) {
		Result ^= """			<frame id="{{{_EventControlId}}}_ExpandedButtonFrame-{{{ButtonIndex}}}" pos="0 {{{- ButtonIndex * _Size.Y}}}">
				<label id="{{{_EventControlId}}}_ExpandedButtonLabel" halign="left" valign="center" size="{{{_Size.X - 11.6}}} 0" pos="{{{- _Size.X / 2. + 3.}}} 0" textfont="{{{G_SubFont}}}" textsize="1"/>
				<entry id="{{{_EventControlId}}}_ExpandedButtonEntry" halign="left" valign="center" size="{{{_Size.X - 11.6}}} 0" pos="{{{- _Size.X / 2. + 3.}}} 0" z-index="-2" hidden="1"/>
				<quad id="{{{_EventControlId}}}_ExpandedButtonQuad" halign="center" valign="center" size="{{{_Size.X}}} {{{_Size.Y}}}" z-index="-1" bgcolor="000" opacity="0.6" class="ExpandedButton" scriptevents="1"/>
			</frame>
""";
	}
	return Result;
}

Text ManialinkExpandingButtonFrame(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _ExpandingButtonImageUrl, Text _FrameAttributes, Text[] _ButtonNames, Text _EventControlId)
{
	declare Real LineThickness	= 0.25;
	declare Real DoubleThickness = 2. * LineThickness;

	declare Real SizeX			= _Size.X;
	declare Real SizeY			= _Size.Y;
	declare Real ImageSize		= SizeY - DoubleThickness;
	declare Real TruncatedSizeX	= SizeX - LineThickness;
	declare Real LabelQuadSizeX	= SizeX - SizeY + C_Thickness;
	declare Real RightBorderY	= SizeY - LineThickness;

	return """	<frame id="{{{_EventControlId}}}_Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" {{{_FrameAttributes}}}>
		<quad id="{{{_EventControlId}}}" halign="center" valign="center" size="{{{_Size.X}}} {{{_Size.Y}}}" z-index="1" scriptevents="1" class="ExpandingButtonTrigger"/>
		<frame pos="{{{- SizeX / 2.}}} {{{SizeY / 2.}}}">
			<quad size="{{{LineThickness}}} {{{SizeY}}}"																bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} 0"							bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{TruncatedSizeX}}} {{{LineThickness}}}"	pos="{{{LineThickness}}} {{{- RightBorderY}}}"		bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{LineThickness}}} {{{ImageSize}}}"		pos="{{{TruncatedSizeX}}} {{{- LineThickness}}}"	bgcolor="{{{G_ColorCode_ButtonOutline_Normal}}}"/>
			<quad size="{{{SizeX}}} {{{SizeY}}}"														opacity="0.2"	bgcolor="000"/>
		</frame>
		<frame id="{{{_EventControlId}}}_ExpandedButtonsFrame" pos="0 {{{- _Size.Y}}}" hidden="1">
{{{AllExpandedButtons(_EventControlId, _Size)}}}
		</frame>
		<label id="{{{_EventControlId}}}_LabelResult" halign="left" valign="center" size="{{{_Size.X - 11.6}}} 0" pos="{{{- _Size.X / 2. + 3.}}} 0" textfont="{{{G_SubFont}}}" textsize="1"/>
{{{ManialinkQuadEntry(<0., 0.>, _Size, "", _ExpandingButtonImageUrl, "z-index=\"-2\" hidden=\"1\"", _EventControlId ^ "_ExpandingButtonQuadEntry")}}}
	</frame>
""";
}

Text ManialinkExpandingButtonFrame(Vec2 _Position, Vec2 _Size, Text _LabelText, Text _FrameAttributes, Text[] _ButtonNames, Text _EventControlId)
{
	return ManialinkExpandingButtonFrame(_Position, _Size, _LabelText, C_Default_ExpandingButtonFrameIconImageUrl, _FrameAttributes, _ButtonNames, _EventControlId);
}

Text Declares() {
	return """{{{LibButton_Img::IncludeInDeclare()}}}

	Void DesignManialinks_MainButton_ChangeOpacity(CMlControl _EventControl, Real _Opacity) {
		declare EventControlId = _EventControl.ControlId;
		declare Outline_MainAction <=> (_EventControl.Parent.GetFirstChild("Outline_" ^ EventControlId) as CMlFrame);
		foreach(Control in Outline_MainAction.Controls)
		{
			declare Quad <=> (Control as CMlQuad);
			Quad.Opacity = _Opacity;
		}
		declare Button_Select_Base <=> (_EventControl.Parent.GetFirstChild("Quad_Base_" ^ EventControlId) as CMlQuad);
		Button_Select_Base.Opacity = _Opacity;
	}

	Void DesignManialinks_MainButton_MouseOver(CMlControl _EventControl) {
		declare EventControlId = _EventControl.ControlId;
		declare OverQuad <=> _EventControl.Parent.GetFirstChild(EventControlId ^ "_OverQuad");
		OverQuad.Show();
	}

	Void DesignManialinks_MainButton_MouseOut(CMlControl _EventControl) {
		declare EventControlId = _EventControl.ControlId;
		declare OverQuad <=> _EventControl.Parent.GetFirstChild(EventControlId ^ "_OverQuad");
		OverQuad.Hide();
	}

	Void DesignManialinks_MainButton_Deactivate(Text _ControlId) {
		declare CMlControl Control = Page.GetFirstChild(_ControlId);
		DesignManialinks_MainButton_ChangeOpacity(Control, 0.6); // TODO : Mettre en const
		Control.Hide();
		(Page.GetFirstChild("Button_Select") as CMlQuad).Opacity = 0.;
	}

	Void DesignManialinks_MainButton_Activate(Text _ControlId) {
		declare CMlControl Control = Page.GetFirstChild(_ControlId);
		DesignManialinks_MainButton_ChangeOpacity(Control, 1.);
		Control.Show();
		(Page.GetFirstChild("Button_Select") as CMlQuad).Opacity = 1.;
	}

	Void DesignManialinks_SecondaryButton_SetContourFrameVisibility(CMlControl _EventControl, Boolean _IsVisible) {
		declare EventControlId = _EventControl.ControlId;
		declare Frame_Contour <=> (_EventControl.Parent.GetFirstChild("Frame_Contour_" ^ EventControlId) as CMlFrame);
		Frame_Contour.Visible = _IsVisible;
		declare MainQuad <=> (_EventControl.Parent.GetFirstChild("Quad_Base_" ^ EventControlId) as CMlQuad);
		if (MainQuad.ImageUrl == {{{dump(C_EmptyLogoUrl)}}}) {
			declare Quad_Contour <=> (Frame_Contour.GetFirstChild("Quad_Contour_" ^ EventControlId) as CMlQuad);
			Quad_Contour.ChangeImageUrl("");
		}
	}

	Void DesignManialinks_SecondaryButton_ChangeOpacity(CMlControl _EventControl, Real _Opacity) {
		declare EventControlId = _EventControl.ControlId;
		DesignManialinks_MainButton_ChangeOpacity(_EventControl, _Opacity);
		declare Label_Base <=> (_EventControl.Parent.GetFirstChild(EventControlId ^ "_Label") as CMlLabel);
		Label_Base.Opacity = _Opacity;
	}

	Void DesignManialinks_SecondaryButton_MouseOver(CMlControl _EventControl) {
		DesignManialinks_SecondaryButton_SetContourFrameVisibility(_EventControl, True);
	}

	Void DesignManialinks_SecondaryButton_MouseOut(CMlControl _EventControl) {
		DesignManialinks_SecondaryButton_SetContourFrameVisibility(_EventControl, False);
	}

	Void DesignManialinks_SecondaryButton_Deactivate(Text _ControlId) {
		declare CMlControl Control = Page.GetFirstChild(_ControlId);
		DesignManialinks_SecondaryButton_ChangeOpacity(Control, 0.6);
		Control.Hide();
	}

	Void DesignManialinks_SecondaryButton_Activate(Text _ControlId) {
		declare CMlControl Control = Page.GetFirstChild(_ControlId);
		DesignManialinks_SecondaryButton_ChangeOpacity(Control, 1.);
		Control.Show();
	}

	Void DesignManialinks_SecondaryButton_Deactivate(Text _ControlId, Text _ActionId) {
		DesignManialinks_SecondaryButton_Deactivate(_ControlId);
		(Page.GetFirstChild("Button_" ^ _ActionId) as CMlQuad).Opacity = 0.;
	}

	Void DesignManialinks_SecondaryButton_Activate(Text _ControlId, Text _ActionId) {
		DesignManialinks_SecondaryButton_Activate(_ControlId);
		(Page.GetFirstChild("Button_" ^ _ActionId) as CMlQuad).Opacity = 1.;
	}

	Void DesignManialinks_ScrollButtons_ChangeOpacity(CMlControl _EventControl, Real _Opacity) {
		declare CMlQuad  Quad_Record <=> (_EventControl as CMlQuad);
		Quad_Record.Opacity = _Opacity;
	}

	Void DesignManialinks_ScrollButtons_MouseOver(CMlControl _EventControl) {
		DesignManialinks_ScrollButtons_ChangeOpacity(_EventControl, 1.);
	}

	Void DesignManialinks_ScrollButtons_MouseOut(CMlControl _EventControl) {
		DesignManialinks_ScrollButtons_ChangeOpacity(_EventControl, 0.6);
	}

	Void DesignManialinks_ScrollButtons_Update(Text _ControlId, Integer _CurrentPage, Integer _MaxPages)
	{
		declare CMlControl Frame		<=> Page.GetFirstChild(_ControlId ^ "_Frame");
		Frame.Show();
		declare CMlLabel Label_Pages    <=> (Page.GetFirstChild(_ControlId) as CMlLabel);
		if (_MaxPages <= 0) {
			Label_Pages.SetText(DesignManialinks_TextLib::ToText(_CurrentPage));
		} else {
			Label_Pages.SetText(_CurrentPage ^ "/" ^ _MaxPages);
		}

		declare CMlQuad  Button_ScrollL			<=> (Page.MainFrame.GetFirstChild(_ControlId ^ "_ScrollL") as CMlQuad);
		declare CMlQuad  Button_ScrollLTen		<=> (Page.MainFrame.GetFirstChild(_ControlId ^ "_ScrollLTen") as CMlQuad);
		declare CMlQuad  Button_ScrollLFirst	<=> (Page.MainFrame.GetFirstChild(_ControlId ^ "_ScrollLFirst") as CMlQuad);
		declare CMlQuad  Button_ScrollR			<=> (Page.MainFrame.GetFirstChild(_ControlId ^ "_ScrollR") as CMlQuad);
		declare CMlQuad  Button_ScrollRTen		<=> (Page.MainFrame.GetFirstChild(_ControlId ^ "_ScrollRTen") as CMlQuad);
		declare CMlQuad  Button_ScrollRLast		<=> (Page.MainFrame.GetFirstChild(_ControlId ^ "_ScrollRLast") as CMlQuad);
		if(_CurrentPage <= 1)
		{
			Button_ScrollL.Hide();
			Button_ScrollLTen.Hide();
			Button_ScrollLFirst.Hide();
		} else {
			Button_ScrollL.Show();
			if (_MaxPages != -2 && _MaxPages != -1) {
				Button_ScrollLTen.Show();
				Button_ScrollLFirst.Show();
			}
		}
		if (_CurrentPage < _MaxPages && _MaxPages != -1) {
			Button_ScrollRTen.Show();
			Button_ScrollRLast.Show();
		} else {
			Button_ScrollRTen.Hide();
			Button_ScrollRLast.Hide();
		}
		if (_MaxPages == -2) {
			Button_ScrollR.Show();
		} else if(_CurrentPage >= _MaxPages || _MaxPages == -1) {
			Button_ScrollR.Hide();
		} else {
			Button_ScrollR.Show();
		}
	}

	Void DesignManialinks_FloatingButtonButton_ChangeColor(CMlControl _EventControl, Text _ColorCode) {
		declare EventControlId = _EventControl.ControlId;
		declare CMlLabel Label_FloatingButton    <=> (_EventControl.Parent.GetFirstChild(EventControlId ^ "_Label")	as CMlLabel);
		Label_FloatingButton.TextColor = DesignManialinks_TextLib::ToColor(_ColorCode);
	}

	Void DesignManialinks_FloatingButtonButton_MouseOver(CMlControl _EventControl) {
		DesignManialinks_FloatingButtonButton_ChangeColor(_EventControl, "{{{G_ColorCode_TextLabel_Hover}}}");
	}

	Void DesignManialinks_FloatingButtonButton_MouseOut(CMlControl _EventControl) {
		DesignManialinks_FloatingButtonButton_ChangeColor(_EventControl, "{{{G_ColorCode_TextLabel_Normal}}}");
	}

	Void DesignManialinks_QuadEntry_ChangeColor(CMlControl _EventControl, Text _ColorCode) {
		declare CMlEntry Entry_Entry	<=> (_EventControl	as CMlEntry);
		Entry_Entry.TextColor = DesignManialinks_TextLib::ToColor(_ColorCode);
	}

	Void DesignManialinks_QuadEntry_MouseOver(CMlControl _EventControl) {
		DesignManialinks_QuadEntry_ChangeColor(_EventControl, "{{{G_ColorCode_TextLabel_Hover}}}");
	}

	Void DesignManialinks_QuadEntry_MouseOut(CMlControl _EventControl) {
		DesignManialinks_QuadEntry_ChangeColor(_EventControl, "{{{G_ColorCode_TextLabel_Normal}}}");
	}

	Void DesignManialinks_QuadEntry_Erase(CMlControl _EventControl) {
		declare EventControlId = DesignManialinks_TextLib::SubText(_EventControl.ControlId, 0, DesignManialinks_TextLib::Length(_EventControl.ControlId) - 12);
		declare CMlEntry Entry_Entry	<=> (_EventControl.Parent.GetFirstChild(EventControlId)	as CMlEntry);
		Entry_Entry.SetText("", True);
	}

	Void DesignManialinks_QuadEntry_StopTextEdit(CMlControl _EventControl) {
		declare EventControlId = _EventControl.ControlId;
		declare CMlEntry	Entry_Entry		<=> (_EventControl.Parent.GetFirstChild(EventControlId)	as CMlEntry);
		declare CMlQuad		EntryCancel		<=> (_EventControl.Parent.GetFirstChild(EventControlId ^ "_EntryCancel") as CMlQuad);
		declare CMlQuad		FakeEntryCancel	<=> (_EventControl.Parent.GetFirstChild(EventControlId ^ "_FakeEntryCancel") as CMlQuad);
		if (Entry_Entry.Value != "") {
			EntryCancel.Show();
			FakeEntryCancel.Hide();
		} else {
			EntryCancel.Hide();
			FakeEntryCancel.Show();
		}
	}

	Void DesignManialinks_ExpandingButton_SwitchOpenClose(CMlControl _EventControl)
	{
		declare Text EventControlId = _EventControl.ControlId;
		declare CMlControl ExpandedButtonsFrame <=> _EventControl.Parent.GetFirstChild(EventControlId ^ "_ExpandedButtonsFrame");
		if (ExpandedButtonsFrame.Visible) {
			ExpandedButtonsFrame.Hide();
		} else {
			ExpandedButtonsFrame.Show();
		}
	}

	Void DesignManialinks_ExpandingButton_ValidateAnswer(CMlControl _EventControl)
	{
		declare Text EventControlId = DesignManialinks_TextLib::SubText(_EventControl.ControlId, 0, DesignManialinks_TextLib::Length(_EventControl.ControlId) - 19);
		declare CMlFrame ExpandedButtonsFrame <=> (_EventControl.Parent.Parent.Parent.GetFirstChild(EventControlId ^ "_ExpandedButtonsFrame") as CMlFrame);
		if (ExpandedButtonsFrame.Visible) {
			ExpandedButtonsFrame.Hide();
		}
		foreach(ControlIndex => Control in ExpandedButtonsFrame.Controls) {
			declare CMlFrame ChildFrame <=> (Control as CMlFrame);
			if (ChildFrame.GetFirstChild(EventControlId ^ "_ExpandedButtonQuad") == _EventControl) {
				declare CMlLabel Label <=> (ChildFrame.GetFirstChild(EventControlId ^ "_ExpandedButtonLabel") as CMlLabel);
				declare CMlEntry Entry <=> (ChildFrame.GetFirstChild(EventControlId ^ "_ExpandedButtonEntry") as CMlEntry);
				declare CMlEntry EntryResult <=> (ExpandedButtonsFrame.Parent.GetFirstChild(EventControlId ^ "_ExpandingButtonQuadEntry") as CMlEntry);
				declare CMlLabel LabelResult <=> (ExpandedButtonsFrame.Parent.GetFirstChild(EventControlId ^ "_LabelResult") as CMlLabel);
				EntryResult.SetText(Entry.Value, True);
				LabelResult.SetText(Label.Value);
			}
		}
	}
	
	Void DesignManialinks_ExpandingButton_SelectAnswer(Text _EventControl, Integer _Index)
	{
		declare CMlFrame ExpandedButtonsFrame <=> (Page.MainFrame.GetFirstChild(_EventControl ^ "_ExpandedButtonFrame-"^_Index) as CMlFrame);
		if(ExpandedButtonsFrame == Null) return;
		declare CMlQuad  ExpandedButtonsQuad  <=> (ExpandedButtonsFrame.GetFirstChild(_EventControl ^ "_ExpandedButtonQuad") as CMlQuad);
		DesignManialinks_ExpandingButton_ValidateAnswer(ExpandedButtonsQuad);
	}

	Void DesignManialinks_ExpandingButton_Update(CMlControl _EventControl, Text[] _AllButtonNames, Text[] _AllDisplayedButtonNames)
	{
		declare Text EventControlId = _EventControl.ControlId;
		declare CMlFrame ExpandedButtonsFrame <=> (_EventControl.Parent.GetFirstChild(EventControlId ^ "_ExpandedButtonsFrame") as CMlFrame);
		ExpandedButtonsFrame.Hide();
		for (ExpandedButtonIndex, 0, C_DesignManialinks_MaxNbExpandedButtons - 1) {
			declare CMlFrame ExpandedButtonFrame <=>
				(ExpandedButtonsFrame.GetFirstChild(EventControlId ^ "_ExpandedButtonFrame-" ^ ExpandedButtonIndex) as CMlFrame);
			if (_AllButtonNames.existskey(ExpandedButtonIndex) && _AllDisplayedButtonNames.existskey(ExpandedButtonIndex)) {
				ExpandedButtonFrame.Show();
				declare DisplayedValue = _AllDisplayedButtonNames[ExpandedButtonIndex];
				declare Value = _AllButtonNames[ExpandedButtonIndex];
				declare CMlLabel ExpandedButtonLabel <=> (ExpandedButtonFrame.GetFirstChild(EventControlId ^ "_ExpandedButtonLabel") as CMlLabel);
				declare CMlEntry ExpandedButtonEntry <=> (ExpandedButtonFrame.GetFirstChild(EventControlId ^ "_ExpandedButtonEntry") as CMlEntry);
				ExpandedButtonLabel.SetText(DisplayedValue);
				ExpandedButtonEntry.SetText(Value, False);
			} else {
				ExpandedButtonFrame.Hide();
			}
		}
	}

	Void DesignManialinks_Init()
	{

	}

	Void DesignManialinks_Loop() {
{{{LibButton_Img::IncludeInWhile(G_Actions)}}}
		foreach(Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::KeyPress
				|| Event.Type == CMlScriptEvent::Type::MenuNavigation
				|| Event.Type == CMlScriptEvent::Type::PluginCustomEvent)
				continue;
			if (Event.Control == Null)
				continue;
			declare Boolean IsMainButton		= Event.Control.HasClass("MainButton");
			declare Boolean IsSecondaryButton	= Event.Control.HasClass("SecondaryButton");
			declare Boolean IsScrollFrame		= Event.Control.HasClass("ScrollFrame");
			declare Boolean IsFloatingButtonFrame = Event.Control.HasClass("FloatingButtonFrame");
			declare Boolean IsEntryEntry		= Event.Control.HasClass("EntryEntry");
			declare Boolean IsQuadEntryCancel	= Event.Control.HasClass("QuadEntryCancel");
			declare Boolean IsExpandedButton	= Event.Control.HasClass("ExpandedButton");
			declare Boolean IsExpandingButtonTrigger = Event.Control.HasClass("ExpandingButtonTrigger");
			declare Boolean IsMouseOutOrClicked	= (	(Event.Type == CMlEvent::Type::MouseOut) || (Event.Type == CMlEvent::Type::MouseClick));
			declare Boolean IsMouseOut			= 	(Event.Type == CMlEvent::Type::MouseOut);
			declare Boolean IsMouseOver			= 	(Event.Type == CMlEvent::Type::MouseOver);
			if (IsMainButton) {
				if (IsMouseOutOrClicked) {
					DesignManialinks_MainButton_MouseOut(Event.Control);
				} else if (IsMouseOver) {
					DesignManialinks_MainButton_MouseOver(Event.Control);
				}
			} else if (IsSecondaryButton) {
				if (IsMouseOutOrClicked) {
					DesignManialinks_SecondaryButton_MouseOut(Event.Control);
				} else if (IsMouseOver) {
					DesignManialinks_SecondaryButton_MouseOver(Event.Control);
				}
			} else if (IsScrollFrame) {
				if (IsMouseOut) {
					DesignManialinks_ScrollButtons_MouseOut(Event.Control);
				} else if (IsMouseOver) {
					DesignManialinks_ScrollButtons_MouseOver(Event.Control);
				}
			} else if (IsFloatingButtonFrame) {
				if (IsMouseOutOrClicked) {
					DesignManialinks_FloatingButtonButton_MouseOut(Event.Control);
				} else if (IsMouseOver) {
					DesignManialinks_FloatingButtonButton_MouseOver(Event.Control);
				}
			} else if (IsEntryEntry) {
				if (IsMouseOutOrClicked) {
					DesignManialinks_QuadEntry_MouseOut(Event.Control);
				} else if (IsMouseOver) {
					DesignManialinks_QuadEntry_MouseOver(Event.Control);
				}
				if (Event.Type == CMlEvent::Type::EntrySubmit) {
					DesignManialinks_QuadEntry_StopTextEdit(Event.Control);
				}
			} else if (IsQuadEntryCancel) {
				if (Event.Type == CMlEvent::Type::MouseClick) {
					DesignManialinks_QuadEntry_Erase(Event.Control);
				}
			} else if (IsExpandedButton) {
				if (Event.Type == CMlEvent::Type::MouseClick) {
					DesignManialinks_ExpandingButton_ValidateAnswer(Event.Control);
				}
			} else if (IsExpandingButtonTrigger) {
				if (Event.Type == CMlEvent::Type::MouseClick) {
					DesignManialinks_ExpandingButton_SwitchOpenClose(Event.Control);
				}
			}
		}
	}

	Void DesignManialinks_Show() {
{{{LibButton_Img::IncludeInShow()}}}
	}
""";
}