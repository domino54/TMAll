#Include "TextLib"																as TextLib
#Include "MathLib" 																as MathLib
#Include "Libs/Nadeo/Common/Core/Pages.Script.txt"									as Pages
#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"									as Logger
#Include "Libs/Nadeo/Common/Core/SectionsManager.Script.txt"							as SectionsManager
#Include "Libs/Nadeo/Common/Core/MenuLayers.Script.txt"								as Layers

#Include "Libs/Nadeo/MP4/Common/GlobalVariables.Script.txt"							as GlobalVariables

#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"											as DesignManialinks
/////Components
#Include "Libs/Nadeo/Common/APIs/PlayerGroups.Script.txt"												as PlayerGroups
#Include "Libs/Nadeo/MP4/Common/SettingsController.Script.txt"											as SettingsController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/SectionsSelector/SectionsSelectorController.Script.txt"	as SectionsSelectorController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Background/BackgroundController.Script.txt"				as BackgroundController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/GlobalButtons/GlobalButtonsController.Script.txt"			as GlobalButtonsController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/G_BarreSection/BarreSectionController.Script.txt"			as BarreSectionController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/G_RankingModule/RankingModuleController.Script.txt"		as RankingModuleController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/MusicMenu/MusicMenuController.Script.txt"					as MusicMenuController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/RecordCenter/RecordsController.Script.txt"					as RecordsController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/NewAsset/NewAssetController.Script.txt"					as NewAssetController
#Include "Libs/Nadeo/MP4/Common/Components/MediaBrowser/MediaBrowserController.Script.txt"					as MediaBrowserController
#Include "Libs/Nadeo/MP4/Common/Components/TrackBrowser/TrackBrowserController.Script.txt"				as TrackBrowserController
#Include "Libs/Nadeo/MP4/Common/Components/ScriptBrowser/ScriptBrowserController.Script.txt"			as ScriptBrowserController
#Include "Libs/Nadeo/MP4/Common/Components/ReplayBrowser/ReplayBrowserController.Script.txt"			as ReplayBrowserController
#Include "Libs/Nadeo/MP4/Common/Components/ModBrowser/ModBrowserController.Script.txt"					as ModBrowserController
#Include "Libs/Nadeo/MP4/Common/Components/MatchSettingsEditor/MatchSettingsEditorController.Script.txt" as MatchSettingsEditorController
#Include "Libs/Nadeo/MP4/Common/Components/DialogBox/DialogBoxController.Script.txt"					as DialogBoxController
#Include "Libs/Nadeo/MP4/Common/LoadingScreen.Script.txt"												as LoadingScreen
//Sections
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Solo/SoloController.Script.txt"							as SoloController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Multiplayer/MultiplayerController.Script.txt"				as MultiplayerController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/LocalPlay/LocalPlayController.Script.txt"					as LocalPlayController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/EditorController.Script.txt"						as EditorController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Profil/ProfilController.Script.txt"						as ProfilController
#Include "Libs/Nadeo/MP4/TPLagoon/Components/ManiaCredits/ManiaCreditsController.Script.txt"			as ManiaCreditsController
#Include "Libs/Nadeo/MP4/TPLagoon/XMLController.Script.txt"												as XMLController
#Include "Libs/Nadeo/MP4/TPLagoon/TokenManager.Script.txt"												as TokenManager

#Const C_ReqTimeout				10000

declare Text[Text] G_GlobalParam;

declare Text[] 		  G_Solo_Sections;
declare Boolean[Text] G_Sections;
declare Text[Text] 	  G_PoliceStyle;

declare Text     G_ImgLogo;
declare CManiaPlanet::EContext G_PrevMenuContext;

Void WarnNotEnoughParams(CManiaAppEvent _Event) {
	Logger::Warn("[Menucontroller] event "^_Event.CustomEventType^": not enough params ["^_Event.CustomEventData^"]");
}

Text Private_LoadXml(Text _Path) {
	declare XmlFile = "";
	
	declare Req <=> Http.CreateGet(_Path);
	declare ReqEndTime = Now + C_ReqTimeout;
	declare Success = False;
	
	while (Now < ReqEndTime) {
		if (Req.IsCompleted) {
			XmlFile = Req.Result;
			Success = True;
			break;
		}
		yield; //HACK - virer Yield
	}
	if (!Success) 	Logger::Warn("[MenuController] Private_LoadXml(): Failed to load: "^_Path);
	else 		 	Logger::Log("[MenuController] Private_LoadXml(): XML successfully loaded: "^_Path);

	Http.Destroy(Req);
	
	return XmlFile;
}

Void UpdateGlobalButtons()
{
	declare Text ActualSection      = SectionsManager::GetActualSection();
	GlobalButtonsController::UpdateSection(ActualSection);
	if(ActualSection == "SectionsSelector")
	{
		GlobalButtonsController::UpdateHome(False);
		GlobalButtonsController::UpdateBack(True);
	}
	else
	{
		GlobalButtonsController::UpdateHome(True);
		GlobalButtonsController::UpdateBack(True);
	}

}

Void LoadAll() {
	XMLController::GetXML();
	G_Sections = XMLController::Get_Sections();
	GlobalVariables::Init(GlobalVariables::LaunchContext_Title());
	//SettingsController::Set_AccelerationCoef(XMLController::Get_Gameplay_Acceleration());
	//SettingsController::Set_ControlCoef(XMLController::Get_Gameplay_Control());
	//SettingsController::Set_GravityCoef(XMLController::Get_Gameplay_Gravity());

	declare Ident MyUserID for LocalUser;
	MyUserID = UserMgr.MainUser.Id;

	declare Text ImgLogo for LocalUser;
	//ImgLogo = G_GlobalParam["Logo"];
	ImgLogo = XMLController::Get_GlobalParam("Logo");
	declare Text[Text] PolicesStyles for LocalUser;
	//PolicesStyles = G_PoliceStyle;
	PolicesStyles =  XMLController::Get_PoliceStyle();
	declare Text[Text] Logo_Sections for LocalUser;
	Logo_Sections =  XMLController::Get_Logo_Sections();

	PlayerGroups::Load(UserMgr);
	DesignManialinks::Load();
	BackgroundController::Load();
	MusicMenuController::Load();
	RecordsController::Load();
	NewAssetController::Load();
	BarreSectionController::Load();
	RankingModuleController::Load();
	GlobalButtonsController::Load();
	TrackBrowserController::Load();
	ScriptBrowserController::Load();
	ReplayBrowserController::Load();
	ModBrowserController::Load();
	MatchSettingsEditorController::Load();
	DialogBoxController::Load();
	LoadingScreen::Load();
	ProfilController::Load();
	TokenManager::Init();

	if(G_Sections["Solo"]) SoloController::Load();
	if(G_Sections["Multiplayer"])  MultiplayerController::Load();
	if(G_Sections["LocalPlay"])    LocalPlayController::Load();
	if(G_Sections["Editors"])      EditorController::Load();
	declare Text NewsColor = XMLController::Get_NewsColor();
	ManiaCreditsController::Load();

	//EmptyComponent::Load();
	SectionsSelectorController::Load(PolicesStyles, NewsColor);
	//SectionsManager::SetLogo(G_ImgLogo);

	SectionsManager::SetActualSection("SectionsSelector");
}

Void GotoPrevious()
{
	declare Text CurrentPage = Pages::GetCurrentPageName();
	if (CurrentPage == "SectionsSelector") {
		Menu_Quit();
	}
	Pages::GotoPrevious();
	declare Text PrevPage = Pages::GetCurrentPageName();
	if(PrevPage == "SectionsSelector") SectionsManager::SetActualSection(PrevPage);
	UpdateGlobalButtons();
}

Void Back() {
	if (DialogBoxController::IsShown()) {
		DialogBoxController::HideMessage();
		return;
	}
	GotoPrevious();
}

Void Home() {
	if (DialogBoxController::IsShown()) {
		DialogBoxController::HideMessage();
	}
	Pages::GotoHome();
	SectionsManager::SetActualSection("SectionsSelector");
	UpdateGlobalButtons();
}


Void CommonLoops() {
	foreach(Event in Notifications.Events) {
	}

	foreach(Event in PendingEvents) {
		if(Event.Type != CManiaAppEvent::EType::LayerCustomEvent) continue;
		switch(Event.CustomEventType) {
			case "GotoPage": {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Text NewPage = Event.CustomEventData[0];
				Pages::GotoNext(NewPage);
				//declare CUILayer LayerToSend = Layers::Get(NewPage);
				//if(LayerToSend == Null) return;
				//LayerCustomEvent(LayerToSend, "SendLogo", [G_ImgLogo]);
				UpdateGlobalButtons();

			}
			case "GotoPrevious" : {
				GotoPrevious();
			}
			case "GlobalB_Back" : {
				Back();
			}
			case "GotoHome" : {
				Home();
			}
			case "DetachPage" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				foreach(PageLayerName in Event.CustomEventData)
				{
					Pages::DetachPage(PageLayerName);
				}
			}
			
			case "SetBackGround" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Text BGSelect = Event.CustomEventData[0];
				declare Text ActualPage = Pages::GetCurrentPageName();
			}
			case "Quit": {
				MusicMenuController::StopMusic();
				Menu_Quit();
			}
			case "UpdateGlobalButtons": {
				UpdateGlobalButtons();
			}
			case "UpdateBarreSection": {
				declare Text BarreId = Event.CustomEventData[0];
				BarreSectionController::SetConfiguration(BarreId);
			}
		}
	}
}


Void LoopAll() {

	CommonLoops();
	//Global
	PlayerGroups::Loop(UserMgr, LocalUser);
	BackgroundController::Loop();
	MusicMenuController::Loop();
	RecordsController::Loop();
	NewAssetController::Loop();
	MediaBrowserController::CommonLoop();
	TrackBrowserController::Loop();
	ScriptBrowserController::Loop();
	ReplayBrowserController::Loop();
	ModBrowserController::Loop();
	MatchSettingsEditorController::Loop();
	GlobalButtonsController::Loop();
	BarreSectionController::Loop();
	RankingModuleController::Loop();
	ManiaCreditsController::Loop();
	DialogBoxController::Loop();
	TokenManager::Loop();

	//Section
	switch(SectionsManager::GetActualSection()) {
		case "SectionsSelector" : SectionsSelectorController::Loop();
		case "Solo"             : SoloController::Loop();
		case "Multiplayer"      : MultiplayerController::Loop();
		case "LocalPlay"        : LocalPlayController::Loop();
		case "Editors"          : EditorController::Loop();
		case "Profil"           : ProfilController::Loop();
	}
	
	//log("SectionsManager::GetActualSection(): " ^ SectionsManager::GetActualSection());
	
}