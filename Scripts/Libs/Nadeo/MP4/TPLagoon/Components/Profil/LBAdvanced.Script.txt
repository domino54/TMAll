#Include "Libs/Nadeo/Common/FormDisplayer.Script.txt" as FormDisplayer

#Const C_SettingsTypes		["Switch", "Button",
							"Switch",	"Switch",	"Switch", "Switch", "Switch", "Switch",
							"Switch",
							"Switch"]

#Const C_SettingsNames		[_("Auto connect at start"),	"",
							_("Show avatars"),	_("Enable chat"),	_("Allow custom models"),	_("Allow unlimited horns"), _("Save automaticaly all replays"), _("Save each roud separately"),
							_("Choose between simple and advanced map editor"),
							_("Prevent entering this station with parental lock")]

Text Build() {
	FormDisplayer::Init("", "", "AdvancedEvent", C_SettingsTypes, C_SettingsNames, <-50.7, 16.>, <216.7, 123.3>);
	FormDisplayer::SetSecondColumnStart(60);
	FormDisplayer::SetQuadMargin(-1.);
	FormDisplayer::SetDefault([1=> "Disconnect account"]);
	FormDisplayer::SetSettingsTextSize(1.);
	
	declare Real[Text] G_PositionSettingType = ["Switch" => 8., "Button" => -27.];
	FormDisplayer::SetPositionSettingType(G_PositionSettingType);
	declare Text[] G_TitlesName     = [_("General"), _("Multiplayer"), _("Editor"), _("Station Settings")];
	declare Vec2[] G_TitlesPosition = [<-39., 24.>, <-39., 3.>, <-39., -46.>, <-39., -60.>];
	declare Real[] G_TitlesSize     = [3., 3., 3., 3.];
	FormDisplayer::SetSettingsTitle(G_TitlesName, G_TitlesPosition, G_TitlesSize, True);
	FormDisplayer::SetSettingsSpacingY([0 => 5., 2 => 8., 8 => 11., 9 => 8.]);
	
	declare Text MLText = """
<manialink version="3" name="L_Profil">
{{{FormDisplayer::ManialinkFrameModels()}}}

	<frame id="Frame_All">
{{{FormDisplayer::ManialinkMainBody()}}}
	</frame>

	<script><!--
{{{FormDisplayer::Includes()}}}
{{{FormDisplayer::Declares()}}}

	Void ShowPage()
	{
		EnableMenuNavigation(True,False,Null,1);
		SendCustomEvent("UpdateValues_Advanced", [""]);
		FormDisplayer_Show();
	}

	Void Init()
	{
	}

	main() {
		Init();
		FormDisplayer_Init();
		ShowPage();
		while(True) {

			yield;
			if(! PageIsVisible) continue;
			FormDisplayer_Loop();

			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								SendCustomEvent("GotoHome", [""]);
							}
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch(Event.CustomEventType) {
							case "Show" : {
								ShowPage();
								//SendCustomEvent("UpdateBarreSection", ["ProfilMain"]);
							}
							case "Hide" : {
								EnableMenuNavigation(True,False,Null,0);
								SendCustomEvent("DetachPage", ["Advanced"]);
							}
							case "Back" : {
								SendCustomEvent("GotoPrevious", [""]);
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>	""";
	
	return MLText;
}