#Include "Libs/Nadeo/Common/FormDisplayer.Script.txt" as FormDisplayer

#Const C_SettingsTypes		["Stats", "Stats",
							 "Stats", "Stats", "Stats", "Stats", "Label", "Label",
							 "Label", "Label",
							 "Label"]

#Const C_SettingsNames		[_("Editing time"),	_("Solo Time"), _("Online time"),	_("Play time"),
							_("Reset count"),	_("Finish count"),
							_("Most Edited"), _("Most played solo"), _("Most played online"), _("Most played"),
							//L16N || "Nb" is for Number "chall." is for challenge
							_("Nb chall. played")]

Text Build() {
	FormDisplayer::Init("", "", "StatsEvent", C_SettingsTypes, C_SettingsNames, <-50.7, 16.>, <216.7, 123.3>);
	FormDisplayer::SetSecondColumnStart(60);
	FormDisplayer::SetQuadMargin(-1.5);
	FormDisplayer::SetDefault([1=> "Disconnect account"]);
	FormDisplayer::SetSettingsTextSize(1.);
	
	declare Real[Text] G_PositionSettingType = ["Switch" => 8., "Button" => -27.];
	FormDisplayer::SetPositionSettingType(G_PositionSettingType);
	declare Text[] G_TitlesName     = [_("Total"), _("Max")
									//L16N || Average
										, _("Avg")];
	declare Vec2[] G_TitlesPosition = [<2., 21.>, <25., 21.>, <49., 21.>];
	declare Real[] G_TitlesSize     = [3., 3., 3., 3.];
	FormDisplayer::SetSettingsTitle(G_TitlesName, G_TitlesPosition, G_TitlesSize, False);
	FormDisplayer::SetSettingsSpacingY([0 => 8., 4 => 4., 6 => 4., 10 => 4.]);
	
	declare Text MLText = """
<manialink version="3" name="L_Profil">
{{{FormDisplayer::ManialinkFrameModels()}}}

	<frame id="Frame_All">
{{{FormDisplayer::ManialinkMainBody()}}}
	</frame>

	<script><!--
{{{FormDisplayer::Includes()}}}
{{{FormDisplayer::Declares()}}}

	Void ShowPage()
	{
		EnableMenuNavigation(True,False,Null,1);
		SendCustomEvent("UpdateValues_Stats", [""]);
		FormDisplayer_Show();
	}

	Void Init()
	{
	}

	main() {
		Init();
		FormDisplayer_Init();
		ShowPage();
		while(True) {

			yield;
			if(! PageIsVisible) continue;
			FormDisplayer_Loop();

			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								SendCustomEvent("GotoHome", [""]);
							}
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch(Event.CustomEventType) {
							case "Show" : {
								ShowPage();
								//SendCustomEvent("UpdateBarreSection", ["ProfilMain"]);
							}
							case "Hide" : {
								EnableMenuNavigation(True,False,Null,0);
								SendCustomEvent("DetachPage", ["Stats"]);
							}
							case "Back" : {
								SendCustomEvent("GotoPrevious", [""]);
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>	""";
	
	return MLText;
}