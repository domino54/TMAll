#Include "Libs/Nadeo/MP4/Common/Components/MediaDisplayer/LBMediaDisplayer.Script.txt"	as MediaCardDisplayer
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"				as Colors
#Include "TextLib"											as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 		as Font
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks


#Const C_ImgBase		 "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"
#Const C_ImgAchievements "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Achievements/"
#Const C_ImgBG			 "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/BackGroundTest.dds"

#Const C_CardMedalSize		<12., 25.>
#Const C_CardMedalSizeBig	<14., 28.>
#Const C_CardMedalPos		<2., -13.5>
#Const C_CardMedalPosBig	<3., -11.4>

Text Build(Boolean _SoloAllowEvaluate) {
	//Maps
	declare Vec2	SizeMaps				= MediaCardDisplayer::Get_SizeMediaCards();

	declare Text	IMGRankZone				= C_ImgBase ^ "RankZone.dds";

	declare Text	IMGLockMedalLock		= C_ImgBase ^ "MedalLock.dds";
	declare Text	IMGLockMedalNoMedal		= C_ImgBase ^ "medal-empty.dds";

	declare Text	IMGMedalReal			= C_ImgAchievements ^ "Medal.dds";
	declare Text	IMGMedalRealUp			= C_ImgAchievements ^ "Medal_Up.dds";
	declare Text	IMGMedalRealDown		= C_ImgAchievements ^ "Medal_Down.dds";
	declare Text	IMGMedalNoMedal			= C_ImgBase ^ "medal-empty2.dds";

	declare Text	IMGStart				= C_ImgBase ^ "StartLogo.dds";
	declare Text	IMGMapEvaluer			= C_ImgBase ^ "EvaluateLogo.dds";
	declare Text	IMGPictoMultilap		= C_ImgBase ^ "PictoMultilap.dds";

	declare Text	IMGScroll				= C_ImgBase ^ "Button_Scroll_Smallv.dds";

	declare Integer	Count_InstancesMapsX	= 5;
	declare Integer	Count_InstancesMapsY	= 4;
	declare Real	PosXFirstMaps			= -85.7;
	declare Real	PosYFirstMaps			= 38.8;
	declare Boolean	IsAuthorLine			= True;
	declare Boolean	IsScroll				= False;
	declare Boolean ShowsNonExistentFrames	= False;
	declare Text	InfoLineStyle			= "MainSub";
	declare Text[]	InfoLineLogos			= [IMGRankZone, IMGRankZone, IMGRankZone, IMGRankZone, IMGRankZone];
	declare Text[]	MetadataKeys			= ["Medal", "Time", "LockMedalType", "UserMedalNb", "LockMedalNb", "SkillPoints"];
	declare Text[]	ButtonNames;
	declare Text[]	ButtonLogos;
	declare Text[]	ButtonActions;
	declare Text[]	ButtonEvents;
	if (_SoloAllowEvaluate) {
		//L16N |Verb, Infinitive| In a displayed contextual menu, a button to start playing on the selected map.
		ButtonNames							= [_("Start"),
		//L16N |Verb, Infinitive| In a displayed contextual menu, a button to rate the selected map.
												_("Evaluate")];
		ButtonLogos							= [IMGStart, IMGMapEvaluer];
		ButtonActions						= ["Select", "Action1"];
		ButtonEvents						= ["Solo_PlayMap", "Solo_Evaluate"];
	} else {
		//L16N |Verb, Infinitive| In a displayed contextual menu, a button to start playing on the selected map.
		ButtonNames							= [_("Start")];
		ButtonLogos							= [IMGStart];
		ButtonActions						= ["Select"];
		ButtonEvents						= ["Solo_PlayMap"];
	}
	declare Text ImgLogo for LocalUser;

	MediaCardDisplayer::Init(	Count_InstancesMapsX, Count_InstancesMapsY, <PosXFirstMaps, PosYFirstMaps>, IsAuthorLine, IsScroll, ShowsNonExistentFrames, InfoLineStyle,
								InfoLineLogos, MetadataKeys, ButtonNames, ButtonLogos, ButtonActions, ButtonEvents);
	declare Text YellowIntense	= Colors::GetColorXml("YellowIntense2");
	declare Text Green2			= Colors::GetColorXml("Green2");
	declare Text	MainFont	= Font::GetFontName("Main");
	declare Text	ChronoFont	= Font::GetFontName("Chrono");
	declare Text 	SubFont		= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_Solo">

	<framemodel id="Top_Player">
		<quad  pos="22.5 4."   halign="center" valign="center" size="36. 0.2" opacity="0.5" bgcolor="fff"/>
		<label id="Label_Rank" halign="right"	valign="bottom" size="4.2" pos="07.5 0." z-index="1" textfont="{{{MainFont}}}" textsize="1.43" textcolor="fff" text="0"/>
		<label id="Label_Name" halign="left"	valign="bottom" size="21" pos="08.5 0." z-index="1" textfont="{{{MainFont}}}" textsize="1.43" textcolor="fff" text="PlayerName"/>
		<label id="Label_Time" halign="right"	valign="bottom" size="10" pos="40.5 0." z-index="1" textfont="{{{ChronoFont}}}" textsize="1.43" textcolor="{{{YellowIntense}}}" text="00:00.00"/>
	</framemodel>

	<framemodel id="MediaCardDisplayer_Card_ExtraData">
		<frame pos="{{{- SizeMaps.X / 2.}}} {{{SizeMaps.Y / 2.}}}" size="{{{SizeMaps.X}}} {{{SizeMaps.Y}}}">
			<quad id="Quad_Medal" halign="center" valign="center" size="{{{C_CardMedalSize.X}}} {{{C_CardMedalSize.Y}}}" 
				pos="{{{C_CardMedalPos.X}}} {{{C_CardMedalPos.Y}}}" keepratio="fit" z-index="5" hidden="1" opacity="1.0"/>
		</frame>
		<label id="Label_SkillPoints" halign="right" valign="center" size="{{{SizeMaps.X - 7.}}} 3" pos="14 9"		z-index="1" textfont="{{{MainFont}}}" textsize="1.2" textemboss="1" textcolor="{{{Green2}}}" text="120938"/>
		<quad halign="right" valign="center" size="4.5 4.5" pos="19.5 8.8" style="Icons128x128_1" substyle="SkillPoints" keepratio="fit"/>
		<frame id="Frame_Lock" hidden="0" z-index="4">
			<quad id="LockInfos" halign="center" valign="center" size="{{{SizeMaps.X}}} {{{SizeMaps.Y}}}" z-index="-1" opacity="0.3" bgcolor="000" scriptevents="1"/>
			<quad id="Quad_MedalLock" halign="center" valign="center" pos="0 3" size="{{{SizeMaps.X - 13.}}} {{{SizeMaps.Y - 13.}}}" z-index="2" opacity="0.8" keepratio="fit" image="{{{IMGLockMedalLock}}}"/>
			<label id="Label_MedalLock" text="" halign="center" valign="center" textfont="{{{SubFont}}}" pos="0 -4" z-index="1" textsize="2" size="{{{SizeMaps.X - 2.}}} 0"/>
		</frame>
	</framemodel>

	<framemodel id="MediaCardDisplayer_Menu_ExtraData">
		<quad id="MediaCard_Menu_ExtraData_Quad_Medal" halign="center" valign="center" pos="90 -15" size="7 14" keepratio="fit" z-index="1"/>
		<quad id="MediaCard_Menu_ExtraData_Quad_MedalExtra" halign="center" valign="center" pos="90 -16.6" size="8.8 8.8" keepratio="fit" z-index="1"/>
		<quad id="MediaCard_Menu_ExtraData_Quad_ExtraMedal-0" halign="center" valign="center" pos="88.5 -15" size="7 14" keepratio="fit" z-index="0"/>
		<quad id="MediaCard_Menu_ExtraData_Quad_ExtraMedal-1" halign="center" valign="center" pos="87 -15" size="7 14" keepratio="fit" z-index="-1"/>
		<quad id="MediaCard_Menu_ExtraData_Quad_ExtraMedal-2" halign="center" valign="center" pos="85.5 -15" size="7 14" keepratio="fit" z-index="-2"/>
		<label id="MediaCard_Menu_ExtraData_Label_Time" halign="center" valign="center" pos="102 -5" size="20 4" textfont="{{{ChronoFont}}}" textcolor="{{{YellowIntense}}}" textsize="5" text="--:--.--"/>
		<quad halign="center" valign="center" size="0.5 8.5" pos="95 -15" bgcolor="fff"/>
		<frame pos="111.5 -14.5">
			<label id="ContextLabel_SkillPoints" halign="right" valign="center" size="14.8 4" textfont="{{{ChronoFont}}}"  textcolor="{{{Green2}}}" textsize="5" text="3298474"/>
			<quad halign="left" valign="center" size="9 9" pos="2 -0.5" style="Icons128x128_1" substyle="SkillPoints" keepratio="fit"/>
		</frame>

		<frame id="Frame_Top" pos="-21.9 -25">
			<label id="Label_ZoneRank" halign="left"	valign="bottom" size="40" pos="42 7." z-index="1" textfont="{{{ChronoFont}}}" textsize="1" textcolor="fff" text="00:00,00"/>
			<frame pos="99.8 8.6">
				<quad  id="Quad_ZoneNext"			halign="center" valign="center" size="5.5 5.5"	image="{{{IMGScroll}}}" keepratio="fit" opacity="0" scriptevents="1" rot="180"/>
				<quad  id="Quad_ZoneDisplay"	halign="center" valign="center" size="5 5"		image="{{{IMGScroll}}}" colorize="FFF" opacity="0.8" keepratio="fit" rot="180"/>
			</frame>
			<frame pos="93.7 8.6">
				<quad  id="Quad_ZonePrev"			halign="center" valign="center" size="5.5 5.5"	image="{{{IMGScroll}}}" opacity="0" keepratio="fit" scriptevents="1"/>
				<quad  id="Quad_ZoneDisplay"	halign="center" valign="center" size="5 5"		image="{{{IMGScroll}}}" colorize="FFF" opacity="0.8" keepratio="fit"/>
			</frame>
		</frame>
		""";

	for(I,0,4)
	{
		declare Real PosY = - I*4 - 24.;
		MLText^="""
			<frameinstance modelid="Top_Player" z-index="5." pos="0 {{{PosY}}}"  id="Frame_TopPlayer{{{I}}}"/>
			<frameinstance modelid="Top_Player" z-index="5." pos="40 {{{PosY}}}" id="Frame_TopPlayer{{{I+5}}}"/>
		""";
	}

		MLText^="""
		<quad id="ExtraDelimiter" pos="62.5 -36"   halign="center" valign="center" size="36. 0.2" opacity="0.5" bgcolor="fff" hidden="1"/>
	</framemodel>

	<framemodel id="MediaCardDisplayer_ListItem_ExtraData">
	</framemodel>

	<framemodel id="Frame_LabelRanking">
		<label id="Label_Ranking"      halign="right" valign="center" size="30" pos="23.2 0." textsize="1.2" scale="0.95" textprefix="$t"  textfont="{{{SubFont}}}" text=""/>
	</framemodel>

	{{{MediaCardDisplayer::ManialinkFrameModels()}}}

	<frame id="Frame_All">
		<frame id="Frame_ParallaxBG" z-index="-1">
			<quad id="Quad_BG0"          halign="center" valign="center" keepratio="fit" size="320 180"  pos=" 0" z-index="-2" opacity="0." />
			<quad id="Quad_BG1"          halign="center" valign="center" keepratio="fit" size="320 180"  pos=" 0" z-index="-3" opacity="0." />
		</frame>
		<frame id="Frame_Parallax">
{{{MediaCardDisplayer::ManialinkMainBody()}}}
		</frame>
	</frame>

	<script><!--
	#Include "TextLib" as Solo_TextLib
	#Include "MathLib" as Solo_MathLib

	#Const C_ImgMedals			["Author" => "{{{IMGMedalReal}}}", "Gold" => "{{{IMGMedalReal}}}", "Silver" => "{{{IMGMedalReal}}}",
								"Bronze" => "{{{IMGMedalReal}}}", "NoMedal" => ""]
	#Const C_ImgContextMedals	["Author" =>"{{{IMGMedalRealUp}}}" , "Gold" => "{{{IMGMedalRealUp}}}" , "Silver" => "{{{IMGMedalRealUp}}}",
								"Bronze" => "{{{IMGMedalRealUp}}}" , "NoMedal" => ""]
	#Const C_ExtraMedals		["Author" =>"{{{IMGMedalRealUp}}}" , "Gold" => "{{{IMGMedalRealUp}}}" , "Silver" => "{{{IMGMedalRealUp}}}",
								"Bronze" => "{{{IMGMedalRealUp}}}" , "NoMedal" => ""]
	#Const C_ExtraBit			["Author" =>"{{{IMGMedalRealDown}}}" , "Gold" => "{{{IMGMedalRealDown}}}" , "Silver" => "{{{IMGMedalRealDown}}}",
								"Bronze" => "{{{IMGMedalRealDown}}}" , "NoMedal" => ""]
	#Const C_ColorMedals		["Author" => {{{Colors::GetColor("GreenMaster")}}} , "Gold" =>  {{{Colors::GetColor("GoldShiny")}}} , "Silver" =>  {{{Colors::GetColor("SilverShiny")}}},
								"Bronze" =>  {{{Colors::GetColor("BronzeShiny")}}} , "NoMedal" => <0., 0., 0.>]
	#Const C_Medals				["Author", "Gold", "Silver", "Bronze", "NoMedal"]

{{{MediaCardDisplayer::Includes()}}}
{{{MediaCardDisplayer::FirstDeclares()}}}

	declare Boolean					G_IsFirstBackground;
	declare Integer					G_CurrentMap;

	Void UpdateRanking()
	{

		declare Text      Top_ZoneRank      for Page;
		declare Text[]    Top_Name          for Page;
		declare Integer[] Top_Time       	for Page;
		declare Integer[] Top_Ranks			for Page;
		declare Boolean	  Top_CanGoLeft		for Page;
		declare Boolean	  Top_CanGoRight	for Page;
		declare ExtraDelimiter <=> Page.GetFirstChild("ExtraDelimiter");
		for(I,0,9)
		{
			declare CMlFrame Frame_TopPlayer <=> (Page.MainFrame.GetFirstChild("Frame_TopPlayer"^I)	as CMlFrame);
			declare CMlLabel Label_Rank      <=> (Frame_TopPlayer.GetFirstChild("Label_Rank")	as CMlLabel);
			declare CMlLabel Label_Name      <=> (Frame_TopPlayer.GetFirstChild("Label_Name")	as CMlLabel);
			declare CMlLabel Label_Time      <=> (Frame_TopPlayer.GetFirstChild("Label_Time")	as CMlLabel);
			if(Top_Name.existskey(I))
			{
				declare UserName = Top_Name[I];
				Label_Name.SetText(""^UserName);
				Frame_TopPlayer.Show();
				if (I == 9) {
					if (UserName == LocalUser.Name && Top_Ranks.existskey(I) && Top_Ranks[I] > 10) {// TODO : Hack un peu degueu à corriger par les logins
						// (là en fait si un gars a le même nom que moi et est 11 ex-aequo avec quelqu'un d'autre, il va décaler la frame)
						Frame_TopPlayer.RelativePosition_V3.Y = -41.2;
						ExtraDelimiter.Show();
					} else {
						Frame_TopPlayer.RelativePosition_V3.Y = -40.;
						ExtraDelimiter.Hide();
					}
				}
			}
			else
			{
				Frame_TopPlayer.Hide();
			}
			
			if(Top_Time.existskey(I) && Top_Time[I] > 0)
			{
				declare Text TimeText = Solo_TextLib::TimeToText(Top_Time[I], True);
				TimeText ^= Solo_TextLib::SubText(Top_Time[I]  ^"", (Solo_TextLib::Length(Top_Time[I]^"")-1), 1);
				Label_Time.SetText(TimeText);
			} else {
				Label_Time.SetText("-:--.---");
			}

			if(Top_Ranks.existskey(I) && Top_Ranks[I] > 0) {
				Label_Rank.SetText(Solo_TextLib::ToText(Top_Ranks[I]));
			} else {
				Label_Rank.SetText("-");
			}
		
		}
		
		declare CMlLabel Label_ZoneRank <=> (Page.GetFirstChild("Label_ZoneRank")	as CMlLabel);
		Label_ZoneRank.SetText(Top_ZoneRank);

		declare CMlQuad Quad_ZoneNext <=> (Page.GetFirstChild("Quad_ZoneNext")	as CMlQuad);
		declare CMlQuad Quad_ZonePrev <=> (Page.GetFirstChild("Quad_ZonePrev")	as CMlQuad);
		declare CMlQuad Quad_ZoneNextDisplay <=> (Quad_ZoneNext.Parent.GetFirstChild("Quad_ZoneDisplay")	as CMlQuad);
		declare CMlQuad Quad_ZonePrevDisplay <=> (Quad_ZonePrev.Parent.GetFirstChild("Quad_ZoneDisplay")	as CMlQuad);

		if(!Top_CanGoLeft)
		{
			Quad_ZonePrev.Hide();
			Quad_ZonePrevDisplay.Opacity = 0.2;
		} else {
			Quad_ZonePrev.Show();
			Quad_ZonePrevDisplay.Opacity = 0.8;
		}
		if(!Top_CanGoRight)
		{
			Quad_ZoneNext.Hide();
			Quad_ZoneNextDisplay.Opacity = 0.2;
		} else {
			Quad_ZoneNext.Show();
			Quad_ZoneNextDisplay.Opacity = 0.8;
		}
	}

	Void ShowPage()
	{
		declare CMlFrame Frame_Parallax <=> (Page.MainFrame.GetFirstChild("Frame_Parallax")	as CMlFrame);
		Frame_Parallax.Show();
	}

	Void ShowTransition()
	{
		
	}


	Void ChangeBackground(Text _ThumbnailUrl, Boolean _Anim)
	{
		declare Integer BackGround0;
		declare Integer BackGround1;
		if(G_IsFirstBackground)
		{
			BackGround0 = 1;
			BackGround1 = 0;
		} else {
			BackGround0 = 0;
			BackGround1 = 1;
		}
		declare CMlQuad  Quad_BG0  <=> (Page.MainFrame.GetFirstChild("Quad_BG" ^ BackGround0)	as CMlQuad);
		declare CMlQuad  Quad_BG1  <=> (Page.MainFrame.GetFirstChild("Quad_BG" ^ BackGround1)	as CMlQuad);
		Quad_BG0.ZIndex = -3.;
		Quad_BG1.ZIndex = -2.;
		Quad_BG0.Opacity = 1.;
		Quad_BG1.Opacity = 0.;
		Quad_BG1.ChangeImageUrl(_ThumbnailUrl);
		LibManialink_AnimStop(Quad_BG0);
		LibManialink_AnimStop(Quad_BG1);
		if(_Anim) {
			LibManialink_SetTargetOpacity(Quad_BG1, 1.);
			LibManialink_PresetAnimInsert(Quad_BG1, 100, 600, "EaseInOutQuad");
		} else {
			Quad_BG1.Opacity = 1.;
		}
		G_IsFirstBackground = !G_IsFirstBackground;
	}

	Void MediaCardDisplayer_ShowCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare CMlQuad Quad_Medal			<=> (_Card.GetFirstChild("Quad_Medal")	as CMlQuad);
		declare CMlQuad Quad_MapsThumbnail	<=> (_Card.GetFirstChild("Quad_MediaCardThumbnail") as CMlQuad);

		Quad_Medal.Show();
		declare Text MedalType = _Data["Medal"];
		Quad_Medal.ChangeImageUrl(C_ImgMedals[MedalType]);
		Quad_Medal.Colorize = C_ColorMedals[MedalType];
		Quad_Medal.Opacity = 0.8;

		declare CMlFrame Frame_Lock			<=> (_Card.GetFirstChild("Frame_Lock")	as CMlFrame);
		Frame_Lock.Hide();
		Quad_MapsThumbnail.Colorize = <0.4, 0.4, 0.4>;
		Quad_MapsThumbnail.ModulateColor = <1., 1., 1.>;

		declare CMlLabel Label_SkillPoints			<=> (_Card.GetFirstChild("Label_SkillPoints")				as CMlLabel);
		if (_Data.existskey("SkillPoints") && _Data["SkillPoints"] != "") {
			Label_SkillPoints.SetText(_Data["SkillPoints"]);
		} else {
			Label_SkillPoints.SetText("");
		}
	}

	Void MediaCardDisplayer_ShowLockedCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare CMlQuad Quad_Medal			<=> (_Card.GetFirstChild("Quad_Medal")	as CMlQuad);
		declare CMlQuad Quad_MapsThumbnail	<=> (_Card.GetFirstChild("Quad_MediaCardThumbnail") as CMlQuad);

		Quad_Medal.Hide();

		declare Integer OneDIndex		for _Card;

		declare CMlFrame Frame_Lock			<=> (_Card.GetFirstChild("Frame_Lock")	as CMlFrame);
		declare CMlQuad Quad_MedalLock		<=> (Frame_Lock.GetFirstChild("Quad_MedalLock")		as CMlQuad);
		declare CMlLabel Label_MedalLock	<=> (Frame_Lock.GetFirstChild("Label_MedalLock")	as CMlLabel);
		declare CMlQuad Quad_LockInfos		<=> (Frame_Lock.GetFirstChild("LockInfos")			as CMlQuad);
		declare Integer CurMedalNb			= Solo_TextLib::ToInteger(_Data["UserMedalNb"]);
		declare Integer LockMedalNb			= Solo_TextLib::ToInteger(_Data["LockMedalNb"]);
		declare Text MedalType				= _Data["LockMedalType"];
		declare Integer OneDIndexLock	for Quad_LockInfos;
		OneDIndexLock = OneDIndex;
		Quad_MedalLock.Colorize = C_ColorMedals[MedalType];
		Label_MedalLock.SetText(CurMedalNb ^ " / " ^ LockMedalNb);
		Frame_Lock.Show();

		declare CMlLabel Label_SkillPoints			<=> (_Card.GetFirstChild("Label_SkillPoints")				as CMlLabel);
		Label_SkillPoints.SetText("");

		Quad_MapsThumbnail.Colorize = <0.4, 0.4, 0.4>;
	}

	Void MediaCardDisplayer_UnFocusCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare CMlQuad Quad_Medal			<=> (_Card.GetFirstChild("Quad_Medal")	as CMlQuad);
		declare Integer OneDIndex		for _Card;
		if (OneDIndex != G_CurrentMap) {
			Quad_Medal.Opacity = 0.8;
		}
	}

	Void MediaCardDisplayer_FocusCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare CMlQuad Quad_Medal			<=> (_Card.GetFirstChild("Quad_Medal")	as CMlQuad);
		Quad_Medal.Opacity = 1.;
	}

	Void MediaCardDisplayer_UnSelectCard(CMlFrame _Card)
	{
		declare CMlQuad  Quad_Medal		   <=> (_Card.GetFirstChild("Quad_Medal")	as CMlQuad);

		LibManialink_AnimStop(Quad_Medal);

		//LibManialink_SetTargetPosition(Quad_Medal, {{{C_CardMedalPos}}});
		//LibManialink_SetTargetSize(Quad_Medal, {{{C_CardMedalSize}}});
		//LibManialink_SetTargetOpacity(Quad_Medal, 0.8);
		Quad_Medal.RelativePosition_V3 = {{{C_CardMedalPos}}};
		Quad_Medal.Size = {{{C_CardMedalSize}}};
		Quad_Medal.Opacity = 0.8; // TODO : Enlever ces 3 lignes puis décommenter les autres quand la lib c++ anim arrivera
		// LibManialink_PresetAnim(Quad_Medal, 70, "EaseLinear");

		G_CurrentMap = -1;
	}

	Void MediaCardDisplayer_SelectCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare CMlQuad Quad_Medal		   <=> (_Card.GetFirstChild("Quad_Medal")	as CMlQuad);

		LibManialink_AnimStop(Quad_Medal);
		LibManialink_SetTargetPosition(Quad_Medal, {{{C_CardMedalPosBig}}});
		LibManialink_SetTargetSize(Quad_Medal, {{{C_CardMedalSizeBig}}});
		LibManialink_SetTargetOpacity(Quad_Medal, 1.);
		LibManialink_PresetAnim(Quad_Medal, 70, "EaseLinear");

		// Menu Contextuel
		declare CMlQuad ContextualQuadMedal	<=> (Page.GetFirstChild("MediaCard_Menu_ExtraData_Quad_Medal") as CMlQuad);
		declare CMlQuad MedalExtraBit		<=> (Page.GetFirstChild("MediaCard_Menu_ExtraData_Quad_MedalExtra") as CMlQuad);
		declare Text MedalType = _Data["Medal"];
		ContextualQuadMedal.ChangeImageUrl(C_ImgContextMedals[MedalType]);
		MedalExtraBit.ChangeImageUrl(C_ExtraBit[MedalType]);
		ContextualQuadMedal.Colorize = C_ColorMedals[MedalType];
		MedalExtraBit.Colorize = C_ColorMedals[MedalType];
		for(I, 0, 2) {
			declare CMlQuad MediaCard_Menu_ExtraData_Quad_ExtraMedal <=> (Page.GetFirstChild("MediaCard_Menu_ExtraData_Quad_ExtraMedal-" ^ I) as CMlQuad);
			declare MedalIndex = C_Medals.keyof(MedalType);
			if (MedalIndex < C_Medals.count - I - 1) {
				declare PrevMedal = C_Medals[MedalIndex + I + 1];
				MediaCard_Menu_ExtraData_Quad_ExtraMedal.Show();
				MediaCard_Menu_ExtraData_Quad_ExtraMedal.ChangeImageUrl(C_ExtraMedals[PrevMedal]);
				MediaCard_Menu_ExtraData_Quad_ExtraMedal.Colorize = C_ColorMedals[PrevMedal];
			} else {
				MediaCard_Menu_ExtraData_Quad_ExtraMedal.Hide();
			}
		}
		declare CMlLabel ContextTimeLabel	<=> (Page.GetFirstChild("MediaCard_Menu_ExtraData_Label_Time") as CMlLabel);
		ContextTimeLabel.SetText(_Data["Time"]);

		declare CMlLabel ContextLabel_SkillPoints			<=> (Page.GetFirstChild("ContextLabel_SkillPoints")				as CMlLabel);
		if (_Data.existskey("SkillPoints") && _Data["SkillPoints"] != "") {
			ContextLabel_SkillPoints.SetText(_Data["SkillPoints"]);
		} else {
			ContextLabel_SkillPoints.SetText("");
		}
		// ---

		declare Integer OneDIndex for _Card;
		G_CurrentMap = OneDIndex;
		SendCustomEvent("Solo_GetRanking", [G_CurrentMap^""]);
	}

	Void Hide() {
		declare CMlQuad  Quad_BG0  <=> (Page.MainFrame.GetFirstChild("Quad_BG0")	as CMlQuad);
		declare CMlQuad  Quad_BG1  <=> (Page.MainFrame.GetFirstChild("Quad_BG1")	as CMlQuad);

		Quad_BG0.ChangeImageUrl("");
		Quad_BG1.ChangeImageUrl("");
	}

{{{MediaCardDisplayer::SecondDeclares()}}}

		Void Init()
		{
			G_IsFirstBackground = False;
			G_CurrentMap = -1;
		}

		Void UpdateParallax()
		{
			if(MouseX == -1000.) return;
			declare CMlFrame Frame_Parallax   <=> (Page.MainFrame.GetFirstChild("Frame_Parallax")	as CMlFrame);
			declare Real NewPosX = -MouseX/340.;
			declare Real NewPosY = -MouseY/340.;

			Frame_Parallax.RelativePosition_V3   = <NewPosX,NewPosY>;
		}

		main() {
			Init();
			MediaCardDisplayer_Init();

			while(True) {
				
				yield;
				MediaCardDisplayer_Loop();
				if(!PageIsVisible && PendingEvents.count == 0) continue;
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case CMlEvent::EMenuNavAction::PageUp : {
									SendCustomEvent("Barre_PageUp", [""]);
								}
								case CMlEvent::EMenuNavAction::PageDown : {
									SendCustomEvent("Barre_PageDown", [""]);
								}
							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "LockInfos") {
								declare CMlQuad LockInfos <=> (Event.Control as CMlQuad);
								LockInfos.BgColor = <1., 1., 1.>;
							}
							if (Event.ControlId == "Quad_ZoneNext" || Event.ControlId == "Quad_ZonePrev") {
								declare Quad_ZoneDisplay <=> (Event.Control.Parent.GetFirstChild("Quad_ZoneDisplay") as CMlQuad);
								Quad_ZoneDisplay.Opacity = 1.;
							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "LockInfos") {
								declare CMlQuad LockInfos <=> (Event.Control as CMlQuad);
								LockInfos.BgColor = <0., 0., 0.>;
							}
							if (Event.ControlId == "Quad_ZoneNext" || Event.ControlId == "Quad_ZonePrev") {
								declare Quad_ZoneDisplay <=> (Event.Control.Parent.GetFirstChild("Quad_ZoneDisplay") as CMlQuad);
								if (Event.Control.Visible)
									Quad_ZoneDisplay.Opacity = 0.8;
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Quad_ZoneNext")
							{
								SendCustomEvent("Solo_PageUp", [G_CurrentMap^""]);
							}
							else if (Event.ControlId == "Quad_ZonePrev")
							{
								SendCustomEvent("Solo_PageDown", [G_CurrentMap^""]);
							}
							else if (Event.ControlId == "LockInfos") {
								declare CMlQuad LockInfos <=> (Event.Control as CMlQuad);
								LockInfos.BgColor = <0., 0., 0.>;
								declare Integer OneDIndexLock for Event.Control;
								SendCustomEvent("Solo_LockedMessage", [Solo_TextLib::ToText(OneDIndexLock)]);
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "Back" : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case "Show" : {
									EnableMenuNavigation(True,False,Null,1);

									declare CMlFrame Frame_All <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
									Frame_All.Hide();
									SendCustomEvent("Solo_Show", Text[]);
									ShowTransition();
									MediaCardDisplayer_Show();
									if (G_CurrentMap != -1) {
										SendCustomEvent("Solo_GetRanking", [G_CurrentMap^""]);
									}
								}
								case "UpdateGlobalButtons": {
									SendCustomEvent("UpdateGlobalButtons", Text[]);
								}
								case "UpdateRanking" : {
									UpdateRanking();
								}
								case "Hide" : {
									EnableMenuNavigation(False,False,Null,0);
									Hide();
									SendCustomEvent("DetachPage", ["Solo"]);
								}
								case "ShowSoloFrame" : {
									declare CMlFrame Frame_All <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
									Frame_All.Show();
									EnableMenuNavigation(True,False,Null,3);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}