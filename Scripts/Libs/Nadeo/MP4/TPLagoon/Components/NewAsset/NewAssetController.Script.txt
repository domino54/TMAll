#Include "TextLib"																			as TextLib
#Include "Libs/Nadeo/Common/Core/MenuLayers.Script.txt"											as Layers
#Include "Libs/Nadeo/Common/Core/Pages.Script.txt"												as Pages
#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"												as Logger
#Include "Libs/Nadeo/MP4/Common/Components/ModBrowser/ModBrowserController.Script.txt"			as ModBrowserController
#Include "Libs/Nadeo/MP4/Common/Components/TrackBrowser/TrackBrowserController.Script.txt"		as TrackBrowserController
#Include "Libs/Nadeo/MP4/TPLagoon/XMLController.Script.txt"										as XMLController
#Include "Libs/Nadeo/MP4/Common/Components/MenuButtonsOld/LBMenuButtons.Script.txt"												as MenuButtons
#Include "Libs/Nadeo/MP4/Common/LoadingScreen.Script.txt"										as LoadingScreen
#Include "Libs/Nadeo/MP4/Common/SettingsController.Script.txt"  								as SettingsController
#Include "Libs/Nadeo/Common/Core/SectionsManager.Script.txt"										as SectionsManager
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"									as DesignManialinks

#Include "Libs/Nadeo/MP4/TPLagoon/Components/G_BarreSection/BarreSectionController.Script.txt"	as BarreSectionController

//Layers
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBNewMap.Script.txt"						as LBNewMap
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBMoods.Script.txt"							as LBMoods
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBFields.Script.txt"						as LBFields
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBEnviro.Script.txt"						as LBEnviro
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBVehicle.Script.txt"						as LBVehicle
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBStadium.Script.txt"						as LBStadium
#Include "Libs/Nadeo/MP4/TPLagoon/Components/Editor/LBValley.Script.txt"						as LBValley

#Const C_LoadingScreenSimpleDefault "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Editors/Moods/Day.webp"

Vec3 GetColor() {
	declare Text[Text] Colors = XMLController::Get_Color_Sections();
	declare Text CurrentSection = SectionsManager::GetActualSection();
	if (!Colors.existskey(CurrentSection)) {
		return TextLib::ToColor(DesignManialinks::GetColorCode_Overall());
	}
	return TextLib::ToColor(Colors[CurrentSection]);
}

declare Text	G_MapEditorScriptName;
declare Boolean	G_IsRunning;
declare Integer	G_PageNumber;
declare Integer	G_EnviroChoose;
declare Integer	G_VehicleChoose;
declare Integer	G_EditorChoose;
declare Integer G_FieldChoose;
declare Integer G_StadiumChoose;
declare Integer G_ValleyChoose;
declare Text	G_PageToGoBackTo;
declare Text	G_SettingsXml;
declare Boolean	G_Advanced;

Void Build(Text _LayerName, Boolean _Attach) {

	declare Text MLText;
	switch(_LayerName) {
		case("NewMap"):{
			MLText = LBNewMap::Build();
		}
		case("Moods"):{
			MLText = LBMoods::Build();
		}
		case("Fields"):{
			MLText = LBFields::Build();
		}
		case("Enviro"):{
			MLText = LBEnviro::Build();
		}
		case("Vehicle"):{
			MLText = LBVehicle::Build();
		}
		case("Stadium"):{
			MLText = LBStadium::Build();
		}
		case("Valley"):{
			MLText = LBValley::Build();
		}
	}

	if(MLText == "") {
		Logger::Warn("Unknown Page: "^_LayerName);
		return;
	}

	Layers::Create(_LayerName, MLText);

	declare CUILayer Layer <=> Layers::Get(_LayerName);
	declare Text Page_LayerName for Layer.LocalPage;

	Page_LayerName = _LayerName;
	if(_Attach) Layers::Attach(_LayerName);
}

Void Build(Text _LayerName) {
	Build(_LayerName, False);
}

Void Init()
{
	G_IsRunning		= False;
	G_PageNumber	= 0;
}

Boolean IsRunning()
{
	return G_IsRunning;
}

Boolean IsAtFirstPage()
{
	return (G_PageNumber == 1);
}

Text Get_EnviroText(Integer _Index)
{
	declare Text[] Environments = ["Canyon", "Stadium", "Valley", "Lagoon"];
	if(!Environments.existskey(_Index)) return "EnviroNotFound";
	return Environments[_Index];
}

Integer Get_EnviroIndex(Text _Enviro)
{
	declare Text[] Environments = ["Canyon", "Stadium", "Valley", "Lagoon"];
	return Environments.keyof(_Enviro);
}

Text Get_VehicleText(Integer _Index)
{
	declare Text[] Vehicles = ["CanyonCar", "StadiumCar", "ValleyCar", "LagoonCar", "IslandCar", "BayCar", "CoastCar", "DesertCar", "SnowCar", "RallyCar", "TrafficCar"];
	if(!Vehicles.existskey(_Index)) return "VehicleNotFound";
	return Vehicles[_Index];
}

Text Get_FieldText(Integer _Index)
{
	declare Text[] Environments = ["Land", "Water"];
	if(!Environments.existskey(_Index)) return "FieldNotFound";
	return Environments[_Index];
}

Text Get_PreStadium(Integer _Index)
{
	declare Text[] Environments = ["", "64x64"];
	if(!Environments.existskey(_Index)) return "StadiumSizeNotFound";
	return Environments[_Index];
}

Text Get_PostValley(Integer _Index)
{
	declare Text[] Environments = ["48", "64"];
	if(!Environments.existskey(_Index)) return "ValleySizeNotFound";
	return Environments[_Index];
}

Text Get_Valley64BaseMap(Text _Mood)
{
	return """TMAllMaker/Bases/Valley/Valley/ValleyValley{{{_Mood}}}64.Map.Gbx""";
}

Text Get_PostMood(Integer _Index)
{
	if(_Index == 3 || _Index == 2) return "48";
	return "";
}

Text Get_PostMood(Text _Enviro)
{
	if(_Enviro == "Lagoon" || _Enviro == "Valley") return Get_PostMood(3);
	return Get_PostMood(0);
}

Void ChangeAllMenus()
{
	//L16N Map editor
	MenuButtons::ChangeData("NewMap",	[_("Simple"),
		//L16N Map editor
		_("Advanced")],
										[<-0.5, 12.0>,	<80.2, 12.0>],
										["Button_Simple", "Button_Advanced"],
										GetColor());
	MenuButtons::ChangeData("Moods",	[_("|ArticleName|Sunrise"),	_("|ArticleName|Day"),	_("|ArticleName|Sunset"),	_("|ArticleName|Night")],
										[<-68.5, -1.3>, <-2.8333, -1.3>, <62.8333, -1.3>, <128.5, -1.3>],
										["Button_Mood0", "Button_Mood1", "Button_Mood2", "Button_Mood3"],
										GetColor());
	MenuButtons::ChangeData("Fields",	[_("|ArticleName|Land"),	_("|ArticleName|Water")],
										[<-0.5, -1.3>,	<70.2, -1.3>],
										["Button_Field0", "Button_Field1"],
										GetColor());
	MenuButtons::ChangeData("Enviro",	["Canyon",	"Stadium",	"Valley",	"Lagoon"],
										[<-68.5, -1.3>, <-2.8333, -1.3>, <62.8333, -1.3>, <128.5, -1.3>],
										["Button_Enviro0", "Button_Enviro1", "Button_Enviro2", "Button_Enviro3"],
										GetColor());
	MenuButtons::ChangeData("Vehicle",	["Canyon Car", "Stadium Car", "Valley Car", "Lagoon Car", "Island Car", "Bay Car", "Coast Car", "Desert Car", "Snow Car", "Rally Car"], // , "Traffic Car"],
										[<-68.5, -1.3>, <-2.8333, -1.3>, <62.8333, -1.3>, <128.5, -1.3>, <-90.3888, -31.1>, <-46.6111, -31.1>, <-2.8333, -31.1>, <40.9444, -31.1>, <84.7222, -31.1>, <128.5, -31.1>], // , <128.5, -54.6>],
										["Button_Vehicle0", "Button_Vehicle1", "Button_Vehicle2", "Button_Vehicle3", "Button_Vehicle4", "Button_Vehicle5", "Button_Vehicle6", "Button_Vehicle7", "Button_Vehicle8", "Button_Vehicle9"], // , "Button_Vehicle10"],
										GetColor());
	MenuButtons::ChangeData("Stadium",	[_("|ArticleName|32 x 32"),	_("|ArticleName|64 x 64")],
										[<-0.5, -1.3>,	<70.2, -1.3>],
										["Button_Stadium0", "Button_Stadium1"],
										GetColor());
	MenuButtons::ChangeData("Valley",	[_("|ArticleName|48 x 48"),	_("|ArticleName|64 x 64")],
										[<-0.5, -1.3>,	<70.2, -1.3>],
										["Button_Valley0", "Button_Valley1"],
										GetColor());
}

Void Load() {
	Init();
	Build("NewMap");
	Build("Moods");
	Build("Fields");
	Build("Enviro");
	Build("Vehicle");
	Build("Stadium");
	Build("Valley");
	ChangeAllMenus();
	Pages::Compose("NewMap",		["NewMap", "BarreSection"]);
	Pages::Compose("Moods",			["Moods", "BarreSection"]);
	Pages::Compose("Fields",		["Fields", "BarreSection"]);
	Pages::Compose("Enviro",		["Enviro", "BarreSection"]);
	Pages::Compose("Vehicle",		["Vehicle", "BarreSection"]);
	Pages::Compose("Stadium",		["Stadium", "BarreSection"]);
	Pages::Compose("Valley",		["Valley", "BarreSection"]);
	G_SettingsXml     = SettingsController::GetSettingsXmlEditor();
	declare Text ProjectEnviro for LocalUser;
	if(ProjectEnviro != "TMAll" && ProjectEnviro != "") {
		G_EnviroChoose = Get_EnviroIndex(ProjectEnviro);
		G_VehicleChoose = G_EnviroChoose;
	}
	G_MapEditorScriptName	= XMLController::Get_MapEditorScriptName();
	
}

Void Hide() {
	G_IsRunning		= False;
	G_PageNumber	= 0;
	ModBrowserController::ForceHide();
	Pages::GotoHome(G_PageToGoBackTo);
	TrackBrowserController::Show();
}

Void ForceHide() {
	G_IsRunning		= False;
	G_PageNumber	= 0;
	ModBrowserController::ForceHide();
}

Void SetMoodsLock()
{
	declare Boolean[] ButtonLock;
	ButtonLock = [True, True, True, True]; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	MenuButtons::SetButtonActive("Moods", ButtonLock);
}

Void GoToNewMap(Boolean _IsSimple)
{
	if(_IsSimple)
	{
		G_Advanced = False;
		LoadingScreen::SetLoadingType(1, C_LoadingScreenSimpleDefault);

		declare Text Enviro             = Get_EnviroText(G_EnviroChoose);
		declare Text Deco    			= "Day" ^ Get_PostMood(G_EnviroChoose);
		declare Text PlayerModel        = Enviro^"Car";
		declare Text MapType            = "Race.Script.txt";
		declare Text EditorPluginScript = G_MapEditorScriptName;
		declare Text SettingsXml        = G_SettingsXml;
		declare Text ProjectEnviro		for LocalUser;
		if(ProjectEnviro == "Storm")
		{
			Enviro			   = "Storm";
			PlayerModel        = "";
			MapType            = "";
			EditorPluginScript = "";
			SettingsXml        = "";
			Deco			   = "Land48x48Day";
		}
		Hide();
		TitleFlow.EditNewMap(Enviro, Deco, "", PlayerModel, MapType, True, EditorPluginScript, SettingsXml);
	}
	else
	{
		G_Advanced = False;
		G_PageNumber += 1;
		declare Boolean IsMods = False; //ModBrowserController::HasAMod();
		if(IsMods)
		{
			ModBrowserController::Show("ModsFromNewMap", [//L16N |Infinitive| In a popup, a button to select
			_("Choose")],
			//L16N |Noun, plural| Refers to alteration of textures to give a different display.
			_("Mods"));
		} else {
			SetMoodsLock();
			declare Text ProjectEnviro for LocalUser;
			if(ProjectEnviro == "Storm")
			{
				Pages::GotoNext("Fields");
			}
			else if(ProjectEnviro == "TMAll")
			{
				Pages::GotoNext("Enviro");
			}
			else
			{
				Pages::GotoNext("Moods");
			}
		}
	}
}

Void Show(Text _PageToGoBackTo) {
	if (G_IsRunning) {
		Logger::Warn("NewAssetController déjà en marche, methode Show() appelée deux fois");
	}
	G_PageNumber		= 1;
	G_IsRunning			= True;
	G_PageToGoBackTo	= _PageToGoBackTo;
	ChangeAllMenus();

	declare Text MapEditorMode = UserMgr.MainUser.Config.Editors_MapEditorMode^""; //En text parce que l'EMapEditorMode n'est pas encore trouvé
	if(MapEditorMode == "::EMapEditorMode::Simple")
	{
		GoToNewMap(True);
	}
	else if(MapEditorMode == "::EMapEditorMode::Advanced")
	{
		GoToNewMap(False);
	}
	else if(MapEditorMode == "::EMapEditorMode::Ask")
	{
		Pages::GotoNext("NewMap");
	}

}

Void LaunchEditor(Text _Mood, Text _Thumbnail)
{
	LoadingScreen::SetLoadingType(1, _Thumbnail);
	declare Text Enviro   = Get_EnviroText(G_EnviroChoose);
	declare Text Deco     = _Mood ^ Get_PostMood(G_EnviroChoose);

	declare Text PlayerModel        = Get_VehicleText(G_VehicleChoose);
	declare Text MapType            = ""; // "Race.Script.txt";
	MapType = "Race.Script.txt";
	declare Text EditorPluginScript = G_MapEditorScriptName;
	declare Text SettingsXml        = G_SettingsXml;
	declare Text ProjectEnviro for LocalUser;
	if(ProjectEnviro == "Storm")
	{
		Enviro			   = "Storm";
		PlayerModel        = "";
		MapType            = "";
		EditorPluginScript = "";
		SettingsXml        = "";
		Deco			   = Get_FieldText(G_FieldChoose) ^ "48x48"^_Mood;
	}
	else if (Enviro == "Stadium") {
		Deco = Get_PreStadium(G_StadiumChoose) ^ _Mood;
	}
	if (Enviro == "Valley" && Get_PostValley(G_ValleyChoose) == "64") {
		declare Text BaseMap = Get_Valley64BaseMap(_Mood);
		TitleFlow.EditNewMapFromBaseMap(BaseMap, "", PlayerModel, MapType, EditorPluginScript, SettingsXml);
	}
	else {
		TitleFlow.EditNewMap(Enviro, Deco, "", PlayerModel, MapType, EditorPluginScript, SettingsXml);
	}
	Hide();
}

Void GotoByEnviro(Integer _Index) {
	switch (_Index) {
		case 1 : Pages::GotoNext("Stadium");
		case 2 : Pages::GotoNext("Valley");
		default : Pages::GotoNext("Moods");
	}
}

Void Loop() {
	if (!G_IsRunning) return;
	if (ModBrowserController::HasFetchedMods() && G_Advanced) {
		GoToNewMap(False);
	}
	foreach(Event in PendingEvents) {
		if(Event.Type != CManiaAppEvent::EType::LayerCustomEvent) continue;
		switch(Event.CustomEventType) {
			case "Button_Simple" : {
				GoToNewMap(True);
			}
			case "Button_Mood0" : {
				if (Event == Null) {
					continue;
				}
				LaunchEditor("Sunrise", Event.CustomEventData[0]);
			}
			case "Button_Mood1" : {
				if (Event == Null) {
					continue;
				}
				LaunchEditor("Day", Event.CustomEventData[0]);
			}
			case "Button_Mood2" : {
				if (Event == Null) {
					continue;
				}
				LaunchEditor("Sunset", Event.CustomEventData[0]);
			}
			case "Button_Mood3" : {
				if (Event == Null) {
					continue;
				}
				LaunchEditor("Night", Event.CustomEventData[0]);
			}
			case "Button_Field0" : {
				G_FieldChoose = 0;
				G_PageNumber += 1;
				Pages::GotoNext("Moods");
			}
			case "Button_Field1" : {
				G_FieldChoose = 1;
				G_PageNumber += 1;
				Pages::GotoNext("Moods");
			}
			case "Button_Enviro0" : {
				G_PageNumber += 1;
				G_EnviroChoose = 0;
				Pages::GotoNext("Vehicle");
			}
			case "Button_Enviro1" : {
				G_PageNumber += 1;
				G_EnviroChoose = 1;
				Pages::GotoNext("Vehicle");
			}
			case "Button_Enviro2" : {
				G_PageNumber += 1;
				G_EnviroChoose = 2;
				Pages::GotoNext("Vehicle");
			}
			case "Button_Enviro3" : {
				G_PageNumber += 1;
				G_EnviroChoose = 3;
				Pages::GotoNext("Vehicle");
			}
			case "Button_Vehicle0" : {
				G_PageNumber += 1;
				G_VehicleChoose = 0;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle1" : {
				G_PageNumber += 1;
				G_VehicleChoose = 1;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle2" : {
				G_PageNumber += 1;
				G_VehicleChoose = 2;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle3" : {
				G_PageNumber += 1;
				G_VehicleChoose = 3;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle4" : {
				G_PageNumber += 1;
				G_VehicleChoose = 4;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle5" : {
				G_PageNumber += 1;
				G_VehicleChoose = 5;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle6" : {
				G_PageNumber += 1;
				G_VehicleChoose = 6;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle7" : {
				G_PageNumber += 1;
				G_VehicleChoose = 7;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle8" : {
				G_PageNumber += 1;
				G_VehicleChoose = 8;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle9" : {
				G_PageNumber += 1;
				G_VehicleChoose = 9;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Vehicle10" : {
				G_PageNumber += 1;
				G_VehicleChoose = 10;
				GotoByEnviro(G_EnviroChoose);
			}
			case "Button_Stadium0" : {
				G_StadiumChoose = 0;
				G_PageNumber += 1;
				Pages::GotoNext("Moods");
			}
			case "Button_Stadium1" : {
				G_StadiumChoose = 1;
				G_PageNumber += 1;
				Pages::GotoNext("Moods");
			}
			case "Button_Valley0" : {
				G_ValleyChoose = 0;
				G_PageNumber += 1;
				Pages::GotoNext("Moods");
			}
			case "Button_Valley1" : {
				G_ValleyChoose = 1;
				G_PageNumber += 1;
				Pages::GotoNext("Moods");
			}
			case "Button_Advanced" : {
				G_Advanced = True;
				ModBrowserController::FetchMods();
			}
			case "ModsFromNewMap_Button_0" : {
				G_PageNumber += 1;
				declare Text ModPath = Event.CustomEventData[0];
				declare Text ProjectEnviro for LocalUser;
				ModBrowserController::MakeIdle();
				SetMoodsLock();
				if(ProjectEnviro == "Storm")
				{
					Pages::GotoNext("Fields");
				}
				else
				{
					Pages::GotoNext("Moods");
				}

				//G_ModSelect = ModPath;
			}
		}
	}
}

Text GenerateXML ()
{
	return "";
}