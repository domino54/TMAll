#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/Common/Components/MenuButtonsOld/LBMenuButtons.Script.txt"					as MenuButtons
#Const C_ImgBase	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Editors/Vehicle/"
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font

Text Build() {

	declare Real	SizeXQuad                = 59.3;
	declare Real	SizeYQuad                = 34.1;
	MenuButtons::SetLabelButtonPosition(<-3.9, -10.2>);

	declare Text	MainFont = Font::GetFontName("Main");
	declare Text MLText = """
<manialink version="3" name="L_Vehicle">
{{{MenuButtons::IncludeInFrameModels(SizeXQuad, SizeYQuad, 7.)}}}""";
	SizeXQuad = 37.4;
	SizeYQuad = 21.5; // SizeYQuad *= 4/6.;
	MenuButtons::SetLabelButtonPosition(<-3.9, -6.4>);
    MLText ^= """
{{{MenuButtons::IncludeInFrameModels(SizeXQuad, SizeYQuad, 3.5, "MenuButtons_FrameModelSmall")}}}
	<frame id="Frame_All">
		<frame id="TargetMove_Title" pos="30. 0.">
			<label id="Label_Title" halign="left"  valign="center" text="{{{_("|Game|Vehicle")}}}" textfont="{{{MainFont}}}" pos="-127.5 27.1" opacity="1." z-index="2" textsize="10." textcolor="fff"/>
		</frame>
		<frame id="TargetMove_Line" pos="30. 0.">
			<frame id="Habillage_Menu_Line" pos="-127.8 19.2" z-index="0" hidden="0">
				<quad id="Quad_Line0" halign="left" valign="top" size="258.0 0.2" pos="0. 0." opacity="1.0" bgcolor="fff" />
				<quad id="Quad_Line1" halign="left" valign="bottom" size="24.0 0.4" pos="0. 0." opacity="1.0" bgcolor="fff" />
			</frame>
		</frame>
{{{MenuButtons::IncludeInManialink([4 => "MenuButtons_FrameModelSmall"])}}}
		<frame id="TargetMove_Angle" pos="30. 0.">
			<frame id="Habillage_Menu_Angle" pos="-128.3  -43.8">
				<quad id="Quad_Line0" halign="right" valign="bottom" size="2.2 0.7" opacity="1." bgcolor="fff"/>
				<quad id="Quad_Line1" halign="right" valign="top" size="0.7 1.5" opacity="1." bgcolor="fff"/>
			</frame>
		</frame>
	</frame>

	<script><!--
		#Include "TextLib" as Vehicle_TextLib
{{{Manialink::GetIncludes()}}}
{{{MenuButtons::Includes()}}}

{{{Manialink::Load()}}}

{{{MenuButtons::Declares()}}}

{{{MenuButtons::Functions()}}}
		Void Reset()
		{
		}

		Void Init()
		{
			Reset();
MenuButtons_Init();

			declare Text[] VehicleImg = ["{{{C_ImgBase}}}CanyonCar.webp",
									  "{{{C_ImgBase}}}StadiumCar.webp",
									  "{{{C_ImgBase}}}ValleyCar.webp",
									  "{{{C_ImgBase}}}LagoonCar.webp",
									  "{{{C_ImgBase}}}IslandCar.webp",
									  "{{{C_ImgBase}}}BayCar.webp",
									  "{{{C_ImgBase}}}CoastCar.webp",
									  "{{{C_ImgBase}}}DesertCar.webp",
									  "{{{C_ImgBase}}}SnowCar.webp",
									  "{{{C_ImgBase}}}RallyCar.webp",
									  "{{{C_ImgBase}}}TrafficCar.webp"
									  ];

			declare CMlFrame ButtonsFrame <=> (Page.GetFirstChild("MenuButtons_ButtonsFrame") as CMlFrame);
			for(I, 0, VehicleImg.count-1)
			{
				declare CMlFrame ButtonFrame     <=> (ButtonsFrame.GetFirstChild("MenuButtons_FrameInstance-"^I) as CMlFrame);
				if(ButtonFrame == Null) continue;
				declare CMlQuad MenuButtons_IMG <=> (ButtonFrame.GetFirstChild("MenuButtons_IMG") as CMlQuad);
				//MenuButtons_IMG.BgColor = <1.,1.,0.>;
				MenuButtons_IMG.Show();
				MenuButtons_IMG.ChangeImageUrl(VehicleImg[I]);
				MenuButtons_IMG.KeepRatio = CMlQuad::EKeepRatioMode::Clip;
			}
		}

		Void ShowPage()
		{
			G_HideTime = -1;
			EnableMenuNavigation(True,False,Null,3);
			Reset();
			SendCustomEvent("UpdateBarreSection", ["Vehicle"]);
		}

		Void HidePage()
		{
			SendCustomEvent("DetachPage", ["Vehicle"]);
		}

		Void LaunchTransitionHabillage(Real _TargetPosX, Integer _DecaleTime, Integer _Speed, Boolean _FadeIn)
		{
			declare Text[] Frame_Habillage = ["TargetMove_Title",
										"TargetMove_Line",
										"TargetMove_Angle"];

			declare Integer DecaleTime = _DecaleTime;
			for(I, 0, Frame_Habillage.count-1)
			{

				declare CMlFrame MyFrame      <=> (Page.MainFrame.GetFirstChild(Frame_Habillage[I])	as CMlFrame);
				//MyFrame.RelativePosition.X = 35.;
				LibManialink_AnimStop(MyFrame);
				LibManialink_SetTargetPosition(MyFrame, <_TargetPosX, MyFrame.RelativePosition.Y>);
				LibManialink_PresetAnimInsert(MyFrame, DecaleTime, _Speed +150, "EaseOutQuad");
				if(_FadeIn)
				{
					declare CMlQuad Quad_Line0 <=> (MyFrame.GetFirstChild("Quad_Line0")	as CMlQuad);
					declare CMlQuad Quad_Line1 <=> (MyFrame.GetFirstChild("Quad_Line1")	as CMlQuad);
					if(Quad_Line0 == Null ||Quad_Line1 == Null) continue;
					Quad_Line0.Opacity = 0.;
					Quad_Line1.Opacity = 0.;

					LibManialink_AnimStop(Quad_Line0);
					LibManialink_AnimStop(Quad_Line1);
					LibManialink_SetTargetOpacity(Quad_Line0, 1.0);
					LibManialink_PresetAnimInsert(Quad_Line0, DecaleTime, _Speed, "EaseOutQuad");
					LibManialink_SetTargetOpacity(Quad_Line1, 1.0);
					LibManialink_PresetAnimInsert(Quad_Line1, DecaleTime, _Speed, "EaseOutQuad");
					if(Frame_Habillage[I] == "TargetMove_Line")
					{
						Quad_Line0.Size.X = 0.;
						LibManialink_SetTargetSize(Quad_Line0, <258., Quad_Line0.Size.Y>);
						LibManialink_PresetAnimInsert(Quad_Line0, DecaleTime, _Speed, "EaseOutQuad");
					}
				}
				DecaleTime += 150;
			}
			if(_FadeIn)
			{
				declare CMlLabel Label_Title <=> (Page.MainFrame.GetFirstChild("Label_Title")	as CMlLabel);
				Label_Title.Opacity = 0.;
				LibManialink_SetTargetOpacity(Label_Title, 1.0);
				LibManialink_PresetAnimInsert(Label_Title, DecaleTime, _Speed+300, "EaseLinear");

				declare Vec2[] Page_MenuButtons_ButtonPositions	for Page;
				declare CMlFrame ButtonsFrame <=> (Page.GetFirstChild("MenuButtons_ButtonsFrame")               as CMlFrame);
			}

		}

		main() {
			Init();
{{{MenuButtons::IncludeInMain()}}}
			while(True) {
				yield;
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
{{{MenuButtons::IncludeInWhile(False)}}}

				if(G_HideTime < Now && G_HideTime != -1)
				{
					HidePage();
					G_HideTime = -1;
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									SendCustomEvent("GotoPrevious", [""]);
								}
							}
						}
            case CMlScriptEvent::Type::KeyPress: {
              if (Event.KeyName == "T") {
                SendCustomEvent("Button_Vehicle10", [""]);
              }
            }
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "Back" : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case "Show" : {
									declare PreviousPage = Event.CustomEventData[1];
									if(PreviousPage == "NewMap" || PreviousPage == "Moods" || PreviousPage == "Enviro" || PreviousPage == "Fields" || PreviousPage == "Stadium" || PreviousPage == "Valley")
									{
										declare Vec2[] Page_MenuButtons_ButtonPositions	for Page;
										declare Real[] PosX;
										for(I, 0, Page_MenuButtons_ButtonPositions.count-1)
										{
											PosX.add(Page_MenuButtons_ButtonPositions[I].X-20.);
										}
										SetMenuPosX(PosX);
										LaunchTransition(True, 0., 0, True);
										LaunchTransitionHabillage(0., 0, 500, True);
									}
									else if(PreviousPage == "BrowseTracks")
									{
										declare Vec2[] Page_MenuButtons_ButtonPositions	for Page;
										declare Real[] PosX;
										for(I, 0, Page_MenuButtons_ButtonPositions.count-1)
										{
											PosX.add(Page_MenuButtons_ButtonPositions[I].X+240.);
										}
										SetMenuPosX(PosX);
										LaunchTransition(True, 0., 100, True);
										LaunchTransitionHabillage(0., 0, 500, True);
									}
									else                                   LaunchTransition(True, 0., 0);
									ShowPage();
								}
								case "Hide" : {
									declare NextPage = Event.CustomEventData[1];
									if(NextPage == "NewMap" || NextPage == "BrowseTracks" || NextPage == "Moods" || NextPage == "Enviro" || NextPage == "Fields" || NextPage == "Stadium" || NextPage == "Valley")
									{
										LaunchTransitionHabillage(30., 350, 500, False);
										HidePage();
									}
									else
									{
										HideMenu();
									}
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";

	return MLText;
}