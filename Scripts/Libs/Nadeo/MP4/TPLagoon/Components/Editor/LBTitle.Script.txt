#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font

Text Build() {
	//Maps
	declare Integer Count_InstancesMapsY = 1;
	declare Integer Count_InstancesMapsX = 4;
	declare Real	PosXFirstMaps        = -15.;
	declare Real	PosYFirstMaps        = 0.;
	declare Real	SizeXMaps            = 90.;
	declare Real	SizeYMaps            = 64.;
	declare Real	MarginY_Maps         = 2.5;
	declare Real	MarginX_Maps         = 2.5;

	declare Text	SubFont				 = Font::GetFontName("SubTitle");

	declare Text MLText = """
<manialink version="3" name="L_Title">

	<framemodel id="Frame_Maps">
		<quad id="Quad_Maps" halign="center" valign="center" size="{{{SizeXMaps}}} {{{SizeYMaps}}}"  pos="0 0" z-index="1" opacity="1.0" bgcolor="000" scriptevents="1" />
		<quad id="Quad_MapsIMG" halign="center" valign="center" size="{{{SizeXMaps - 1.}}} {{{SizeYMaps - 5.}}}"  pos="0 2" z-index="2" opacity="1.0" bgcolor="009"/>
		<label id="Label_Mood"  halign="center"   valign="center" text="Sun" style="TextButtonBig" pos="0 {{{-SizeYMaps / 2. + 2.}}}" z-index="2" textsize="2" size="{{{SizeXMaps - 4.}}}" opacity="1."/>
	</framemodel>
	<framemodel id="Frame_Button">
		<quad	id="Button_Quad"	halign="center" valign="center" size="40 10" z-index="-1" bgcolor="000" opacity="0.4" scriptevents="1"/>
		<label	id="Button_Label"	halign="center" valign="center" size="40 10" textfont="{{{SubFont}}}" text="BUTTON"/>
	</framemodel>

	<frame id="Frame_All">
		<frame id="Frame_Menu" pos="0 10" hidden="0">
			<frameinstance id="InterfaceDesigner"	modelid="Frame_Maps" pos="-50 0"/>
			<frameinstance id="GhostEditor"			modelid="Frame_Maps" pos="80 0"/>
		</frame>
	</frame>

	<script><!--
		{{{Manialink::GetIncludes()}}}

		{{{Manialink::Load()}}}
		declare Text[CMlControl]	G_ButtonTypesFromControl;

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,1);

			declare Frame_All <=> Page.GetFirstChild("Frame_All");
			Frame_All.RelativePosition_V3.X = 300.;
			LibManialink_SetTargetPosition(Frame_All, <0., 0.>);
			LibManialink_PresetAnim(Frame_All, 1200, "EaseOutQuad");
		}

		Text GetButtonTypeFromControl(CMlControl _Control)
		{
			return G_ButtonTypesFromControl[_Control];
		}

		Void Input_Click(Text _Instruction)
		{
		}

		Void Init()
		{
			declare Frame_InterfaceDesigner			<=> (Page.GetFirstChild("InterfaceDesigner")	as CMlFrame);
			declare InterfaceDesignerLabel			<=> (Frame_InterfaceDesigner.GetFirstChild("Label_Mood")	as CMlLabel);
			declare InterfaceDesignerIMG			<=> (Frame_InterfaceDesigner.GetFirstChild("Quad_MapsIMG") as CMlQuad);
			declare InterfaceDesignerQuad			<=>  Frame_InterfaceDesigner.GetFirstChild("Quad_Maps");
			InterfaceDesignerIMG.ChangeImageUrl("");
			G_ButtonTypesFromControl[InterfaceDesignerQuad] = "InterfaceDesigner";
			InterfaceDesignerLabel.SetText("INTERFACE DESIGNER");

			declare Frame_GhostEditor				<=> (Page			.GetFirstChild("GhostEditor")	as CMlFrame);
			declare GhostEditorLabel				<=> (Frame_GhostEditor	.GetFirstChild("Label_Mood")	as CMlLabel);
			declare GhostEditorIMG					<=> (Frame_GhostEditor	.GetFirstChild("Quad_MapsIMG") as CMlQuad);
			declare GhostEditorQuad					<=>  Frame_GhostEditor	.GetFirstChild("Quad_Maps");
			GhostEditorIMG.ChangeImageUrl("");
			G_ButtonTypesFromControl[GhostEditorQuad] = "GhostEditor";
			GhostEditorLabel.SetText("GHOST EDITOR");
		}

		main() {
			Init();
			ShowPage();

			while(True) {

				yield;
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									SendCustomEvent("GotoPrevious", [""]);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Button_Quad")
							{
								Input_Click(GetButtonTypeFromControl(Event.Control));
							}
							else if (Event.ControlId == "Quad_Maps")
							{
								declare Integer QuadId for Event.Control;
								SendCustomEvent("LaunchEditor", [""^ QuadId]);
							}
						}
						case CMlEvent::Type::MouseOver: {
						}
						case CMlEvent::Type::MouseOut: {
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.CustomEventType) {
								case "Show" : {
									ShowPage();
									SendCustomEvent("UpdateBarreSection", ["Editors"]);
								}
								case "Hide" : {
									EnableMenuNavigation(True,False,Null,0);
								}
								case "BarreClick" : {
									declare Text BarreClickId = Event.CustomEventData[0];
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}