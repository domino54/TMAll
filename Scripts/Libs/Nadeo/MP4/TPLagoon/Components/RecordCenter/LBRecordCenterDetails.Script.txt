#Include "Libs/Nadeo/Common/ManialinkTools/2DArrayCardBuilder.Script.txt"		as TwoDArrayCardBuilder
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 		as Font


#Const C_RecordsMaxCountPerLine	9
#Const C_RecordSize				<141.7, 9.2>
#Const C_PosFirstBuddy			<-70.9, 26.7>
#Const C_Margin_Buddy			<0.8, 0.4>

#Const C_ImgBase	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"

#Const C_ConsolePageUpPos		["Buddy" => <59.3, -67.5>, "You" => <-84.3, -67.5>]
#Const C_ConsolePageDownPos		["Buddy" => <83.7, -67.5>, "You" => <-59.9, -67.5>]

Text Build()
{
	TwoDArrayCardBuilder::Init(2, C_RecordsMaxCountPerLine, C_PosFirstBuddy, C_RecordSize, C_Margin_Buddy);
	DesignManialinks::Init();
	DesignManialinks::AddAction("Button_PageUp");
	DesignManialinks::AddAction("Button_PageDown"); // TODO : Corriger ce hack à l'avenir ? On doit ajouter à la main les actions pour L1 R1

	declare Text    IMG_FlecheTri			= C_ImgBase ^ "FlecheTri.dds";

	declare Text	IMG_StartLogo			= C_ImgBase ^ "StartLogo.dds";

	declare Text    IMG_IconSearch			= C_ImgBase ^ "Icon_Search.dds";
	declare Text    IMG_ContainerSearch		= C_ImgBase ^ "Container_Search.dds";
	declare Text    IMG_IconRefresh			= C_ImgBase ^ "Icon_Refresh.dds";
	declare Text    IMG_ContainerRefresh	= C_ImgBase ^ "Container_Refresh.dds";
	declare Text    IMG_ContainerScroll		= C_ImgBase ^ "Container_Scroll.dds";

	declare Text    IMG_Button_Scroll		= C_ImgBase ^ "Button_Scroll_h.dds";
	declare Text    IMG_Button_ScrollTen	= C_ImgBase ^ "Button_ScrollTen_h.dds";
	declare Text    IMG_Button_ScrollLast	= C_ImgBase ^ "Button_ScrollLast_h.dds";
	declare Text	MainFont	= Font::GetFontName("Main");
	declare Text	SubFont		= Font::GetFontName("SubTitle");

	declare ML =
	"""<manialink version="3" name="L_RecordCenterDetails">
	<framemodel id="Frame_ButtonRecordSort">
		<quad  id="Quad_ButtonRecordSort"  halign="center" valign="center"    size="38 8.0"   pos="0 -0.6" z-index="1" opacity="0.0" bgcolor="000" scriptevents="1" />
		<label id="Label_ButtonRecordSort" halign="center" valign="center" textfont="{{{SubFont}}}" text="WORLD" z-index="2" textsize="2" textcolor="fff" opacity="1."/>
		<quad id="Quad_Arrow"          halign="center" valign="center" size="3 3"  pos="8 -0.5" z-index="2" opacity="1." image="{{{IMG_FlecheTri}}}"  keepratio="Fit"/>
	</framemodel>

	<framemodel id="TwoDArrayCardBuilder_Card">

		<quad  id="Quad_Shadow"         halign="center" valign="center" z-index="-1" size="{{{C_RecordSize[0]}}} {{{C_RecordSize[1]}}}" opacity="0.2" bgcolor="000"/>
		<frame id="Card_All">
			<quad  id="Quad_Record"         halign="center" valign="center" z-index="-1" size="{{{C_RecordSize[0]}}} {{{C_RecordSize[1]}}}" opacity="0.0" bgcolor="fff"/>
			<quad  id="Quad_Select"         halign="center" valign="center" z-index="-1" size="{{{C_RecordSize[0]}}} {{{C_RecordSize[1]}}}" opacity="0.0" bgcolor="fff"/>

			<label id="Label_ChallengeUidDetails"	halign="left" valign="center" textfont="{{{SubFont}}}" pos="-64 0" z-index="2" textsize="2" textcolor="fff" opacity="1." text="A08 Russian Pursuit"/>
			<label id="Label_RecordTime"			halign="center" valign="center" textfont="{{{MainFont}}}" size="15 {{{C_RecordSize[1]}}}" textsize="2" pos="8 0" text="00:00.0"/>
			<label id="Label_RecordDetailsDiff"		halign="center" valign="center" textfont="{{{MainFont}}}" size="18 {{{C_RecordSize[1]}}}" textsize="2" pos="32 0" text="-00:00.0"/>
			<label id="Label_ElapsedTime"			halign="center" valign="center" textfont="{{{SubFont}}}" textsize="2" size="22 {{{C_RecordSize[1]}}}" pos="58 0" text="2mn ago"/>
		</frame>
	</framemodel>

	<framemodel id="Frame_SortButtons">
		<quad halign="center" valign="center"    size="{{{C_RecordSize[0]}}} 8.0"  z-index="1" opacity="0.6" bgcolor="111" scriptevents="1" />
		<frameinstance modelid="Frame_ButtonRecordSort" z-index="5" id="Frame_ButtonRecordSort0" hidden="0"/>
		<frameinstance modelid="Frame_ButtonRecordSort" z-index="5" id="Frame_ButtonRecordSort1" hidden="0"/>
		<frameinstance modelid="Frame_ButtonRecordSort" z-index="5" id="Frame_ButtonRecordSort2" hidden="0"/>
		<frameinstance modelid="Frame_ButtonRecordSort" z-index="5" id="Frame_ButtonRecordSort3" hidden="0"/>
	</framemodel>

	<frame id="Frame_All" pos="0 -4">
		<frame id="Frame_Menu">
			<label id="Label_HeaderTitle"  halign="left" valign="center" style="TextTitle1" pos="-124 42" z-index="2" textsize="4" textcolor="fff" opacity="1."/>
		</frame>

		<frame id="Frame_Filters">
			<frameinstance id="Frame_SortButtonsYou" 	modelid="Frame_SortButtons" pos="-70.9 36.6"/>
			<frameinstance id="Frame_SortButtonsBuddy" 	modelid="Frame_SortButtons" pos="71.7 36.6"/>
			<frame id="Frame_Records">
{{{TwoDArrayCardBuilder::ManialinkMainBody()}}}
			</frame>
		</frame>
		<frame id="Frame_RecordInfoYou"		pos="33.1 -42.5" z-index="1">
			<quad  halign="center" valign="top" pos="-105.0 -13.4" z-index="-1" size="40.6 24.5" opacity="0.4" bgcolor="000"/>
			{{{DesignManialinks::ManialinkScrollFrame(<-105.4, -24.6>, IMG_Button_Scroll, IMG_Button_ScrollTen, IMG_Button_ScrollLast, "", "ScrollYou")}}}
		</frame>
		<frame id="Frame_RecordInfoBuddy"	pos="176.7 -42.5" z-index="1">
			<quad  halign="center" valign="top" pos="-105.0 -13.4" z-index="-1" size="40.6 24.5" opacity="0.4" bgcolor="000"/>
			{{{DesignManialinks::ManialinkScrollFrame(<-105.4, -24.6>, IMG_Button_Scroll, IMG_Button_ScrollTen, IMG_Button_ScrollLast, "", "ScrollBuddy")}}}
		</frame>
		<frame id="NameYou" pos="-27 47">
			<quad	halign="center" valign="center" size="50 9.5" z-index="-1" bgcolor="000" opacity="0.7"/>
			<label	halign="center" valign="center" size="50 9.5" pos="0 0.5" textfont="{{{SubFont}}}" text="YOUR RECORDS" textcolor="fff" textsize="4"/>
		</frame>
		<frame id="NameBuddy" pos="27.8 47">
			<quad	halign="center" valign="center" size="50 9.5" z-index="-1" bgcolor="000" opacity="0.7"/>
			<label	id="Label_NameBuddy" halign="center" valign="center" size="50 9.5" pos="0 0.5" textfont="{{{SubFont}}}" text="$008N$22AE$33BR$44CP$55DS$66EO$77FN" textcolor="fff" textsize="4"/>
		</frame>
		<frame id="Frame_TotalWins" pos="-98.7 47">
			<quad	halign="center" valign="center" size="46 8" z-index="-1" bgcolor="000" opacity="0.4"/>
			<label	id="Label_TotalWins" halign="center" valign="center" size="46 8" pos="0 0.5" textfont="{{{SubFont}}}" text="TOTAL WINS : 13" textcolor="fff" textsize="3"/>
		</frame>
		<frame id="Frame_TotalLosses" pos="99.3 47">
			<quad	halign="center" valign="center" size="46 8" z-index="-1" bgcolor="000" opacity="0.4"/>
			<label	id="Label_TotalLosses" halign="center" valign="center" size="46 8" pos="0 0.5" textfont="{{{SubFont}}}" text="TOTAL LOSSES : 56" textcolor="fff" textsize="3"/>
		</frame>
		<frame id="Frame_Play" z-index="1" hidden="0">
			<frame id="Frame_RecordFinal" pos="0 -56" z-index="1">
				<quad  halign="center" valign="top" pos="0 0" z-index="-1" size="90 24.5" opacity="0.4" bgcolor="000"/>

				{{{DesignManialinks::ManialinkMainButtonLarge(<-23.9, -6.>, <47.8, 13.>,//L16N |Verb, infinitive| In a contextual menu, to start playing a game
					_("Play"), IMG_StartLogo, "", "Play")}}}
				{{{DesignManialinks::ManialinkFloatingButtonFrame(<25.5, 112.9>, _("Refresh"), "z-index=\"1\"", "Refresh")}}}

				<frame id="Frame_Search" pos="-17 113" z-index="1">
					<quad  halign="center" valign="center" pos="0. 0" size="46.8 7.02" opacity="1." image="{{{IMG_ContainerSearch}}}" id="Quad_Search" scriptevents="1"/>
					<quad  halign="center" valign="center" pos="18.7 0" z-index="1" size="4.4 4.4"     opacity="1." image="{{{IMG_IconSearch}}}" keepratio="Fit"/>
					<entry halign="left" style="TextCardSmall" textfont="{{{SubFont}}}" text="{{{_("Search")}}}...|" size="35.0 1.0" pos="-20.1 1.0" z-index="1" textprefix="$t" textsize="1." id="Entry_Search" scriptevents="1"/>
					<quad  halign="center" valign="center" pos="13.5 0" z-index="2" size="4 4" opacity="1." bgcolor="090" id="Quad_SearchCancel" keepratio="Fit" scriptevents="1" hidden="1"/>
				</frame>
			</frame>
		</frame>
		<quad id="Button_PageUp"   halign="center" valign="center" pos="{{{C_ConsolePageUpPos["Buddy"][0]}}} {{{C_ConsolePageUpPos["Buddy"][1]}}}" z-index="3" size="13.0 8.5"  opacity="1.0" keepratio="Fit" />
		<quad id="Button_PageDown" halign="center" valign="center" pos="{{{C_ConsolePageDownPos["Buddy"][0]}}} {{{C_ConsolePageDownPos["Buddy"][1]}}}" z-index="3" size="13.0 8.5"  opacity="1.0" keepratio="Fit" />
	</frame>

	<script><!--
		#Include "TextLib" as RecordCenterDetails_TextLib
		#Include "MathLib" as RecordCenterDetails_MathLib
		#Const C_SORTBY_MAPNAME       	1
		#Const C_SORTBY_RECORDTIME    	2
		#Const C_SORTBY_DIFFTIME      	3

		#Const C_LIST_OPPONENT      	0
		#Const C_LIST_PLAYER     		1

		#Const C_ARRAY_NOORDER			0
		#Const C_ARRAY_INCREASINGORDER	1
		#Const C_ARRAY_DECREASINGORDER	2

		#Const C_SortButtons			4

{{{TwoDArrayCardBuilder::Includes()}}}
{{{DesignManialinks::Includes()}}}
{{{DesignManialinks::Declares()}}}

		declare Integer[]				G_PlayerLists; // 1 => C_LIST_OPPONENT, 0 => C_LIST_PLAYER
		declare Integer[Integer]		G_PlayerIndexes; // C_LIST_OPPONENT => 1, C_LIST_PLAYER => 0
		declare Text 					G_BuddySelected;
		declare Text 					G_BuddyNameSelected;
		declare Integer					G_RecordIndex;
		declare Integer 				G_SelectedList;
		declare Integer 				G_SelectedFilter; // HACK
		declare Integer 				G_BuddyWins; // HACK
		declare Integer 				G_YourWins; // HACK
		declare Integer					G_LockInput;
		declare Integer[Integer]		G_Current_PageRecordDetailsList;
		declare Integer[Integer] 		G_MaxPagesRecords;
		declare Text[Text][][Integer] 	G_LoadedRecords;
		declare CMlFrame[Integer]		G_Frame_SortButtons;
		declare CMlFrame[Integer]		G_Frame_RecordInfo;

		declare Integer[Integer][Integer] G_EtatButtonRecordSort;
		declare Text[][Integer]			G_RecordsName;
		declare Integer[][Integer]		G_RecordsTime;
		declare Integer[][Integer]		G_RecordsDiffs;
		declare Integer[][Integer]		G_RecordsElapsedTimes;
		declare Text					G_Records_TextFilter;
		declare Integer[][Integer]		G_RecordsId;
		declare Integer[Integer]		G_SortCursor;

	Text RecordTimeToText(Integer _RecordTime)
	{
		declare Text RecordTime = RecordCenterDetails_TextLib::ToText(_RecordTime);
		// TODO : Mieux générer que ça pour les minutes
		declare Text Result = "";
		declare Integer DigitsNumber = RecordCenterDetails_TextLib::Length(RecordTime);
		for (AppendZerosIndex, 0, 5 - DigitsNumber)
		{
			Result ^= "0";
		}
		Result = Result ^ RecordTime;

		// Result est de la forme xxyyzz
		// => On le met sous xx:yy.zz
		Result = RecordCenterDetails_TextLib::SubString(Result, 0, 2) ^ ":" ^
				RecordCenterDetails_TextLib::SubString(Result, 2, 2) ^ "." ^
				RecordCenterDetails_TextLib::SubString(Result, 4, 2);
		return Result;
	}

	Void FakeRecords()
	{
		declare Text[] MapFileNames = [
										"Campaigns/TMCanyon/Green/B04.Map.Gbx",	"Campaigns/TMCanyon/Green/B05.Map.Gbx",	"Campaigns/TMCanyon/Green/B06.Map.Gbx",
										"Campaigns/TMCanyon/Green/B07.Map.Gbx",	"Campaigns/TMCanyon/Green/B08.Map.Gbx",	"Campaigns/TMCanyon/Green/B09.Map.Gbx",
										"Campaigns/TMCanyon/Green/B10.Map.Gbx",	"Campaigns/TMCanyon/Green/B11.Map.Gbx",	"Campaigns/TMCanyon/Green/B12.Map.Gbx",
										"Campaigns/TMCanyon/Green/B13.Map.Gbx",	"Campaigns/TMCanyon/Green/B14.Map.Gbx",	"Campaigns/TMCanyon/Green/B15.Map.Gbx",
										"Campaigns/TMCanyon/Blue/C01.Map.Gbx",	"Campaigns/TMCanyon/Blue/C02.Map.Gbx",	"Campaigns/TMCanyon/Blue/C03.Map.Gbx",
										"Campaigns/TMCanyon/Blue/C04.Map.Gbx",	"Campaigns/TMCanyon/Blue/C05.Map.Gbx",	"Campaigns/TMCanyon/Blue/C06.Map.Gbx",
										"Campaigns/TMCanyon/White/A01.Map.Gbx",	"Campaigns/TMCanyon/White/A02.Map.Gbx",	"Campaigns/TMCanyon/White/A03.Map.Gbx",
										"Campaigns/TMCanyon/White/A04.Map.Gbx",	"Campaigns/TMCanyon/White/A05.Map.Gbx",	"Campaigns/TMCanyon/White/A06.Map.Gbx",
										"Campaigns/TMCanyon/White/A07.Map.Gbx",	"Campaigns/TMCanyon/White/A08.Map.Gbx",	"Campaigns/TMCanyon/White/A09.Map.Gbx",
										"Campaigns/TMCanyon/White/A10.Map.Gbx",	"Campaigns/TMCanyon/White/A11.Map.Gbx",	"Campaigns/TMCanyon/White/A12.Map.Gbx",
										"Campaigns/TMCanyon/White/A13.Map.Gbx",	"Campaigns/TMCanyon/White/A14.Map.Gbx",	"Campaigns/TMCanyon/White/A15.Map.Gbx",
										"Campaigns/TMCanyon/Green/B01.Map.Gbx",	"Campaigns/TMCanyon/Green/B02.Map.Gbx",	"Campaigns/TMCanyon/Green/B03.Map.Gbx",
										"Campaigns/TMCanyon/Blue/C07.Map.Gbx",	"Campaigns/TMCanyon/Blue/C08.Map.Gbx",	"Campaigns/TMCanyon/Blue/C09.Map.Gbx",
										"Campaigns/TMCanyon/Blue/C10.Map.Gbx",	"Campaigns/TMCanyon/Blue/C11.Map.Gbx",	"Campaigns/TMCanyon/Blue/C12.Map.Gbx",
										"Campaigns/TMCanyon/Blue/C13.Map.Gbx",	"Campaigns/TMCanyon/Blue/C14.Map.Gbx",	"Campaigns/TMCanyon/Blue/C15.Map.Gbx",
										"Campaigns/TMCanyon/Red/D01.Map.Gbx", 	"Campaigns/TMCanyon/Red/D02.Map.Gbx",	"Campaigns/TMCanyon/Red/D03.Map.Gbx",
										"Campaigns/TMCanyon/Red/D04.Map.Gbx",	"Campaigns/TMCanyon/Red/D05.Map.Gbx",	"Campaigns/TMCanyon/Red/D06.Map.Gbx",
										"Campaigns/TMCanyon/Red/D07.Map.Gbx",	"Campaigns/TMCanyon/Red/D08.Map.Gbx",	"Campaigns/TMCanyon/Red/D09.Map.Gbx",
										"Campaigns/TMCanyon/Red/D10.Map.Gbx",	"Campaigns/TMCanyon/Red/D11.Map.Gbx",	"Campaigns/TMCanyon/Red/D12.Map.Gbx",
										"Campaigns/TMCanyon/Red/D13.Map.Gbx",	"Campaigns/TMCanyon/Red/D14.Map.Gbx",	"Campaigns/TMCanyon/Red/D15.Map.Gbx"
										];
		declare Text[] MapNames = [
		"B04", "B05", "B06", "B07", "B08", "B09", "B10", "B11", "B12", "B13", "B14", "B15", "C01", "C02", "C03", "C04", "C05", "C06",
		"A01", "A02", "A03", "A04", "A05", "A06", "A07", "A08", "A09", "A10", "A11", "A12", "A13", "A14", "A15", "B01", "B02", "B03",
		"C07", "C08", "C09", "C10", "C11", "C12", "C13", "C14", "C15", "D01", "D02", "D03", "D04", "D05", "D06", "D07", "D08", "D09",
		"D10", "D11", "D12", "D13", "D14", "D15"];
		declare Text[Text][]	RequestedBuddyRecords;
		declare	Text[Text][]	RequestedPlayerRecords;
		for (YourRecordsIndex, 0, G_YourWins - 1)
		{
			declare Text MapFileName = MapFileNames[YourRecordsIndex];
			declare Text MapName = MapNames[YourRecordsIndex];
			declare Text RecordTime = RecordCenterDetails_TextLib::ToText(RecordCenterDetails_MathLib::Rand(600, 6000));
			declare Text RecordTimeDiff = RecordCenterDetails_TextLib::ToText(RecordCenterDetails_MathLib::Rand(0, 200));
			declare Text RecordElapsedTime = RecordCenterDetails_TextLib::ToText(RecordCenterDetails_MathLib::Rand(0, 8949684));
			RequestedPlayerRecords.add(["MapFileName"		=> MapFileName,
										"Mapname"			=> MapName,
										"RecordTime"		=> RecordTime,
										"RecordTimeDiff"	=> RecordTimeDiff,
										"GhostUrl"			=> "blublublublub",
										"RecordElapsedTime"	=> RecordElapsedTime
										]);
		}
		for (BuddyRecordsIndex, 0, G_BuddyWins - 1)
		{
			declare Text MapFileName = MapFileNames[BuddyRecordsIndex];
			declare Text MapName = MapNames[BuddyRecordsIndex];
			declare Text RecordTime = RecordCenterDetails_TextLib::ToText(RecordCenterDetails_MathLib::Rand(600, 6000));
			declare Text RecordTimeDiff = RecordCenterDetails_TextLib::ToText(RecordCenterDetails_MathLib::Rand(0, 200));
			declare Text RecordElapsedTime = RecordCenterDetails_TextLib::ToText(RecordCenterDetails_MathLib::Rand(0, 8949684));
			RequestedBuddyRecords.add(["MapFileName"		=> MapFileName,
										"Mapname"			=> MapName,
										"RecordTime"		=> RecordTime,
										"RecordTimeDiff"	=> RecordTimeDiff,
										"GhostUrl"			=> "blublublublub",
										"RecordElapsedTime"	=> RecordElapsedTime
										]);
		}
		G_LoadedRecords = [	C_LIST_OPPONENT =>	RequestedBuddyRecords,
							C_LIST_PLAYER =>	RequestedPlayerRecords];
		G_Current_PageRecordDetailsList = [	C_LIST_OPPONENT =>	0,
											C_LIST_PLAYER =>	0];
		foreach(List => LoadedRecordList in G_LoadedRecords) {
			G_RecordsName[List]			= Text[];
			G_RecordsTime[List]			= Integer[];
			G_RecordsDiffs[List]		= Integer[];
			G_RecordsElapsedTimes[List]	= Integer[];
			G_RecordsId[List]			= Integer[];
			foreach (Index => Record in LoadedRecordList)
			{
				G_RecordsName[List] 		.add(Record["Mapname"]);
				G_RecordsTime[List] 		.add(RecordCenterDetails_TextLib::ToInteger(Record["RecordTime"]));
				G_RecordsDiffs[List] 		.add(RecordCenterDetails_TextLib::ToInteger(Record["RecordTimeDiff"]));
				G_RecordsElapsedTimes[List] .add(RecordCenterDetails_TextLib::ToInteger(Record["RecordElapsedTime"]));
				G_RecordsId[List]			.add(Index);
			}
		}
	}

	CMlFrame GetFrame_SortButtonsFromList(Integer _List)
	{
		if (!G_Frame_SortButtons.existskey(_List))
		{
			log(Now ^ ") DANGER : WRONG PARAM INTO GetFrame_SortButtonsFromList : " ^ _List^ " is not accepted");
			return Null;
		}
		return G_Frame_SortButtons[_List];
	}

	CMlFrame GetFrame_RecordInfoFromList(Integer _List)
	{
		if (!G_Frame_RecordInfo.existskey(_List))
		{
			log(Now ^ ") DANGER : WRONG PARAM INTO GetFrame_RecordInfoFromList : " ^ _List^ " is not accepted");
			return Null;
		}
		return G_Frame_RecordInfo[_List];
	}

	Integer GetListFromControl(CMlControl _Control, CMlFrame[Integer] _Frames, Text _ControlId)
	{
		foreach (List => Frame in _Frames)
		{
			if (Frame.GetFirstChild(_ControlId) == _Control) {
				return List;
			}
		}
		log(Now ^ ") DANGER : WRONG PARAM INTO GetListFromControl : " ^ _Control^ " is not accepted");
		return -1;
	}

	Integer GetListFromFrameSortButtons(CMlControl _Control, Text _ControlId)
	{
		foreach (List => Frame in G_Frame_SortButtons)
		{
			foreach(Control in Frame.Controls)
			{
				if ((Control is CMlFrame))
				{
					declare CMlFrame FrameSort  <=> (Control as CMlFrame);
					if (FrameSort.GetFirstChild(_ControlId) == _Control) {
						return List;
					}
				}
			}
		}
		log(Now ^ ") DANGER : WRONG PARAM INTO GetListFromFrameSortButtons : " ^ _Control^ " is not accepted");
		return -1;
	}

	Void UpdatePages()
	{
		// Cas console avec L1/R1
		declare Integer CurrPage				= G_Current_PageRecordDetailsList[G_SelectedList] + 1;
		declare Integer MaxPages				= G_MaxPagesRecords[G_SelectedList] + 1;
		declare CMlQuad Button_ScrollL			<=> (Page.GetFirstChild("Button_PageUp")			as CMlQuad);
		declare CMlQuad Button_ScrollR			<=> (Page.GetFirstChild("Button_PageDown")			as CMlQuad);
		switch(G_SelectedList) {
			case C_LIST_OPPONENT: {
				Button_ScrollL.RelativePosition_V3 = {{{C_ConsolePageUpPos["Buddy"]}}};
				Button_ScrollR.RelativePosition_V3 = {{{C_ConsolePageDownPos["Buddy"]}}};
			}
			case C_LIST_PLAYER: {
				Button_ScrollL.RelativePosition_V3 = {{{C_ConsolePageUpPos["You"]}}};
				Button_ScrollR.RelativePosition_V3 = {{{C_ConsolePageDownPos["You"]}}};
			}
		}
		if (CurrPage <= 1)
		{
			Button_ScrollL.Opacity = 0.;
		} else {
			Button_ScrollL.Opacity = 1.;
		}
		if (CurrPage >= MaxPages)
		{
			Button_ScrollR.Opacity = 0.;
		} else {
			Button_ScrollR.Opacity = 1.;
		}
		// ---
	}

	Void TwoDArrayCardBuilder_HideCard(CMlFrame _Card)
	{
		_Card.GetFirstChild("Card_All").Hide();
	}

	Void TwoDArrayCardBuilder_ShowCard(CMlFrame _Card)
	{
		declare Integer Index_X for _Card;
		declare Integer Index_Y for _Card;
		declare Integer List = G_PlayerLists[Index_X];
		declare Integer CurrentIndex = G_RecordsId[List][Index_Y + G_Current_PageRecordDetailsList[List] * {{{C_RecordsMaxCountPerLine}}}];

		declare MapName 		 		= G_RecordsName[List][CurrentIndex];
		declare ThisChallengeMapName    = MapName;
		declare ThisRecordTime          = G_RecordsTime[List][CurrentIndex];
		declare ThisRecordDiff          = G_RecordsDiffs[List][CurrentIndex];
		declare ThisRecordElapsedTime   = G_RecordsElapsedTimes[List][CurrentIndex];

		declare Frame_Record				<=> (_Card			.GetFirstChild("Card_All") as CMlFrame);
		declare Label_RecordTime         	<=> (Frame_Record	.GetFirstChild("Label_RecordTime") as CMlLabel);
		declare Label_RecordDetailsDiff     <=> (Frame_Record	.GetFirstChild("Label_RecordDetailsDiff") as CMlLabel);
		declare Label_ChallengeUidDetails   <=> (Frame_Record	.GetFirstChild("Label_ChallengeUidDetails") as CMlLabel);
		declare Label_ElapsedTime         	<=> (Frame_Record	.GetFirstChild("Label_ElapsedTime") as CMlLabel);

		Label_ChallengeUidDetails	.Value  	= ThisChallengeMapName;
		Label_RecordTime			.Value 		= RecordTimeToText(ThisRecordTime);
		Label_RecordDetailsDiff		.Value 		= RecordTimeToText(ThisRecordDiff);
		//Label_ElapsedTime			.Value 		= SortTools_CalculateElapsedTime(ThisRecordElapsedTime);
		Frame_Record.Show();
	}

	Void TwoDArrayCardBuilder_ShowLockedCard(CMlFrame _Card)
	{

	}

Void TwoDArrayCardBuilder_UnFocusCard(CMlFrame _Card)
{
	declare Quad_Control <=> (_Card.GetFirstChild("Quad_Record") as CMlQuad);
	Quad_Control.BgColor = <1., 1., 1.>;
	Quad_Control.Opacity = 0.;
}

Void TwoDArrayCardBuilder_FocusCard(CMlFrame _Card)
{
	declare Quad_Control <=> (_Card.GetFirstChild("Quad_Record") as CMlQuad);
	Quad_Control.BgColor = <1., 1., 1.>;
	Quad_Control.Opacity = 0.4;
}

Void TwoDArrayCardBuilder_UnSelectCard(CMlFrame _Card)
{
	declare CMlQuad Quad_Control <=> (_Card.GetFirstChild("Quad_Select") as CMlQuad);
	Quad_Control.BgColor = <0.6, 0.6, 1.>;
	Quad_Control.Opacity = 0.;

	declare Quad_Focus <=> (_Card.GetFirstChild("Quad_Record") as CMlQuad);
	Quad_Focus.Show();
	G_RecordIndex = -1;
	DesignManialinks_MainButton_Deactivate("Play");
	UpdatePages();
}

Void TwoDArrayCardBuilder_SelectCard(CMlFrame _Card)
{
	declare CMlQuad Quad_Control <=> (_Card.GetFirstChild("Quad_Select") as CMlQuad);
	Quad_Control.BgColor = <0.6, 0.6, 1.>;
	Quad_Control.Opacity = 0.8;

	declare Quad_Focus <=> (_Card.GetFirstChild("Quad_Record") as CMlQuad);
	Quad_Focus.Hide();

	declare Integer Index_X for _Card;
	declare Integer Index_Y for _Card;

	G_SelectedList = G_PlayerLists[Index_X];
	G_RecordIndex = Index_Y + (G_Current_PageRecordDetailsList[G_SelectedList] * {{{C_RecordsMaxCountPerLine}}});
	DesignManialinks_MainButton_Activate("Play");
	UpdatePages();
}

{{{TwoDArrayCardBuilder::Declares()}}}

		Void UpdateDisplayFromRecordDetails()
		{
			declare Integer[][] CardStates;
			foreach(ListKey => List in G_PlayerLists)
			{
				declare RecordsName 	 	= G_RecordsName[List];
				CardStates.add(Integer[]);

				for (i, 0, {{{C_RecordsMaxCountPerLine - 1}}})
				{
					declare RecordIndex = i + (G_Current_PageRecordDetailsList[List] * {{{C_RecordsMaxCountPerLine}}});

					if(!G_RecordsId[List].existskey(RecordIndex) || !RecordsName.existskey(G_RecordsId[List][RecordIndex]))
					{
						CardStates[ListKey].add(C_TwoDArrayCardBuilder_NonExistentState);
					} else {
						CardStates[ListKey].add(C_TwoDArrayCardBuilder_Available);
					}
				}
			}

			declare Integer ListIndex = 0;
			if (G_PlayerIndexes.existskey(G_SelectedList)) {
				ListIndex = G_PlayerIndexes[G_SelectedList];
			}
			TwoDArrayCardBuilder_Update(CardStates, ListIndex, 0);
			G_RecordIndex = G_Current_PageRecordDetailsList[G_SelectedList] * {{{C_RecordsMaxCountPerLine}}};
			declare Text[Integer] ScrollFromList = [C_LIST_OPPONENT => "ScrollBuddy", C_LIST_PLAYER => "ScrollYou"];
			foreach (List in G_PlayerLists)
			{
				G_MaxPagesRecords[List] 				= ((G_RecordsId[List].count - 1) / {{{C_RecordsMaxCountPerLine}}} );
				declare Integer CurrPage				= G_Current_PageRecordDetailsList[List] + 1;
				declare Integer MaxPages				= G_MaxPagesRecords[List] + 1;
				DesignManialinks_ScrollButtons_Update(ScrollFromList[List], CurrPage, MaxPages);
			}

			UpdatePages();


			(Page.GetFirstChild("Label_NameBuddy") as CMlLabel).Value	= G_BuddyNameSelected;
			(Page.GetFirstChild("Label_TotalWins") as CMlLabel).Value	= "WINS : " ^ RecordCenterDetails_TextLib::ToText(G_RecordsId[C_LIST_PLAYER].count);
			(Page.GetFirstChild("Label_TotalLosses") as CMlLabel).Value	= "LOSSES : " ^ RecordCenterDetails_TextLib::ToText(G_RecordsId[C_LIST_OPPONENT].count);
		}

		Void SetRecordDetailsFilter(Text _Filter, Text[] _Records_Name, Integer _List)
		{
			G_Records_TextFilter = _Filter;
			declare CMlQuad Quad_SearchCancel <=> (Page.GetFirstChild("Quad_SearchCancel") as CMlQuad);
			if(_Filter == "")
			{
				Quad_SearchCancel.Hide();
			}
			else
			{
				Quad_SearchCancel.Show();
			}

			declare Integer[] RecordsId;
			G_Current_PageRecordDetailsList[_List] = 0;

			foreach (NameIndex => Name in _Records_Name)
			{
				declare Boolean IsSymbol = RecordCenterDetails_TextLib::Find(_Filter, Name, False, False);
				if(IsSymbol) RecordsId.add(NameIndex);
			}

			G_RecordsId[_List] = RecordsId;
			G_Current_PageRecordDetailsList[_List] = 0;
		}

		Void SetRecordDetailsFilter(Text _Filter, Integer _List)
		{
			SetRecordDetailsFilter(_Filter, G_RecordsName[_List], _List);
		}

		Void SetRecordDetailsFilter(Text _Filter)
		{
			foreach (List in G_PlayerLists)
			{
				SetRecordDetailsFilter(_Filter, G_RecordsName[List], List);
			}
		}

		Void Input_Select()
		{
			if (!G_RecordsId[G_SelectedList].existskey(G_RecordIndex)) {
				return;
			}
			declare Text[Text][] 			RequestedRecordsResume 	for Page;
			SendCustomEvent("RecordPlayTrack", [G_LoadedRecords[G_SelectedList][G_RecordsId[G_SelectedList][G_RecordIndex]]["MapFileName"], "", "", ""]);
		}

		Void Input_Cancel()
		{
			SendCustomEvent("RecordCenter_Back", [""]);
		}

		Void Input_PageUp(Integer _List)
		{
			if(G_Current_PageRecordDetailsList[_List] > 0)
			{
				G_Current_PageRecordDetailsList[_List] -= 1;
				G_RecordIndex = G_Current_PageRecordDetailsList[_List] * {{{C_RecordsMaxCountPerLine}}};
				UpdateDisplayFromRecordDetails();
			}
		}

		Void Input_PageDown(Integer _List)
		{
			if(G_Current_PageRecordDetailsList[_List] < G_MaxPagesRecords[_List])
			{
				G_Current_PageRecordDetailsList[_List] += 1;
				G_RecordIndex = G_Current_PageRecordDetailsList[_List] * {{{C_RecordsMaxCountPerLine}}};
				UpdateDisplayFromRecordDetails();
			}
		}


		Void Input_Action1()
		{
		}

		Void OverSortButtons()
		{
			foreach(List in G_PlayerLists)
			{
				declare Frame_ButtonRecordSort = G_Frame_SortButtons[List];
				for(I, 0, C_SortButtons - 1)
				{
					declare CMlFrame Frame_ButtonRecordSort <=> (Frame_ButtonRecordSort.GetFirstChild("Frame_ButtonRecordSort" ^ I) as CMlFrame);
					declare CMlQuad  Quad_Record <=> (Frame_ButtonRecordSort.GetFirstChild("Quad_ButtonRecordSort") as CMlQuad);

					if (G_SortCursor[List] == I)
					{
						Quad_Record.Opacity = 0.8;
					} else {
						Quad_Record.Opacity = 0.;
					}
				}
			}
		}

		Void CheckSorts()
		{
			//Sort
			foreach(List in G_PlayerLists)
			{
				declare Integer[] New_RecordsId = G_RecordsId[List];
				for(QuadId, 0, 3)
				{
					declare Integer SortState = G_EtatButtonRecordSort[List][QuadId];
					if(SortState != C_ARRAY_NOORDER)
					{
						New_RecordsId.clear();
						declare Integer[] Records_SwapArray;
						switch(QuadId) {
							case 0: {
								//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsName[List], SortState);
							}
							case 1: {
								//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsTime[List], SortState);
							}
							case 2: {
								//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsDiffs[List], SortState);
							}
							case 3: {
								//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsElapsedTimes[List], SortState);
							}
						}
						foreach(Index in Records_SwapArray)
						{
							declare Integer NewId = Index;
							if(G_RecordsId[List].exists(NewId))
							{
								New_RecordsId.add(NewId);
							}
						}
					}
				}
				G_RecordsId[List] = New_RecordsId;
				G_Current_PageRecordDetailsList[List] = 0;
				UpdateDisplayFromRecordDetails();
			}
		}

		Void SortRecords(Integer _QuadId, Integer _List)
		{
			declare CMlFrame Frame_SortButtons <=> GetFrame_SortButtonsFromList(_List);

			//Arrows
			for(I, 0, 3)
			{
				declare CMlFrame Frame_ButtonRecordSort <=> (Frame_SortButtons.GetFirstChild("Frame_ButtonRecordSort"^I)	as CMlFrame);
				declare CMlLabel Label_ButtonRecordSort <=> (Frame_ButtonRecordSort.GetFirstChild("Label_ButtonRecordSort")	as CMlLabel);
				declare CMlQuad Quad_ButtonRecordSort   <=> (Frame_ButtonRecordSort.GetFirstChild("Quad_ButtonRecordSort")	as CMlQuad);
				declare CMlQuad Quad_Arrow              <=> (Frame_ButtonRecordSort.GetFirstChild("Quad_Arrow")	as CMlQuad);
				if(I == _QuadId)
				{
					switch(G_EtatButtonRecordSort[_List][I])
					{
						case C_ARRAY_NOORDER: {
							G_EtatButtonRecordSort[_List][I] = C_ARRAY_INCREASINGORDER;
							Quad_Arrow.Show();
							Quad_Arrow.RelativeRotation = 180.;
						}
						case C_ARRAY_INCREASINGORDER: {
							G_EtatButtonRecordSort[_List][I] = C_ARRAY_DECREASINGORDER;
							Quad_Arrow.Show();
							Quad_Arrow.RelativeRotation = 0.;
						}
						case C_ARRAY_DECREASINGORDER: {
							G_EtatButtonRecordSort[_List][I] = C_ARRAY_INCREASINGORDER;
							Quad_Arrow.Show();
							Quad_Arrow.RelativeRotation = 180.;
						}
					}
				}
				else
				{
					G_EtatButtonRecordSort[_List][I] = C_ARRAY_NOORDER;
					Quad_Arrow.Hide();

				}
			}


			//Sort
			declare Integer[] New_RecordsId;
			declare Integer SortState = G_EtatButtonRecordSort[_List][_QuadId];
			if(SortState != C_ARRAY_NOORDER)
			{
				New_RecordsId.clear();
				declare Integer[] Records_SwapArray;
				switch(_QuadId) {
					case 0: {
						//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsName[_List], SortState);
					}
					case 1: {
						//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsTime[_List], SortState);
					}
					case 2: {
						//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsDiffs[_List], SortState);
					}
					case 3: {
						//Records_SwapArray = SortTools_GetSortSwapArray(G_RecordsElapsedTimes[_List], SortState);
					}
				}
				foreach(Index in Records_SwapArray)
				{
					declare Integer NewId = Index;
					if(G_RecordsId[_List].exists(NewId))
					{
						New_RecordsId.add(NewId);
					}
				}

				G_RecordsId[_List] = New_RecordsId;
			}
			else
			{
				SetRecordDetailsFilter(G_Records_TextFilter, _List);
			}

			UpdateDisplayFromRecordDetails();
		}

	Void IntermediateInit()
	{
		G_RecordIndex								= 0;
		G_SelectedList								= C_LIST_OPPONENT;
		G_SelectedFilter 							= 1;
		G_SortCursor								= [	C_LIST_OPPONENT	=> -1,
														C_LIST_PLAYER	=> -1];
		declare Text[][Integer] ButtonRecord     = [C_LIST_OPPONENT => ["TRACK", "TIME", "DIFF.", "DATE"],
													C_LIST_PLAYER   => ["TRACK", "TIME", "DIFF.", "DATE"]];
		declare Vec2[][Integer] ButtonRecordPos  = [C_LIST_OPPONENT => [<-51.7, 0.6>, <7.7, 0.6>, <32.0, 0.6>, <58.0, 0.6>],
													C_LIST_PLAYER   => [<-51.7, 0.6>, <7.7, 0.6>, <32.0, 0.6>, <58.0, 0.6>]];
		declare Vec2[][Integer] ButtonRecordSize = [C_LIST_OPPONENT => [<38., 8.0>, <20., 8.0>, <20., 8.0>, <25.7, 8.0>],
													C_LIST_PLAYER   => [<38., 8.0>, <20., 8.0>, <20., 8.0>, <25.7, 8.0>]];
		foreach(List in G_PlayerLists)
		{
			declare CMlFrame Frame_SortButtons <=> GetFrame_SortButtonsFromList(List);
			G_EtatButtonRecordSort[List] = Integer[Integer];
			for(I, 0, 3)
			{
				declare CMlFrame Frame_ButtonRecordSort <=> (Frame_SortButtons.GetFirstChild("Frame_ButtonRecordSort"^I)	as CMlFrame);
				declare CMlLabel Label_ButtonRecordSort       <=> (Frame_ButtonRecordSort.GetFirstChild("Label_ButtonRecordSort")	as CMlLabel);
				declare CMlQuad Quad_ButtonRecordSort         <=> (Frame_ButtonRecordSort.GetFirstChild("Quad_ButtonRecordSort")	as CMlQuad);
				declare Integer QuadId for Quad_ButtonRecordSort;
				QuadId = I;
				declare CMlQuad Quad_Arrow                <=> (Frame_ButtonRecordSort.GetFirstChild("Quad_Arrow")	as CMlQuad);
				if (I == 0) {
					Quad_Arrow.Show();
					Quad_Arrow.RelativeRotation = 180.;
				} else {
					Quad_Arrow.Hide();
				}
				Frame_ButtonRecordSort.RelativePosition_V3 = ButtonRecordPos[List][I];
				Label_ButtonRecordSort.SetText(ButtonRecord[List][I]);
				Quad_ButtonRecordSort.Size = ButtonRecordSize[List][I];
				declare Real LabelWidth = Label_ButtonRecordSort.ComputeWidth(Label_ButtonRecordSort.Value, True);
				G_EtatButtonRecordSort[List][I] = C_ARRAY_NOORDER;
				Quad_Arrow.RelativePosition_V3.X = LabelWidth -2.;
			}
			G_EtatButtonRecordSort[List][0] = C_ARRAY_INCREASINGORDER;
			G_Current_PageRecordDetailsList[List] = 0; // TODO : Harmoniser avec le Record Center, qui va de 1 à n. Celui-là va de 0 à n-1
		}
		FakeRecords();
		CheckSorts();
	}

	Void Init() {


		G_Frame_SortButtons =	[	C_LIST_OPPONENT => (Page.GetFirstChild("Frame_SortButtonsBuddy") as CMlFrame),
									C_LIST_PLAYER => (Page.GetFirstChild("Frame_SortButtonsYou") as CMlFrame)];
		G_Frame_RecordInfo =	[	C_LIST_OPPONENT => (Page.GetFirstChild("Frame_RecordInfoBuddy") as CMlFrame),
									C_LIST_PLAYER => (Page.GetFirstChild("Frame_RecordInfoYou") as CMlFrame)];

		IntermediateInit();
		G_PlayerLists								= [C_LIST_PLAYER, C_LIST_OPPONENT];
		G_PlayerIndexes								= [C_LIST_PLAYER => 0, C_LIST_OPPONENT => 1];

		TwoDArrayCardBuilder_Init();

		// PARTIE HACK
		FakeRecords();
		// -----

		UpdateDisplayFromRecordDetails();
	}

		main()
		{
			Init();

			declare CTaskResult 	RecordsTaskResult 		for Page;
			declare Boolean 				RecordsTaskResultLoaded	for Page;
			declare Text[Text][]			RequestedPlayerRecords 	for Page;
			declare Text[Text][] 			RequestedBuddyRecords 	for Page;
			RecordsTaskResultLoaded 	= False;

			declare Integer	M_LockInput;
			declare Integer	M_Prev_PageRecordsList;
			declare Text	Prev_Name;
			declare Boolean	UpdatePages;

			while(True)
			{
				yield;

				if(!PageIsVisible && PendingEvents.count == 0) continue;
				DesignManialinks_Loop();
				foreach(Event in PendingEvents)
				{
					switch(Event.Type) {
						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Up: {
									if (G_RecordIndex % {{{C_RecordsMaxCountPerLine}}} == 0)
									{
										TwoDArrayCardBuilder_SetRunningState(False);
										G_SortCursor[G_SelectedList] = 0;
										OverSortButtons();
									}
								}
								case CMlEvent::EMenuNavAction::Down: {
									if (!TwoDArrayCardBuilder_IsRunning()) {
										TwoDArrayCardBuilder_SetRunningState(True);
										G_SortCursor[G_SelectedList] = -1;
										OverSortButtons();
									}
								}
								case CMlEvent::EMenuNavAction::Right : {
									if (!TwoDArrayCardBuilder_IsRunning())
									{
										G_SortCursor[G_SelectedList] += 1;
										if (G_SortCursor[G_SelectedList] > 3) {
											if (G_SelectedList == C_LIST_PLAYER)
											{
												G_SortCursor[G_SelectedList] = -1;
												G_SelectedList = C_LIST_OPPONENT;
												G_SortCursor[G_SelectedList] = 0;
											} else {
												G_SortCursor[G_SelectedList] = 3;
											}
										}
										OverSortButtons();
									}
								}
								case CMlEvent::EMenuNavAction::Left : {
									if (!TwoDArrayCardBuilder_IsRunning())
									{
										G_SortCursor[G_SelectedList] -= 1;
										if (G_SortCursor[G_SelectedList] < 0) {
											if (G_SelectedList == C_LIST_OPPONENT)
											{
												G_SortCursor[G_SelectedList] = -1;
												G_SelectedList = C_LIST_PLAYER;
												G_SortCursor[G_SelectedList] = 3;
											} else {
												G_SortCursor[G_SelectedList] = 0;
											}
										}
										OverSortButtons();
									}
								}
								case CMlEvent::EMenuNavAction::PageUp : {
									Input_PageUp(G_SelectedList);
								}
								case CMlEvent::EMenuNavAction::PageDown : {
									Input_PageDown(G_SelectedList);
								}
								case CMlEvent::EMenuNavAction::Select : {
									if (TwoDArrayCardBuilder_IsRunning())
									{
										Input_Select();
									} else {
										SortRecords(G_SortCursor[G_SelectedList], G_SelectedList);
									}
								}
								case CMlEvent::EMenuNavAction::Cancel : {
									Input_Cancel();
								}
							}
							UpdatePages = True;
						}
						case CMlEvent::Type::EntrySubmit: {
							declare CMlEntry Label_Search    <=> (Event.Control as CMlEntry);
							SetRecordDetailsFilter(Label_Search.Value);
							CheckSorts();
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Play")
							{
								Input_Select();
							}
							else if (Event.ControlId == "Quad_ButtonRecordSort")
							{
								declare Integer QuadId for Event.Control;
								SortRecords(QuadId, GetListFromFrameSortButtons(Event.Control, Event.ControlId));
							}
							else if (Event.ControlId == "ScrollYou_ScrollL" || Event.ControlId == "ScrollBuddy_ScrollL")
							{
								Input_PageUp(GetListFromControl(Event.Control, G_Frame_RecordInfo, Event.ControlId));
							}
							else if (Event.ControlId == "ScrollYou_ScrollR" || Event.ControlId == "ScrollBuddy_ScrollR")
							{
								Input_PageDown(GetListFromControl(Event.Control, G_Frame_RecordInfo, Event.ControlId));
							}
							else if (Event.ControlId == "Refresh")
							{
								SendCustomEvent("GetServers", ["RecordCenterDetails"]);
							}
							else if (Event.ControlId == "Quad_Search")
							{
								declare CMlEntry Entry_Search    <=> (Page.GetFirstChild("Entry_Search")	    as CMlEntry);
								Entry_Search.TextFormat = CMlEntry::ETextFormat::Basic;
								Entry_Search.StartEdition();
							}
							else if (Event.ControlId == "Quad_SearchCancel")
							{
								declare CMlEntry Entry_Search    <=> (Page.GetFirstChild("Entry_Search")	    as CMlEntry);
								Entry_Search.Value = "";
								SetRecordDetailsFilter("");
								CheckSorts();
							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "Quad_ButtonRecordSort")
							{
								declare CMlQuad  Quad_Record <=> (Event.Control as CMlQuad);
								Quad_Record.Opacity = 0.8;
							}
							else if (Event.ControlId == "Quad_Search")
							{
								declare CMlEntry Entry_Search    <=> (Page.GetFirstChild("Entry_Search")	    as CMlEntry);
								Entry_Search.TextColor = <0.3, 0.7, 1.0>;
							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "Quad_ButtonRecordSort")
							{
								declare CMlQuad  Quad_Record <=> (Event.Control as CMlQuad);
								Quad_Record.Opacity = 0.;
							}
							else if (Event.ControlId == "Quad_Search")
							{
								declare CMlEntry Entry_Search    <=> (Page.GetFirstChild("Entry_Search")	    as CMlEntry);
								Entry_Search.TextColor = <1.0, 1.0, 1.0>;
							}
						}
						case CMlEvent::Type::PluginCustomEvent :
						{
							switch(Event.CustomEventType)
							{
								case "Show":
								{
									EnableMenuNavigation(True, False, Null, 1);
									SendCustomEvent("UpdateBarreSection", ["RecordCenterDetails"]);
									DesignManialinks_Show();
								}
								case "Hide":
								{
									EnableMenuNavigation(False, False, Null, 1);
									SendCustomEvent("DetachPage", ["RecordCenterDetails"]);
								}
								// Load the data in the table to display them
								case "BuddyLoaded":
								{
									G_BuddySelected		= Event.CustomEventData[0];
									G_BuddyNameSelected	= Event.CustomEventData[2];
									G_SelectedFilter	= RecordCenterDetails_TextLib::ToInteger(Event.CustomEventData[1]);
									G_BuddyWins			= RecordCenterDetails_TextLib::ToInteger(Event.CustomEventData[3]);
									G_YourWins			= RecordCenterDetails_TextLib::ToInteger(Event.CustomEventData[4]);

									G_LoadedRecords[C_LIST_OPPONENT] 	= RequestedBuddyRecords;
									G_LoadedRecords[C_LIST_PLAYER] 		= RequestedPlayerRecords;
									G_Current_PageRecordDetailsList[C_LIST_OPPONENT] 	= 0;
									G_Current_PageRecordDetailsList[C_LIST_PLAYER] 		= 0;
									//G_SelectedList = 0;

									IntermediateInit();
									UpdateDisplayFromRecordDetails();
								}

								// Load the data in the table to display them
								case "GetRecordsResume":
								{
									SendCustomEvent("GetRecordsResume", [""^G_SelectedFilter, Event.CustomEventData[1]]);
								}
	
								case "PluginRecordsLoaded":
								{
									SendCustomEvent("PluginRecordsLoaded", Text[]);
								}
								case "ChangeName":
								{
									declare PlayerName = Event.CustomEventData[0];
									//L16N Main title when using the record center to challenge your buddy's best score on a map
									declare Text VersusText = RecordCenterDetails_TextLib::Compose( _("|Duel|Versus %1"), PlayerName);
									declare Label_Player   <=> (Page.MainFrame.GetFirstChild("Label_Player") as CMlLabel);
									Label_Player.Value = VersusText;
								}
							}
						}
					}
				}
				TwoDArrayCardBuilder_Loop();
				if (UpdatePages) {
					UpdatePages();
					UpdatePages = False;
				}

				if (TwoDArrayCardBuilder_HasDoubleClicked())
				{
					Input_Select();
				}
			}
		}
	--></script>
</manialink>""";

	return ML;
}