#Const C_ImgBase	""
#Const C_VideoDefault		"file://Media/Video/TPLagoon/LagoonAmbiance1.webm"
 
Text Build() {
	declare Text MLText = """
<manialink version="3" name="L_Background">
	<frame id="Frame_All" z-index="-80">
		<quad id="Quad_Background" halign="center" valign="center" size="320 180" bgcolor="000"/>
	</frame>
	
	
	<script><!--
		#Include "TextLib" as Background_TextLib

		declare CVideo[Text]	G_Videos;
		declare CMlQuad[Text]	G_VideoQuads;
	
		Void Load(Text _Name, Text _Path) { // TODO : Ajouter un destroy (pas urgent)
			declare V = Video.CreateVideo(_Path, True, True);
			declare Q = (Page.GetFirstChild(_Name) as CMlQuad);
			Q.Image = V.Image;
			//log("Q: " ^ Q);
			//log("V.Image: " ^ V.Image ^" | _Path: "^_Path);
			
			G_Videos[_Name] 			= V;
			G_VideoQuads[_Name]			= Q;
			G_VideoQuads[_Name].Hide();
		}


		Void UpdateBackGroundImg(Text _Background)
		{
			declare CMlQuad Quad_Background <=> (Page.GetFirstChild("Quad_Background")	as CMlQuad);
			Quad_Background.ChangeImageUrl(_Background);
		}
		
		Void StartVideo(Text _Background)
		{
			Load("Quad_Background", _Background);
			G_Videos["Quad_Background"].Play();
			G_VideoQuads["Quad_Background"].Show();
		}

		Void UpdateBackGround(Text _Background)
		{
			declare Boolean _IsVideo;
			declare Text[] Extensionfile = Background_TextLib::Split(".", _Background);
			if (Extensionfile.count == 0) {
				return;
			}
			_IsVideo = (Extensionfile[Extensionfile.count - 1] == "webm");
			if (_IsVideo) {
				StartVideo(_Background);
			} else {
				UpdateBackGroundImg(_Background);
			}
		}

		Void CloseBgFolder()
		{
			EnableMenuNavigation(True,False,Null,0);
		}


		Void Init()
		{
			SendCustomEvent("SendBackground", [""]);
		}

		Void UpdateParallax()
		{
			if(MouseX == -1000.) return;
			declare CMlFrame Frame_All  <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
			declare Real NewPosX = MouseX/340.;
			declare Real NewPosY = MouseY/340.;
			Frame_All.RelativePosition_V3 = <NewPosX,NewPosY>;
			//log("MouseX: " ^ MouseX);
			//log("MouseY: " ^ MouseY);
		}

		main() {
			Init();
			
			while(True) {
				
				yield;
				if (!PageIsVisible && PendingEvents.count == 0) continue;
				//UpdateParallax();

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Select : {
									//SendCustomEvent("GotoPage", ["StartDemo"]);
								}
								case CMlEvent::EMenuNavAction::Cancel : {
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.CustomEventType) {
								case "UpdateBackGround" : {
									declare Text Background = Event.CustomEventData[0];
									UpdateBackGround(Background);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}