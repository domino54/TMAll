#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"					as Colors
#Include "TextLib" 												as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"		as DesignManialinks


#Const C_ImgBase				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"
#Const C_ImgMedal				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Medal-picto.dds"
#Const C_ImgMedalEmpty			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Medal-picto-empty.dds"
#Const C_LabelRankDecalY		7.
#Const C_SizeProfil				<25., 6.5>
#Const C_SizeManiaCredit		<31., 6.5>

Text Build() {
	DesignManialinks::Init();
	declare Integer Count_InstancesY         = 4;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = -64.8;
	declare Real	PosYFirstQuad            = 28.1;
	declare Real	SizeXQuad                = 83.2;
	declare Real	SizeYQuad                = 19.6;
	declare Real	MarginY_Button           = 0.4;
	declare Real	MarginX_Button           = 4.0;

	declare Integer Count_InstancesNewY      = 3;
	declare Integer Count_InstancesNewX      = 1;
	declare Real	PosXFirstNew             = 160.0;
	declare Real	PosYFirstNew             = -12.8;
	declare Real	SizeXNew                 = 84.0;
	declare Real	SizeXNewImg              = 33.5;
	declare Real	SizeYNew                 = 15.7;
	declare Real	MarginY_New              = 0.4;
	declare Real	MarginX_New              = 4.0;

	declare Text    IMGLogo_Profil           = C_ImgBase ^ "Logo_Profil.dds";

	declare Text ColorTextYellow       = TextLib::ColorToText(Colors::GetColor("Yellow"));
	declare Text ColorTextWhite        = TextLib::ColorToText(Colors::GetColor("White"));
	
	declare Vec2 SizeNewInfo = <140., 155.>;
	declare Real MargeNewInfo = 10.;

	declare Text MainFont = Font::GetFontName("Main");
	declare Text SubFont  = Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_NewsInfo">
	<frame id="Frame_GlobalNews" pos="0 0" z-index="31">
		<frame id="Frame_NewInfo" pos="0 0" hidden="1" z-index="2">
			<quad id="Quad_NewBg" halign="center" valign="center" size="320. 180." pos="0. 0."   opacity="0.7" bgcolor="000" z-index="-2" scriptevents="1"/>
			<frame id="Frame_NewInfoContent" pos="0 -5">
				<frame id="Frame_Title" z-index="1" pos="{{{-SizeNewInfo.X/2.-7.5}}} {{{SizeNewInfo.Y/2.+17-8.}}}" scale="0.8" hidden="1">
					<quad halign="center" valign="top" size="1.2  10." pos="-2.2 1.2" opacity="1." bgcolor="fff"/>
					<label id="Label_Title"  halign="left"   valign="top" textprefix="$t" text="{{{//L16N Noun, in the main menu, designates all the articles written by players and makers of the game to give info about updates and competitions, over "Community"
						_("Flash")}}}" textfont="{{{MainFont}}}"       pos="0 2"  z-index="5" textsize="12" textcolor="fff"/>
				</frame>
				<quad halign="center" valign="center" size="{{{SizeNewInfo.X}}} {{{SizeNewInfo.Y}}}" pos="-10. 0." z-index="-1" opacity="1.0" bgcolor="000" scriptevents="1"/>
				<quad id="Quad_NewInfoImg" halign="center" valign="top" size="{{{SizeNewInfo.X-MargeNewInfo}}} {{{SizeNewInfo.Y-MargeNewInfo}}}" pos="-10. {{{SizeNewInfo.Y/2-MargeNewInfo/2.}}}" opacity="1.0" bgcolor="000" keepratio="Fit" z-index="1"/>
				<label id="Label_Date" halign="left"valign="top" textfont="{{{MainFont}}}" pos="{{{-SizeNewInfo.X/2.-5.}}} {{{-MargeNewInfo+8.}}}"  z-index="4" textsize="1.0" textcolor="ddd" size="{{{SizeNewInfo.X-MargeNewInfo}}}" maxline="14"/>
				<label id="Label_NewTitle" halign="left"valign="top" textprefix="$t" textfont="{{{MainFont}}}" pos="{{{-SizeNewInfo.X/2.-5.}}} {{{-MargeNewInfo+3.}}}"  z-index="4" textsize="3.0" textcolor="fff" size="{{{SizeNewInfo.X-MargeNewInfo}}}" maxline="2" autonewline="1"/>
				<quad id="Quad_NewTitle" halign="left" valign="top" size="100.2  0.2" pos="{{{-SizeNewInfo.X/2.-5.}}} {{{-MargeNewInfo-1.5}}}" opacity="1." bgcolor="fff" z-index="2"/>
				<frame id="Frame_Body" z-index="4" pos="{{{-SizeNewInfo.X/2.-5.}}} {{{-MargeNewInfo-7}}}">
					<label id="Label_NewBody" textprefix="$t" textfont="{{{MainFont}}}" textsize="1.5" textcolor="fff" size="{{{SizeNewInfo.X-MargeNewInfo}}} 43" autonewline="1"/>
					<quad id="Quad_NewCadre" size="{{{SizeNewInfo.X-MargeNewInfo}}} 45" bgcolor="000" scriptevents="1" />
				</frame>
				<quad id="Quad_Up"   halign="center" valign="center" pos="57.5 -10" style="Icons128x128_1" substyle="BackFocusable" rot="90"  size="5 5" scriptevents="1"/>
				<quad id="Quad_Down" halign="center" valign="center" pos="57.5 -60" style="Icons128x128_1" substyle="BackFocusable" rot="-90" size="5 5" scriptevents="1"/>
				<frame z-index="4">
					{{{DesignManialinks::ManialinkMainButtonLarge(<15.,(-SizeNewInfo.Y/2.+MargeNewInfo+5.)>, <37., 11.>, _("More info"), "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/StartLogo.dds", "", "NewInfo_Button")}}}
					{{{DesignManialinks::ManialinkSecondaryButtonLarge(<-25.,(-SizeNewInfo.Y/2.+MargeNewInfo+5.)>, <37., 11.>, _("Repost"), "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Repost.dds", "", "Action1", "NewInfo_Repost")}}}
				</frame>
			</frame>
		</frame>
	</frame>

	<script><!--
		#Include "TextLib" as NewInfo_TextLib

		{{{Manialink::GetIncludes()}}}
		{{{DesignManialinks::Includes()}}}
		
		{{{Manialink::Load()}}}
		
		declare Integer G_SectionFocus;
		declare Integer G_SectionsMax;
		declare Integer G_HideTime;
		declare Vec3    G_Private_MenuButtons_SectionColor;
		declare Real[]  G_TitlePosX;
		declare Integer G_CheckTime; // En cas de potentiel softlock du menu

		declare Integer              G_ZonePlayerMax;
		declare Integer              G_NewsIndexFocus;
		{{{DesignManialinks::Declares()}}}

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,1);
			//DesignManialinks_Show();
		}

		Void AnimOpacity(CMlControl _Control, Real _Opacity)
		{
			if (_Control is CMlLabel) {
				declare Label <=> (_Control as CMlLabel);
				Label.Opacity = 0.;
			}
			else if (_Control is CMlQuad) {
				declare Quad <=> (_Control as CMlQuad);
				Quad.Opacity = 0.;
			}
			LibManialink_SetTargetOpacity(_Control, 1.);
			LibManialink_PresetAnimInsert(_Control, 0, 200, "EaseInSine");
		}

		Void ShowNewsInfo(Integer _Index)
		{
			declare Text[Text][] News_PostList for Page;
			if (!News_PostList.existskey(_Index) || News_PostList[_Index].count <= 0) return;

			declare CMlFrame Frame_NewInfo        <=> (Page.MainFrame.GetFirstChild("Frame_NewInfo")	        as CMlFrame);
			declare CMlFrame Frame_NewInfoContent <=> (Page.MainFrame.GetFirstChild("Frame_NewInfoContent")	    as CMlFrame);
			declare CMlFrame Frame_Body  		  <=> (Page.MainFrame.GetFirstChild("Frame_Body") 				as CMlFrame);
			declare CMlQuad  Quad_NewInfoImg      <=> (Frame_NewInfo.GetFirstChild("Quad_NewInfoImg")		    as CMlQuad);
			declare CMlQuad  Quad_NewTitle        <=> (Frame_NewInfo.GetFirstChild("Quad_NewTitle")		        as CMlQuad);
			declare CMlQuad  Quad_Up              <=> (Frame_NewInfo.GetFirstChild("Quad_Up")		        as CMlQuad);
			declare CMlQuad  Quad_Down            <=> (Frame_NewInfo.GetFirstChild("Quad_Down")		        as CMlQuad);
			declare CMlQuad  Quad_NewCadre        <=> (Frame_NewInfo.GetFirstChild("Quad_NewCadre")		        as CMlQuad);
			declare CMlLabel Label_NewTitle       <=> (Frame_NewInfo.GetFirstChild("Label_NewTitle")		    as CMlLabel);
			declare CMlLabel Label_NewBody        <=> (Frame_NewInfo.GetFirstChild("Label_NewBody")		        as CMlLabel);
			declare CMlLabel Label_Date           <=> (Frame_NewInfo.GetFirstChild("Label_Date")		        as CMlLabel);
			Frame_NewInfo.Show();
			
			LibManialink_AnimStop(Frame_NewInfoContent);
			Frame_NewInfoContent.RelativePosition.X = -150.;
			LibManialink_SetTargetPosition(Frame_NewInfoContent, <0., -5.>);
			LibManialink_PresetAnimInsert(Frame_NewInfoContent, 0, 200, "EaseOutCubic");
			foreach(Control in Frame_NewInfoContent.Controls)
			{
				if (Control is CMlFrame) {
					declare Frame <=> (Control as CMlFrame);
					foreach(SubControl in Frame.Controls)
					{
						AnimOpacity(SubControl, 1.);
					}
				}
				else
				{
					AnimOpacity(Control, 1.);
				}
			}

			Quad_NewInfoImg.ChangeImageUrl(News_PostList[_Index]["media_url"]);
			
			Label_NewTitle.SetText(News_PostList[_Index]["headline"]);
			Quad_NewTitle.Size.X = Label_NewTitle.ComputeWidth(Label_NewTitle.Value);
			if (Label_NewTitle.ValueLineCount > 1) {
				Quad_NewTitle.Hide();
			} else {
				Quad_NewTitle.Show();
			}
			Label_Date.SetText(NewInfo_TextLib::Compose(_("%1. Shared from $<$08f%2$>"),
				News_PostList[_Index]["date_diff"],
				News_PostList[_Index]["location_from"]));
			
			Label_NewBody.SetText(News_PostList[_Index]["body"]);
			Quad_NewCadre.Size = <Label_NewBody.Size.X, Label_NewBody.ComputeHeight(Label_NewBody.Value)>;

			if(Label_NewBody.ValueLineCount <= 13)
			{
				Quad_Up.Hide();
				Quad_Down.Hide();
				Frame_Body.ClipWindowActive = False;
			    Frame_Body.ScrollActive = False;
			}
			else
			{
				Quad_Up.Show();
				Quad_Down.Show();
				Frame_Body.ClipWindowActive = True;
			    Frame_Body.ClipWindowRelativePosition = <Label_NewBody.Size.X/2.,-Label_NewBody.Size.Y/2.>;
			    Frame_Body.ClipWindowSize = <Label_NewBody.Size.X,Label_NewBody.Size.Y>;
				
			    Frame_Body.ScrollActive = True;
			    Frame_Body.ScrollOffset = <0.,0.>;
			    Frame_Body.ScrollMax = <0.,Label_NewBody.ComputeHeight(Label_NewBody.Value)-Label_NewBody.Size.Y>;
			    Frame_Body.ScrollMin = <0.,0.>;
			}
		}

		Void HideNewsInfo()
		{
			EnableMenuNavigation(True,False,Null,0);
			declare CMlFrame Frame_NewInfo  <=> (Page.MainFrame.GetFirstChild("Frame_NewInfo")	as CMlFrame);
			Frame_NewInfo.Hide();
			SendCustomEvent("NewsHidden", Text[]);
		}

		Void HidePage()
		{
			SendCustomEvent("DetachPage", ["NewsInfo"]);
		}

		Void Select_MoreInfo()
		{
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
			declare Text[Text][] News_PostList for Page;
			if (News_PostList.existskey(G_NewsIndexFocus)) {
				SendCustomEvent("News_Click", [""^News_PostList[G_NewsIndexFocus]["id"]]);
			}
		}

		Void QuadUp()
		{
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
			declare CMlFrame Frame_Body <=> (Page.MainFrame.GetFirstChild("Frame_Body") as CMlFrame);
			Frame_Body.Scroll(<0., -2.>);
		}

		Void QuadDown()
		{
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
			declare CMlFrame Frame_Body <=> (Page.MainFrame.GetFirstChild("Frame_Body") as CMlFrame);
			Frame_Body.Scroll(<0., 2.>);
		}
		
		Void Select_Repost()
		{
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
			declare Text[Text][] News_PostList for Page;
			if (News_PostList.existskey(G_NewsIndexFocus)) {
				SendCustomEvent("News_Repost", [""^News_PostList[G_NewsIndexFocus]["id"]]);
			}
		}
		
		main() {
			//Init();
			//ShowPage();

			declare Text PlayerZone = "";
			G_HideTime         = -1;

			while(True) {
				yield;
				if (!PageIsVisible && PendingEvents.count == 0) continue;
				LibManialink_AnimLoop();
				DesignManialinks_Loop();

				if(G_HideTime < Now && G_HideTime != -1)
				{
					HidePage();
					G_HideTime = -1;
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									HideNewsInfo();
								}
								case CMlEvent::EMenuNavAction::Select : {
									Select_MoreInfo();
								}
								case CMlEvent::EMenuNavAction::Action1 : {
									Select_Repost();

								}
								case CMlEvent::EMenuNavAction::Up : {
									declare CMlQuad  Quad_Up   <=> (Page.MainFrame.GetFirstChild("Quad_Up")   as CMlQuad);
									if(Quad_Up.Visible)   QuadUp();
								}
								case CMlEvent::EMenuNavAction::Down : {
									declare CMlQuad  Quad_Down <=> (Page.MainFrame.GetFirstChild("Quad_Down") as CMlQuad);
									if(Quad_Down.Visible) QuadDown();
								}
								case CMlEvent::EMenuNavAction::Left : {
									
								}
								case CMlEvent::EMenuNavAction::Right : {
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Quad_NewBg")
							{
								HideNewsInfo();
							}
							else if (Event.ControlId == "NewInfo_Button")
							{
								Select_MoreInfo();
							}
							else if (Event.ControlId == "NewInfo_Repost")
							{
								Select_Repost();
							}
							else if (Event.ControlId == "Quad_Up")
							{
								QuadUp();
							}
							else if (Event.ControlId == "Quad_Down")
							{
								QuadDown();
							}
						}
						case CMlEvent::Type::MouseOver: {
							if(G_HideTime > Now) continue;
							Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 1, 0.0);
							
						}
						case CMlEvent::Type::MouseOut: {
							if(G_HideTime > Now) continue;
							
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.CustomEventType) {
								case "Show" : {
									G_HideTime = -1;
									ShowPage();
								}
								case "Hide" : {
									declare Text NextPage = Event.CustomEventData[0];
									EnableMenuNavigation(False,False,Null,0);
									HidePage();
								}
								case "ShowNewsInfo" : {
									declare Integer IndexNew = NewInfo_TextLib::ToInteger(Event.CustomEventData[0]);
									declare Text[Text][] News_PostList for Page;
									if (News_PostList.existskey(IndexNew) && News_PostList[IndexNew].count > 0) {
										G_NewsIndexFocus = IndexNew;
										EnableMenuNavigation(True,False,Null,2);
										ShowNewsInfo(IndexNew);
									}
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
""";
	
	return MLText;
}