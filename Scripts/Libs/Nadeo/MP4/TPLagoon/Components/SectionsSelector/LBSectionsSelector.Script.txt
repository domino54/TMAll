#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"					as Colors
#Include "TextLib" 												as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"		as DesignManialinks
#Include "Libs/Nadeo/MP4/Common/Prompt.Script.txt"					as Prompt


#Const C_ImgBase				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"
#Const C_ImgMedal				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Medal-picto.dds"
#Const C_ImgMedalEmpty			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Medal-picto-empty.dds"
#Const C_LabelRankDecalY		7.
#Const C_SizeProfil				<25., 6.5>
#Const C_SizeManiaCredit		<31., 6.5>

#Const C_NotFixedLogoSections	["Solo", "Multiplayer"]
//#Const C_NotFixedLogoSections	[""]

Text Build() {
	DesignManialinks::Init();
	declare Integer Count_InstancesY         = 4;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = -64.8;
	declare Real	PosYFirstQuad            = 28.1;
	declare Real	SizeXQuad                = 83.2;
	declare Real	SizeYQuad                = 19.6;
	declare Real	MarginY_Button           = 0.4;
	declare Real	MarginX_Button           = 4.0;

	declare Integer Count_InstancesNewY      = 3;
	declare Integer Count_InstancesNewX      = 1;
	declare Real	PosXFirstNew             = 160.0;
	declare Real	PosYFirstNew             = -12.8;
	declare Real	SizeXNew                 = 84.0;
	declare Real	SizeXNewImg              = 33.5;
	declare Real	SizeYNew                 = 15.7;
	declare Real	MarginY_New              = 0.4;
	declare Real	MarginX_New              = 4.0;

	declare Text    IMGLogo_Profil           = C_ImgBase ^ "Logo_Profil.dds";

	//declare Text    IMGEchelonBase           = C_ImgBase ^ "Echelons/Echelon_";
	declare Text    IMGEchelonBase           = "file://Media/Manialinks/Common/Echelons/";
	
	//declare Text ImgLogo for LocalUser;

	declare Text ColorTextYellow       = TextLib::ColorToText(Colors::GetColor("Yellow"));
	declare Text ColorTextWhite        = TextLib::ColorToText(Colors::GetColor("White"));

	declare Text BgImg = C_ImgBase ^ "ToDelete/UI Lagoon 1C.jpg";
	
	declare Vec2 SizeNewInfo = <140., 155.>;
	declare Real MargeNewInfo = 10.;

	declare Text MainFont = Font::GetFontName("Main");
	declare Text SubFont  = Font::GetFontName("SubTitle");
	DesignManialinks::AddAction("Button_Action2");

	declare Text MLText = """
<manialink version="3" name="L_SectionsSelector">
	<framemodel id="Frame_Button">
		<quad id="Quad_Section"         halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="30 0" z-index="1" opacity="0.7" bgcolor="000" scriptevents="1" />
		<quad id="Quad_SectionColor"    halign="left"   valign="center" size="1.8 {{{SizeYQuad}}}"  pos="{{{30+SizeXQuad/2.}}} 0" z-index="1" opacity="0.9" bgcolor="090" scriptevents="1" />
		<quad id="Quad_SectionImg"      halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="2" keepratio="Fit"/>
		<label id="Label_Echelon"       halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="3" text="" textfont="{{{MainFont}}}" textsize="9" />
		<label id="Label_SectionImg"	halign="center"	valign="center" size="15 15"  pos="1.5 1" z-index="3" text="0" textsize="10" textfont="{{{MainFont}}}" opacity="0"/>
		<label id="Label_Section"		halign="right"	valign="center" size="51.5 10" pos="67 0.8" textprefix="$t" textfont="{{{MainFont}}}" z-index="2" textsize="8" textcolor="fff"/>
		
		<label id="Label_Remaining"	    halign="right"	valign="center" size="55 2" textfont="{{{SubFont}}}" text="65 medals remaining" pos="13 5.4" z-index="2" textsize="2" textcolor="fff" opacity="0"/>
	</framemodel>

{{{Prompt::ManialinkFrameModels(""" halign="right" valign="center" size="51.5 2" pos="23.2 -0.9" textsize="1.14" textprefix="$t"  textfont="{{{SubFont}}}" """)}}}

	<framemodel id="Frame_New">
		<quad id="Quad_News"      halign="right" valign="center" size="{{{SizeXNew}}} {{{SizeYNew}}}"     pos="0 0" z-index="1" opacity="0.6" bgcolor="900" scriptevents="1" />
		<quad id="Quad_NewsImg"   halign="left"  valign="center" size="{{{SizeXNewImg}}} {{{SizeYNew}}}"  pos="{{{-SizeXNew}}} 0" z-index="2" opacity="1." bgcolor="000" keepratio="Fit"/>
		<quad id="Quad_NewImg"    halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="2" opacity="1.0" bgcolor="009" style="Icons128x128_1"/>
		<label id="Label_New"     halign="left"   valign="center" textfont="{{{SubFont}}}" pos="-51.4 0.2" z-index="2" textsize="2" autonewline="1" maxline="3" size="46" textcolor="fff" text=""/>
	</framemodel>


	<frame id="Frame_All">
		<frame id="Frame_Menu">
			<frame id="Frame_Header" pos="-109 35" hidden="1">
				<quad id="Quad_HeaderImg" halign="center" valign="center" size="23.0 23.0"  pos="-35 40" z-index="3" opacity="1.0" bgcolor="009" style="Icons128x128_1" substyle="Vehicles"/>
				<label id="Label_HeaderTitle"  halign="left" valign="center" style="TextTitle1" pos="-19 42" z-index="2" textsize="13" textcolor="fff" opacity="1."/>
				<label id="Label_HeaderSubTitle"  halign="left" valign="center" style="TextTitle1" pos="-24 36" z-index="2" textsize="2" textcolor="fff" opacity="0."/>
			</frame>

			<frame id="Frame_Profile" pos="143 79.0" z-index="1">
				<quad id="Button_Action2" halign="center" valign="center" pos="-8.2 0" size="{{{C_SizeProfil.Y/0.9}}} {{{C_SizeProfil.Y/0.9}}}" z-index="1"  opacity="1.0" image="{{{IMGLogo_Profil}}}" hidden="0"/>
				<quad id="Quad_LogoProfil" halign="center" valign="center" pos="-8.2 0" size="{{{C_SizeProfil.Y/1.4}}} {{{C_SizeProfil.Y/1.4}}}" z-index="1"  opacity="1.0" image="{{{IMGLogo_Profil}}}" hidden="0"/>
				<quad id="Quad_Profile"   halign="center" valign="center" size="{{{C_SizeProfil.X}}} {{{C_SizeProfil.Y}}}" opacity="0." bgcolor="000" scriptevents="1"/>
				<label id="Label_Profile" halign="center" valign="center" pos="2.2 0" textfont="{{{SubFont}}}" z-index="1" textsize="2" textcolor="fff" textprefix="$t" textemboss="1" text="{{{//L16N Noun, on the main menu, designates the options to modify the player's description
			_("Profile")
			}}}"/>
				<frame id="Frame_MouseOver" z-index="2" hidden="1">
					<quad id="Quad_Up"		halign="center"	valign="top"	size="{{{C_SizeProfil.X}}} 0.4" pos="0 {{{C_SizeProfil.Y/2.}}}"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Down"	halign="center"	valign="bottom"	size="{{{C_SizeProfil.X}}} 0.4" pos="0 -{{{C_SizeProfil.Y/2.}}}"	opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Left"	halign="left"	valign="center"	size="0.4 {{{C_SizeProfil.Y}}}" pos="-{{{C_SizeProfil.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Right"	halign="right"	valign="center"	size="0.4 {{{C_SizeProfil.Y}}}" pos="{{{C_SizeProfil.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>
				</frame>
				<frame pos="{{{C_SizeProfil.X/2.}}} {{{-C_SizeProfil.Y/2.-1.8}}}">
					<quad halign="right" valign="top"    size="{{{C_SizeProfil.X}}} 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="3  0.2" pos="0 0"              opacity="1." bgcolor="fff"/>
				</frame>
			</frame>

			<frame id="Frame_ManiaCredit" pos="139.3 -79.3" z-index="1" hidden="1">
				<quad id="Quad_ManiaCredit"   halign="center" valign="center" size="{{{C_SizeManiaCredit.X}}} {{{C_SizeManiaCredit.Y}}}" opacity="0.7" bgcolor="000" scriptevents="1" />
				<label id="Label_ManiaCredit" halign="center" valign="center" textfont="{{{SubFont}}}" z-index="1" textsize="2" textcolor="fff" textprefix="$t" text="{{{//L16N Noun, on the main menu, specific term for the staff roll
			_("Maniacredits")
			}}}"/>
				<frame id="Frame_MouseOver" z-index="2" hidden="1">
					<quad id="Quad_Up"		halign="center"	valign="top"	size="{{{C_SizeManiaCredit.X}}} 0.4" pos="0 {{{C_SizeManiaCredit.Y/2.}}}"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Down"	halign="center"	valign="bottom"	size="{{{C_SizeManiaCredit.X}}} 0.4" pos="0 -{{{C_SizeManiaCredit.Y/2.}}}"	opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Left"	halign="left"	valign="center"	size="0.4 {{{C_SizeManiaCredit.Y}}}" pos="-{{{C_SizeManiaCredit.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Right"	halign="right"	valign="center"	size="0.4 {{{C_SizeManiaCredit.Y}}}" pos="{{{C_SizeManiaCredit.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>

				</frame>
				<frame pos="{{{C_SizeManiaCredit.X/2.}}} {{{-C_SizeManiaCredit.Y/2.-1.8}}}">
					<quad halign="right" valign="top"    size="{{{C_SizeManiaCredit.X}}} 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="3  0.2" pos="0 0"              opacity="1." bgcolor="fff"/>
				</frame>
			</frame>

	""";
	for(I,0,Count_InstancesY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstQuad - IndexY*SizeYQuad - IndexY*MarginY_Button*1.;
		for(J,0,Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstQuad + IndexX*SizeXQuad + IndexX*MarginX_Button*1.;
			MLText^="""
			<frame id="Frame_ButtonAnim{{{I}}}">
				<frameinstance modelid="Frame_Button" pos="{{{PosnX}}} {{{PosnY}}}" z-index="5" id="Frame_Instance{{{I}}}{{{J}}}" hidden="1"/>

				<frame id="Frame_Rank{{{I}}}" pos="{{{PosnX + 44.}}} {{{PosnY - 11.2}}}" z-index="6" hidden="0">
					{{{Prompt::ManialinkMainBody("Rank" ^ I)}}}
				</frame>
				
			</frame>
			""";
		}
	}
	MLText^="""
			<frame id="Frame_Habillage">
				<frame id="Habillage_Menu_Up" pos="-77  38.5">
					<quad halign="right" valign="center" size="2.2 0.7" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="0.7 2.2" opacity="1." bgcolor="fff"/>
				</frame>
				<frame id="Habillage_Menu_Down" pos="8.5  -43.79">
					<quad halign="right" valign="top" size="85 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="6  0.2" pos="0 0" opacity="1." bgcolor="fff"/>
				</frame>
			</frame>

		</frame>
	</frame>
	<frame id="Frame_GlobalNews" pos="0 0" z-index="31">
		<frame id="Frame_News" pos="0 0" z-index="3" hidden="1">
			<frame id="Frame_Title" pos="{{{PosXFirstNew - SizeXNew}}} 13.7">
				<quad halign="center" valign="top" size="1.2  13.2" pos="-3.9 0.2" opacity="1." bgcolor="fff"/>
				<label id="Label_Title"  halign="left"   valign="top" textprefix="$t" text="{{{//L16N Noun, in the main menu, designates all the articles written by players and makers of the game to give info about updates and competitions, over "Community"
					_("Flash")}}}" textfont="{{{MainFont}}}"       pos="0 2"  z-index="5" textsize="12" textcolor="fff" textemboss="1"/>
				<label id="Label_Title2" halign="left"   valign="top" textprefix="$t" text="{{{//L16N Noun, in the main menu, represents all the players contributing to this game, under "News"
					_("Community")}}}" textfont="{{{MainFont}}}" pos="0 -9" z-index="5" textsize="7" textcolor="fff" textemboss="1"/>
				<frame id="Frame_LineDown" pos="{{{SizeXNew}}} -67.9">
					<quad halign="right" valign="top"    size="{{{SizeXNew}}} 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="7  0.2"  opacity="1." bgcolor="fff"/>
				</frame>
			</frame>
	""";
	for(I,0,Count_InstancesNewY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstNew - IndexY*SizeYNew - IndexY*MarginY_New*1.;
		for(J,0,Count_InstancesNewX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstNew + IndexX*SizeXNew + IndexX*MarginX_New*1.;
			MLText^="""
		<frame id="Frame_NewAnim{{{I}}}">
			<frameinstance modelid="Frame_New" pos="{{{PosnX}}} {{{PosnY}}}" z-index="5" id="Frame_New{{{I}}}" hidden="0"/>
		</frame>
		""";
		}
	}
	MLText^="""
		</frame>
	</frame>

	<script><!--
		#Include "TextLib" as TextLib

		#Const C_HideTransitionTime		1000
		#Const C_NotFixedLogoSections	{{{dump(C_NotFixedLogoSections)}}}
		#Const C_ColorMedals			["Author" => {{{Colors::GetColor("GreenMaster")}}} , "Gold" =>  {{{Colors::GetColor("GoldShiny")}}} , "Silver" =>  {{{Colors::GetColor("SilverShiny")}}},
										"Bronze" =>  {{{Colors::GetColor("BronzeShiny")}}} , "NoMedal" => <0., 0., 0.>]

		{{{Manialink::GetIncludes()}}}
		{{{DesignManialinks::Includes()}}}
		{{{Prompt::Includes()}}}
		
		{{{Manialink::Load()}}}
		{{{Prompt::Declares()}}}
		
		declare Integer G_SectionFocus;	
		declare Integer G_SectionLastFocus;	
		declare Integer G_NewsFocus;		
		declare Integer G_SectionsMax;		
		declare Integer G_NewsMax;		
		declare Integer G_HideTime;
		declare Vec3    G_Private_MenuButtons_SectionColor;
		declare Real[]  G_TitlePosX;
		declare Integer G_CheckTime; // En cas de potentiel softlock du menu

		declare Integer              G_ZonePlayerMax;
		declare Integer              G_NewsIndexSelect;
		{{{DesignManialinks::Declares()}}}

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,1);
			SendCustomEvent("UpdateTaskBar", ["SectionsSelector"]);
			DesignManialinks_Show();
		}

		CMlFrame FrameInstanceForRanking(Text _RankingName)
		{
			declare Text[] Sections_Name           for Page;

			for(I, 0, Sections_Name.count - 1)
			{
				if (Sections_Name[I] == _RankingName) {
					return (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0") as CMlFrame);
				}
			}
			return Null;
		}

		Text Get_SectionName(Integer _Index)
		{
			declare Text[] SectionsName = ["Solo", "Multiplayer"];
			if(SectionsName.existskey(_Index)) return SectionsName[_Index];
			return "";
		}

		Void SetRanking()
		{
			declare Text[Text]		Ranking_ZoneScores		for Page;
			declare Text[][Text]	Ranking_ZoneTexts		for Page;
			declare Text			Ranking_PromotionMedal	for Page;
			declare Text[Text]		Ranking_RemainingPoints	for Page;
			if (Ranking_PromotionMedal == "") {
				SendCustomEvent("SectionsSelector_UpdateRanking", Text[]);
				return;
			}
			declare Solo_FrameInstance			<=> FrameInstanceForRanking("Solo");
			if (Solo_FrameInstance != Null && Ranking_ZoneTexts.existskey("Solo")) {
				declare Solo_Medal_Ranking				<=> (Solo_FrameInstance.GetFirstChild("Quad_SectionImg") as CMlQuad);
				declare Solo_Label_Remaining			<=> (Solo_FrameInstance.GetFirstChild("Label_Remaining") as CMlLabel);

				Prompt_Update("Rank0", Ranking_ZoneTexts["Solo"]);

				//Solo_Medal_Ranking.Colorize = C_ColorMedals[Ranking_PromotionMedal];
				if(Ranking_PromotionMedal != "NoMedal")
				{
					Solo_Medal_Ranking.ChangeImageUrl({{{dump(C_ImgMedal)}}});
					Solo_Medal_Ranking.Colorize = C_ColorMedals[Ranking_PromotionMedal];
					Solo_Medal_Ranking.Opacity	= 1.;
				} else {
					Solo_Medal_Ranking.ChangeImageUrl({{{dump(C_ImgMedalEmpty)}}});
					Solo_Medal_Ranking.Colorize = C_ColorMedals[Ranking_PromotionMedal];
					Solo_Medal_Ranking.Opacity	= 1.0;
				}

				//Solo_Label_Remaining.SetText(Ranking_RemainingPoints["Solo"]);
				//Solo_Medal_Ranking.Hide();
				Solo_Label_Remaining.Hide();
			}
			declare Multiplayer_FrameInstance	<=> FrameInstanceForRanking("Multiplayer");
			if (Multiplayer_FrameInstance != Null && Ranking_ZoneTexts.existskey("Multiplayer")) {
				declare Text[] Sections_Name           for Page;

				declare Integer MultiplayerIndex = 1;
				for(I, 0, Sections_Name.count - 1)
				{
					if (Sections_Name[I] == "Multiplayer") {
						MultiplayerIndex = I;
					}
				}
				Prompt_Update("Rank" ^ MultiplayerIndex, Ranking_ZoneTexts["Multiplayer"]);

				declare Multiplayer_Label_Ranking		<=> (Multiplayer_FrameInstance.GetFirstChild("Label_Ranking") as CMlLabel);
				declare Multiplayer_Medal_Ranking		<=> (Multiplayer_FrameInstance.GetFirstChild("Quad_SectionImg") as CMlQuad);
				declare Multiplayer_Label_SectionImg	<=> (Multiplayer_FrameInstance.GetFirstChild("Label_SectionImg") as CMlLabel);
				declare Multiplayer_Label_Remaining		<=> (Multiplayer_FrameInstance.GetFirstChild("Label_Remaining") as CMlLabel);
				declare Multiplayer_Label_Echelon		<=> (Multiplayer_FrameInstance.GetFirstChild("Label_Echelon") as CMlLabel);
				declare Integer Echelon = TextLib::ToInteger(Ranking_ZoneScores["Multiplayer"]);
				//Echelon = 5;
				
				//Multiplayer_Medal_Ranking.ChangeImageUrl("{{{IMGEchelonBase}}}"^Ranking_ZoneScores["Multiplayer"]^".dds");
				Multiplayer_Medal_Ranking.ChangeImageUrl("{{{IMGEchelonBase}}}echelon"^Echelon^".dds");
				//Multiplayer_Medal_Ranking.Colorize = <1., 1., 1.>;
				Multiplayer_Label_Echelon.SetText(""^Echelon);
				//Multiplayer_Medal_Ranking.Hide();
			}

		}

		Void SetSection()
		{
			declare Text[] Sections_Name           for Page;
			declare Text[] Sections_FirstPage      for Page;
			declare Text[Text] LabelPolices        for Page;
			declare Text[Text] Page_Logo_Sections       for Page;
			declare Vec3[] Sections_Color       for Page;

			G_SectionsMax = Sections_Name.count;

			for(I, 0, Sections_Name.count - 1)
			{
				declare CMlFrame Frames_Instance  <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlLabel Label_Section    <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
				declare CMlQuad  Quad_SectionColor  <=> (Frames_Instance.GetFirstChild("Quad_SectionColor")	as CMlQuad);
				Frames_Instance.Show();
				declare Text SectionName = Sections_Name[I];
				Label_Section.SetText(SectionName);
				// HACK qui montre que les names doivent être séparés des ids à proprement parler
				// Ça devrait plutôt être :
				// SectionsManager::AddSection("LocalPlay", "Local Play", "LocalPlayPage", "LocalPlaySubStyle", <1.,1.,0.>);
				// 			que :
				// SectionsManager::AddSection("LocalPlay"				, "LocalPlayPage", "LocalPlaySubStyle", <1.,1.,0.>);
				if (SectionName == "Solo") {
					Label_Section.SetText("{{{
							//L16N Name for the main menu button, designates the one-player campaign
							_("Solo")}}}");
				}
				if (SectionName == "Multiplayer") {
					Label_Section.SetText("{{{
							//L16N Name for the main menu button, is related to the multiplayer servers online
							_("Online play")}}}");
				}
				if (SectionName == "LocalPlay") {
					Label_Section.SetText("{{{
							//L16N Name for the main menu button, means playing locally on the same screen
							_("Local play")}}}");
				}
				if (SectionName == "Editors") {
					Label_Section.SetText("{{{
							//L16N Name for the main menu button, designates the editors of Maniaplanet
							_("Editors")}}}");
				}
				// --
				if(Sections_Color.existskey(I))
				{
					Quad_SectionColor.BgColor = Sections_Color[I];
				}

				declare CMlQuad Quad_SectionImg  <=> (Frames_Instance.GetFirstChild("Quad_SectionImg")	as CMlQuad);
				if(Page_Logo_Sections.existskey(SectionName))
				{
					Quad_SectionImg.ChangeImageUrl(Page_Logo_Sections[SectionName]);
					if (C_NotFixedLogoSections.exists(SectionName)) {
						Label_Section.RelativePosition.Y = 2.8;
					}
					if(SectionName != "Multiplayer")
					{
						Quad_SectionImg.Colorize = <0.9, 0.9, 0.9>;
					}
				}
				else
				{
					//log("SectionName: "^ SectionName);
					//log("Page_Logo_Sections: "^ Page_Logo_Sections);
				}
			}
			declare CMlControl Habillage_Menu_Down	<=> Page.GetFirstChild("Habillage_Menu_Down");
			Habillage_Menu_Down.RelativePosition_V3	= <8.5, -43.79 + 20. * (4 - Sections_Name.count)>;
			declare CMlLabel Label_HeaderTitle		<=> (Page.GetFirstChild("Label_HeaderTitle")	as CMlLabel);
			declare CMlLabel Label_HeaderSubTitle	<=> (Page.GetFirstChild("Label_HeaderSubTitle")	as CMlLabel);
			Label_HeaderTitle.Style    = LabelPolices["MainTitlePolice"];
			Label_HeaderSubTitle.Style = LabelPolices["MainTitlePolice"];
			SetRanking();
		}

		Void UpdateFocusLight(Text _FrameId)
		{
			if(G_HideTime > Now) return;
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild(_FrameId)	as CMlFrame);
			declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
			

			declare Real Pourcentage = (ML::Sin(Now * 0.01) * 0.5 +0.5);
			if(G_Private_MenuButtons_SectionColor.X > 0.8 && G_Private_MenuButtons_SectionColor.Y > 0.8 && G_Private_MenuButtons_SectionColor.Z > 0.8)
			{
				G_Private_MenuButtons_SectionColor.X -= 0.3;
				G_Private_MenuButtons_SectionColor.Y -= 0.3;
				G_Private_MenuButtons_SectionColor.Z -= 0.3;
			}
			declare Real LabelColor_X       = 1.0 - Pourcentage * (1. - G_Private_MenuButtons_SectionColor.X);
			declare Real LabelColor_Y       = 1.0 - Pourcentage * (1. - G_Private_MenuButtons_SectionColor.Y);
			declare Real LabelColor_Z       = 1.0 - Pourcentage * (1. - G_Private_MenuButtons_SectionColor.Z);
			Label_Section.TextColor = <LabelColor_X, LabelColor_Y, LabelColor_Z>;

			LibManialink_AnimStop(Label_Section);
			LibManialink_SetTargetScale(Label_Section, 1.05);
			LibManialink_PresetAnim(Label_Section, 50, "Linear");
		}

		Void UpdateFocusLight()
		{
			UpdateFocusLight("Frame_Instance"^G_SectionFocus^"0");
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^G_SectionFocus^"0")	as CMlFrame);

			declare CMlQuad Quad_SectionImg  <=> (Frames_Instance.GetFirstChild("Quad_SectionImg")	as CMlQuad);
			declare Text[] Sections_Name	for Page;
		}

		Void UnlightFocus()
		{
			if(G_HideTime > Now || G_SectionFocus == -1) return;
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^G_SectionFocus^"0")	as CMlFrame);
			declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
			Label_Section.TextColor = <1., 1., 1.>;
			LibManialink_AnimStop(Label_Section);
			LibManialink_SetTargetScale(Label_Section, 1.0);
			LibManialink_PresetAnim(Label_Section, 50, "Linear");
			declare CMlQuad Quad_SectionImg	<=> (Frames_Instance.GetFirstChild("Quad_SectionImg") as CMlQuad);
			declare Text[] Sections_Name	for Page;
			/*
			if (!C_NotFixedLogoSections.exists(Sections_Name[G_SectionFocus])) {
				//Quad_SectionImg.Colorize = <0.9, 0.9, 0.9>;
			}
			*/

		}

		Void UnLightNews(Integer _Index)
		{
			if(_Index <0) return;
			declare CMlFrame Frame_New <=> (Page.MainFrame.GetFirstChild("Frame_New"^_Index)	as CMlFrame);
			declare CMlQuad  Quad_News <=> (Frame_New.GetFirstChild("Quad_News")	as CMlQuad);
			if(Quad_News == Null) return;
			Quad_News.Opacity = 0.6;
		}

		Void LightNews(Integer _Index)
		{
			declare CMlFrame Frame_New <=> (Page.MainFrame.GetFirstChild("Frame_New"^_Index)	as CMlFrame);
			declare CMlQuad  Quad_News <=> (Frame_New.GetFirstChild("Quad_News")	as CMlQuad);
			if(Quad_News == Null) return;
			Quad_News.Opacity =  1.0;
			UnlightFocus();
			G_SectionFocus = -1;

		}

		Void Init()
		{
			Prompt_Init();
			SendCustomEvent("GetSections", ["SectionsSelector"]);
			G_SectionFocus   = -1;
			G_NewsFocus      = -1;
			G_NewsIndexSelect = -1;
			G_CheckTime		 = -1;
			for(I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlQuad Quad_Section     <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
				declare Integer QuadId for Quad_Section;
				QuadId = I;
			}
			declare CMlFrame Frame_Title <=> (Page.MainFrame.GetFirstChild("Frame_Title")	as CMlFrame);
			foreach(I => Control in Frame_Title.Controls)
			{
				G_TitlePosX.add(Control.RelativePosition_V3.X);
			}
			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_New <=> (Page.MainFrame.GetFirstChild("Frame_New"^I)	as CMlFrame);
				declare CMlQuad Quad_News  <=> (Frame_New.GetFirstChild("Quad_News")	as CMlQuad);
				declare Integer QuadId for Quad_News;
				QuadId = I;
			}
		}
		
		Void HidePage()
		{
			SendCustomEvent("DetachPage", ["SectionsSelector"]);
		}

		Void LaunchTransition(Boolean _IsShow)
		{
			Page.GetFirstChild("Frame_Profile").Visible = _IsShow;
			declare Real TargetPosX;
			declare Real TargetPosNewX;
			declare Real TargetOpaNew;
			declare Text Animation;
			//declare Real InitialPosX;
			if(_IsShow)
			{
				TargetPosX    = 0.;
				TargetPosNewX = 0.;
				TargetOpaNew  = 1.;
				Animation     = "EaseOutCubic";
				//InitialPosX = -200.;

			}
			else
			{
				TargetPosX    = -200.;
				TargetPosNewX = -90.;
				TargetOpaNew  = 0.;
				Animation     = "EaseInCubic";
				//InitialPosX = 0.;
			}

			declare CMlFrame Habillage_Menu_Up <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Up")	as CMlFrame);
			LibManialink_AnimStop(Habillage_Menu_Up);
			LibManialink_SetTargetPosition(Habillage_Menu_Up, <TargetPosX-77., 38.5>);
			LibManialink_PresetAnimInsert(Habillage_Menu_Up, 0, 500, Animation);
			declare Text[] Sections_Name           for Page;
			declare CMlFrame Habillage_Menu_Down <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Down")	as CMlFrame);
			LibManialink_AnimStop(Habillage_Menu_Down);
			LibManialink_SetTargetPosition(Habillage_Menu_Down, <TargetPosX+9., -43.79 + 20. * (4 - Sections_Name.count)>);
			LibManialink_PresetAnimInsert(Habillage_Menu_Down, 100, 500, Animation);

			declare Integer AddDecale  = 30;
			declare Integer DecaleTime = 0;
			for(I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frame_ButtonAnim <=> (Page.MainFrame.GetFirstChild("Frame_ButtonAnim"^I)	as CMlFrame);

				LibManialink_AnimStop(Frame_ButtonAnim);
				LibManialink_SetTargetPosition(Frame_ButtonAnim, <TargetPosX, 0.>);
				LibManialink_PresetAnimInsert(Frame_ButtonAnim, DecaleTime, 700, Animation);

				if(_IsShow)
				{
					declare CMlQuad Quad_SectionImg <=> (Frame_ButtonAnim.GetFirstChild("Quad_SectionImg")	        as CMlQuad);
					declare CMlLabel Label_Echelon <=> (Frame_ButtonAnim.GetFirstChild("Label_Echelon")	        as CMlLabel);
					Quad_SectionImg.RelativeRotation = 90.;
					LibManialink_SetTargetRotation(Quad_SectionImg, 0.);
					LibManialink_PresetAnimInsert(Quad_SectionImg, DecaleTime, 1000, "EaseOutBack");
					Label_Echelon.RelativeRotation = 90.;
					LibManialink_SetTargetRotation(Label_Echelon, 0.);
					LibManialink_PresetAnimInsert(Label_Echelon, DecaleTime, 1000, "EaseOutBack");
				}


				DecaleTime += AddDecale;
			}

			//Frame_News
			DecaleTime = 0;
			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_NewAnim <=> (Page.MainFrame.GetFirstChild("Frame_NewAnim"^I)	as CMlFrame);
				
				LibManialink_AnimStop(Frame_NewAnim);
				LibManialink_SetTargetPosition(Frame_NewAnim, <TargetPosNewX, 0.>);
				LibManialink_PresetAnimInsert(Frame_NewAnim, DecaleTime, 700, Animation);

				declare CMlFrame Frame_New  <=> (Frame_NewAnim.GetFirstChild("Frame_New"^I) as CMlFrame);
				foreach(I => Control in Frame_New.Controls)
				{

					if(Control.ControlId == "Quad_News" && TargetOpaNew == 1.) {
						LibManialink_SetTargetOpacity(Control, 0.6);
					}
					else LibManialink_SetTargetOpacity(Control, TargetOpaNew);


					//LibManialink_SetTargetOpacity(Control, TargetOpaNew);
					LibManialink_PresetAnimInsert(Control, 0, 400, "EaseInSine");
				}

				DecaleTime += AddDecale;
			}

			DecaleTime = 0;
			declare CMlFrame Frame_Title <=> (Page.MainFrame.GetFirstChild("Frame_Title")	as CMlFrame);
			foreach(I => Control in Frame_Title.Controls)
			{
				declare Real PosX;
				if(_IsShow)
				{
					PosX = G_TitlePosX[I];
				}
				else
				{
					PosX = TargetPosNewX;
				}
				//log("["^Now^"]["^Control.ControlId^"]: "^ PosX);

				LibManialink_AnimStop(Control);
				LibManialink_SetTargetPosition(Control, <PosX, Control.RelativePosition_V3.Y>);
				LibManialink_PresetAnimInsert(Control, DecaleTime, 700, Animation);
				LibManialink_SetTargetOpacity(Control, TargetOpaNew);
				LibManialink_PresetAnimInsert(Control, 0, 400, "EaseInSine");
				DecaleTime += AddDecale;
			}
			DecaleTime = 0;
			declare CMlFrame Frame_News     <=> (Page.MainFrame.GetFirstChild("Frame_News")	as CMlFrame);
			declare CMlFrame Frame_LineDown <=> (Frame_News.GetFirstChild("Frame_LineDown")	as CMlFrame);
			foreach(I => LineControl in Frame_LineDown.Controls)
			{
				LibManialink_AnimStop(LineControl);
				LibManialink_SetTargetOpacity(LineControl, TargetOpaNew);
				LibManialink_PresetAnimInsert(LineControl, DecaleTime, 500, Animation);
			}
		}

		Void ForceShow()
		{
			Page.GetFirstChild("Frame_Profile").Visible = True;
			declare Real TargetPosX    = 0.;
			declare Real TargetPosNewX = 0.;
			declare Real TargetOpaNew  = 1.;
			declare Text Animation     = "EaseOutCubic";
			declare CMlFrame Habillage_Menu_Up <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Up")	as CMlFrame);
			LibManialink_AnimStop(Habillage_Menu_Up);
			Habillage_Menu_Up.RelativePosition_V3 = <TargetPosX-77., 38.5>;
			declare Text[] Sections_Name           for Page;
			declare CMlFrame Habillage_Menu_Down <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Down")	as CMlFrame);
			LibManialink_AnimStop(Habillage_Menu_Down);
			Habillage_Menu_Down.RelativePosition_V3 = <TargetPosX+9., -43.79 + 20. * (4 - Sections_Name.count)>;

			for(I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frame_ButtonAnim <=> (Page.MainFrame.GetFirstChild("Frame_ButtonAnim"^I)	as CMlFrame);
				Frame_ButtonAnim.RelativePosition_V3 = <TargetPosX, 0.>;
			}

			//Frame_News
			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_NewAnim <=> (Page.MainFrame.GetFirstChild("Frame_NewAnim"^I)	as CMlFrame);
				
				LibManialink_AnimStop(Frame_NewAnim);
				Frame_NewAnim.RelativePosition_V3 = <TargetPosNewX, 0.>;
			}

			declare CMlFrame Frame_Title <=> (Page.MainFrame.GetFirstChild("Frame_Title")	as CMlFrame);
			foreach(I => Control in Frame_Title.Controls)
			{
				LibManialink_AnimStop(Control);
				Control.RelativePosition_V3 = <G_TitlePosX[I], Control.RelativePosition_V3.Y>;
			}
			declare CMlFrame Frame_News     <=> (Page.MainFrame.GetFirstChild("Frame_News")	as CMlFrame);
			declare CMlFrame Frame_LineDown <=> (Frame_News.GetFirstChild("Frame_LineDown")	as CMlFrame);
			foreach(I => LineControl in Frame_LineDown.Controls)
			{
				declare Line <=> (LineControl as CMlQuad);
				Line.Opacity = TargetOpaNew;
			}
		}

		Void SelectSection(Integer _QuadId)
		{
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
			UnlightFocus();
			G_SectionFocus = -1;
			SendCustomEvent("GotoSection", [_QuadId^""]);
		}

		Void SelectNews(Integer _QuadId)
		{	
			UnLightNews(G_NewsFocus);
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
			G_NewsIndexSelect = _QuadId;
			G_NewsFocus = -1;
			SendCustomEvent("ShowNewsInfo", [_QuadId^""]);
		}

		Void NewsHidden()
		{
			G_NewsIndexSelect = -1;
		}

		Void ShowTransition()
		{
			G_CheckTime = Now + 3000;
			LaunchTransition(True);
		}

		Void HideTransition()
		{
			LaunchTransition(False);
		}

		Void UpdateParallax()
		{
			if(MouseX == -1000.) return;
			declare CMlFrame Frame_All  <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
			declare Real NewPosX = -MouseX/100.;
			declare Real NewPosY = -MouseY/100.;
			Frame_All.RelativePosition_V3 = <NewPosX,NewPosY>;
		}


		Void SetNews()
		{
			declare Text[] Sections_NewsImg          for Page;
			declare Text[] Sections_NewsLabel        for Page;
			declare Vec3 Sections_NewsColor			for Page;
			declare Text[Text][] News_PostList     for Page;

			G_NewsMax = News_PostList.count;
			//log("News_PostList: " ^ News_PostList);
			declare CMlFrame Frame_News   <=> (Page.MainFrame.GetFirstChild("Frame_News")	as CMlFrame);
			Frame_News.Hide();

			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_New   <=> (Page.MainFrame.GetFirstChild("Frame_New"^I)	as CMlFrame);
				declare CMlQuad Quad_NewsImg <=> (Frame_New.GetFirstChild("Quad_NewsImg")	as CMlQuad);
				declare CMlQuad Quad_News  <=> (Frame_New.GetFirstChild("Quad_News")	as CMlQuad);
				declare CMlLabel Label_New   <=> (Frame_New.GetFirstChild("Label_New")	as CMlLabel);
				Quad_News.BgColor = Sections_NewsColor;
				if(News_PostList.existskey(I) && News_PostList[I].count > 0)
				{
					if(News_PostList[I].count <= 0) continue;
					Quad_NewsImg.ChangeImageUrl(News_PostList[I]["media_url"]);
					Label_New.SetText(News_PostList[I]["headline"]);
					//log("Media: " ^ News_PostList[I]["media_url"]);
					Frame_News.Show();
					Frame_New.Show();
				}
				else Frame_New.Hide();
				if(Sections_NewsLabel.existskey(I)) Label_New.SetText(Sections_NewsLabel[I]);
				
			}
			declare CMlFrame Frame_LineDown   <=> (Page.MainFrame.GetFirstChild("Frame_LineDown")	as CMlFrame);
			declare Integer NewsCount = News_PostList.count;
			if(NewsCount > 3) NewsCount = 3;
			Frame_LineDown.RelativePosition.Y = -19.6 - NewsCount*{{{SizeYNew}}} - NewsCount*{{{MarginY_New}}};
		}
		
		Void UpdateMenuButtons_SectionColor()
		{
			declare Vec3[] Sections_Color       for Page;
			G_Private_MenuButtons_SectionColor = Sections_Color[G_SectionFocus];
			G_NewsFocus = -1;

		}

		main() {
			Init();
			ShowPage();

			declare Text PlayerZone = "";
			G_HideTime         = -1;

			declare Integer		 News_PostListTick for Page;
			declare Integer		 Prev_News_PostListTick;

			while(True) {
				
				if (Now > G_CheckTime && G_CheckTime != -1) {
					G_CheckTime = -1;
					declare Frame_ButtonAnim0 <=> Page.GetFirstChild("Frame_ButtonAnim0");
					if (Frame_ButtonAnim0.AbsolutePosition_V3.X < -183.) {
						SendCustomEvent("HelpShow", Text[]);
					}
				}
				yield;
				if (!PageIsVisible && PendingEvents.count == 0) continue;
				LibManialink_AnimLoop();
				DesignManialinks_Loop();
				Prompt_Loop();

				if(G_SectionFocus != -1)
				{
					UpdateFocusLight();
				}


				if(Prev_News_PostListTick != News_PostListTick)
				{
					SetNews();
					Prev_News_PostListTick = News_PostListTick;
				}

				if(G_HideTime < Now && G_HideTime != -1)
				{
					HidePage();
					G_HideTime = -1;
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									if(G_NewsIndexSelect == -1)
									{
										SendCustomEvent("Quit", [""]);
									} else {
										G_NewsIndexSelect = -1;
									}
								}
								case CMlEvent::EMenuNavAction::Select : {
									if(G_SectionFocus >= 0)
									{
										//if(G_SectionFocus == -1) G_SectionFocus = 0;
										Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
										SendCustomEvent("GotoSection", [G_SectionFocus^""]);
									}
									else if(G_NewsFocus >= 0)
									{
										SelectNews(G_NewsFocus);
									}
								}
								case CMlEvent::EMenuNavAction::Up : {
									if(G_SectionFocus > 0)
									{
										declare Vec3[] Sections_Color       for Page;
										UnlightFocus();
										G_SectionFocus -= 1;
										UpdateMenuButtons_SectionColor();
									}
									else if(G_NewsFocus > 0)
									{
										UnLightNews(G_NewsFocus);
										G_NewsFocus -= 1;
										LightNews(G_NewsFocus);
									}
								}
								case CMlEvent::EMenuNavAction::Down : {
									if(G_SectionFocus < G_SectionsMax-1 && G_NewsFocus == -1)
									{
										declare Vec3[] Sections_Color       for Page;
										UnlightFocus();
										G_SectionFocus += 1;
										UpdateMenuButtons_SectionColor();
									}
									else if(G_NewsFocus < G_NewsMax-1 && G_SectionFocus == -1)
									{
										UnLightNews(G_NewsFocus);
										G_NewsFocus += 1;
										LightNews(G_NewsFocus);
									}
									//G_SectionFocus = QuadId;
								}
								case CMlEvent::EMenuNavAction::Left : {
									if(G_SectionFocus == -1)
									{
										if(G_NewsFocus >= 0) UnLightNews(G_NewsFocus);
										if(G_SectionLastFocus < 0) G_SectionLastFocus = 0;
										G_SectionFocus = G_SectionLastFocus;
										UpdateMenuButtons_SectionColor();
									}
									
								}
								case CMlEvent::EMenuNavAction::Right : {
									declare Text[Text][] News_PostList for Page;
									if (News_PostList.count > 0 && News_PostList[0].count > 0) {
										G_SectionLastFocus = G_SectionFocus;
										UnlightFocus();
										G_NewsFocus    = 0;
										LightNews(G_NewsFocus);
									}
								}
								case CMlEvent::EMenuNavAction::Action2 : {
									SendCustomEvent("MainMenu_ShowProfile", Text[]);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Quad_Section")
							{
								declare Integer QuadId for Event.Control;
								SelectSection(QuadId);
							}
							else if (Event.ControlId == "Quad_ManiaCredit")
							{
								SendCustomEvent("ManiaCreditsStart", Text[]);
							}
							else if (Event.ControlId == "Quad_News")
							{
								declare Integer QuadId for Event.Control;
								SelectNews(QuadId);
							}
							else if (Event.ControlId == "Quad_Profile")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
								SendCustomEvent("MainMenu_ShowProfile", Text[]);
							}
							/*
							else if (Event.ControlId == "Quad_NewBg")
							{
								HideNewsInfo();
							}
							else if (Event.ControlId == "NewInfo_Button")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
								declare Text[Text][] News_PostList for Page;
								SendCustomEvent("News_Click", [""^News_PostList[G_NewsIndexSelect]["id"]]);
							}
							else if (Event.ControlId == "NewInfo_Repost")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
								declare Text[Text][] News_PostList for Page;
								SendCustomEvent("News_Repost", [""^News_PostList[G_NewsIndexSelect]["id"]]);
							}
							else if (Event.ControlId == "Quad_Up")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
								declare CMlLabel Label_NewBody <=> (Page.MainFrame.GetFirstChild("Label_NewBody")	as CMlLabel);
								Label_NewBody.RelativePosition.Y -= 3.;
								if(Label_NewBody.RelativePosition.Y < 0)
								{
									Label_NewBody.RelativePosition.Y = 0.;
								}
							}
							else if (Event.ControlId == "Quad_Down")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
								declare CMlLabel Label_NewBody <=> (Page.MainFrame.GetFirstChild("Label_NewBody")	as CMlLabel);
								declare Real NewBodyHeight = Label_NewBody.ComputeHeight(Label_NewBody.Value);
								Label_NewBody.RelativePosition.Y += 3.;
								if(Label_NewBody.RelativePosition.Y > (Label_NewBody.ValueLineCount-13)*3.)
								{
									Label_NewBody.RelativePosition.Y = (Label_NewBody.ValueLineCount-13)*3.;
								}
							}
							*/
						}
						case CMlEvent::Type::MouseOver: {
							if(G_HideTime > Now) continue;
							Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 1, 0.0);
							if (Event.ControlId == "Quad_Section" || Event.ControlId == "Quad_Back")
							{
								UnlightFocus();
								declare CMlQuad Quad_Button     <=> (Event.Control	as CMlQuad);
								declare Integer QuadId for Event.Control;
								G_SectionFocus = QuadId;
								declare Vec3[] Sections_Color       for Page;
								G_Private_MenuButtons_SectionColor = Sections_Color[G_SectionFocus];
								if(G_NewsFocus >= 0) UnLightNews(G_NewsFocus);
								G_NewsFocus = -1;
							}
							else if (Event.ControlId == "Quad_News")
							{
								//declare Quad <=> (Event.Control as CMlQuad);
								declare Integer QuadId for Event.Control;
								G_NewsFocus = QuadId;
								LightNews(QuadId);
							}
							else if (Event.ControlId == "Quad_Profile")
							{
								declare CMlLabel Label_Profile <=> (Event.Control.Parent.GetFirstChild("Label_Profile")	as CMlLabel);
								Label_Profile.Scale = 1.1;
							}
							else if (Event.ControlId == "Quad_ManiaCredit")
							{
								declare CMlFrame Frame_MouseOver <=> (Event.Control.Parent.GetFirstChild("Frame_MouseOver")	as CMlFrame);
								Frame_MouseOver.Show();
							}
						}
						case CMlEvent::Type::MouseOut: {
							if(G_HideTime > Now) continue;
							if (Event.ControlId == "Quad_Section" || Event.ControlId == "Quad_Back")
							{
								declare CMlQuad Quad_Button <=> (Event.Control	as CMlQuad);
								UnlightFocus();
								G_SectionFocus = -1;
							}
							else if (Event.ControlId == "Quad_News")
							{
								declare Integer QuadId for Event.Control;
								UnLightNews(QuadId);
								//declare Quad <=> (Event.Control as CMlQuad);
								//Quad.Opacity = 0.6;
							}
							else if (Event.ControlId == "Quad_Profile")
							{
								declare CMlLabel Label_Profile <=> (Event.Control.Parent.GetFirstChild("Label_Profile")	as CMlLabel);
								Label_Profile.Scale = 1.0;
							}
							else if (Event.ControlId == "Quad_ManiaCredit")
							{
								declare CMlFrame Frame_MouseOver <=> (Event.Control.Parent.GetFirstChild("Frame_MouseOver")	as CMlFrame);
								Frame_MouseOver.Hide();
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.CustomEventType) {
								case "Show" : {
									G_HideTime = -1;
									ShowPage();
									ShowTransition();
									SendCustomEvent("SectionsSelector_UpdateRanking", Text[]);
								}
								case "ForceShow" : {
									ForceShow();
								}
								case "Hide" : {
									declare Text NextPage = Event.CustomEventData[0];
									EnableMenuNavigation(True,False,Null,0);
									if(NextPage == "MultiplayerFind_")
									{
										HidePage();
									}
									else
									{
										HideTransition();
										G_HideTime = Now + C_HideTransitionTime;
									}
								}
								case "SectionInfosSent" : {
									SetSection();
								}
								case "RankingSent" : {
									SetRanking();
								}
								case "NewsHidden" : {
									NewsHidden();
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
""";
	
	return MLText;
}