// ATTENTION, UTILISE LibButton_Img

#Include "TextLib"											as TextLib
#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"				as Logger
#Include "Libs/Nadeo/Common/Core/MenuLayers.Script.txt"			as Layers

#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/Common/ManialinkTools/2DArrayCardBuilder.Script.txt"		as TwoDArrayCardBuilder
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"		as Manialink
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font

#Include "Libs/Nadeo/MP4/Common/GlobalVariables.Script.txt"		as GlobalVariables

#Const C_SizeMediaCards			<48.,	28.>
#Const C_SizeSelector			<52.,	32.1>
#Const C_MarginMediaCards		<5.3,	0.4>
#Const C_CardFirstPos			<-54.,	3.>
#Const C_BaseImgUrl				"file://Media/MEDIABROWSER_HiddenResources/Title/Images/LocalPlay/SplitScreenBase.dds"
#Const C_SelectorImgUrl			"file://Media/MEDIABROWSER_HiddenResources/Title/Images/LocalPlay/SplitScreenSelector.dds"

Text Build()
{
	TwoDArrayCardBuilder::Init(3, 1, C_CardFirstPos, C_SizeMediaCards, C_MarginMediaCards);
	DesignManialinks::Init();
	declare Text SubFont = Font::GetFontName("SubTitle");
	declare Text MainFont = Font::GetFontName("Main");
	return """<manialink version="3" name="L_SplitScreen">
	<framemodel id="TwoDArrayCardBuilder_Card">
		<frame id="Frame_WholeItem">
			<label id="Label_Card"				halign="center"	valign="bottom" size="{{{C_SizeMediaCards.X - 7.}}} 3" pos="0 {{{- C_SizeMediaCards.Y / 2. - 6.}}}"		z-index="1" textfont="{{{SubFont}}}" textsize="2.5" textcolor="DDD" textprefix="$t" text="Duo horizontal"/>
			<quad id="Quad_Thumbnail"	halign="center"	valign="center" size="{{{C_SizeMediaCards.X}}} {{{C_SizeMediaCards.Y}}}"	image="{{{C_BaseImgUrl}}}" z-index="-1" keepratio="fit"/>
			<quad id="Quad_Selector"	halign="center"	valign="center" size="{{{C_SizeSelector.X}}} {{{C_SizeSelector.Y}}}"		image="{{{C_SelectorImgUrl}}}" z-index="1" keepratio="fit" hidden="1"/>
			<quad id="Quad_HorizontalSeparator"	halign="center" valign="center" size="46 2" bgcolor="000"/>
			<quad id="Quad_VerticalSeparator"	halign="center" valign="center" size="2 26" bgcolor="000"/>
		</frame>
	</framemodel>
	<quad id="BG" halign="center" valign="center" size="190 70" pos="0 -9" z-index="-1" bgcolor="000" opacity="0.4"/>
	<quad id="Delimiter" halign="right" valign="top" size="190 0.2" pos="95 27.5" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}" opacity="0.4"/>
	<quad id="DelimiterExtra" halign="right" valign="bottom" size="8 0.4" pos="95 27.5" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Normal()}}}" opacity="0.4"/>
	<label id="LabelSplitScreen" halign="left" valign="bottom" size="190 8" pos="-94.7 29" textsize="8" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textfont="{{{MainFont}}}" textemboss="1" textprefix="$t" text="{{{_("Split Screen")}}}"/>
	{{{TwoDArrayCardBuilder::ManialinkMainBody()}}}
	{{{DesignManialinks::ManialinkMainButtonLarge(<-18.5, C_CardFirstPos.Y - 30.>, <37., 11.>, _("Start"), "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/StartLogo.dds", "", "MainButton")}}}
<script><!--
#Include "TextLib"	as SplitScreen_TextLib
{{{DesignManialinks::Includes()}}}
{{{Manialink::GetIncludes()}}}
{{{TwoDArrayCardBuilder::Includes()}}}
{{{TwoDArrayCardBuilder::FirstDeclares()}}}
{{{DesignManialinks::Declares()}}}
{{{Manialink::Load()}}}
	declare Integer G_CurrentState;

	Void TwoDArrayCardBuilder_HideCard(CMlFrame _Card)
	{
		_Card.GetFirstChild("Frame_WholeItem").Hide();
	}

	Void TwoDArrayCardBuilder_ShowCard(CMlFrame _Card)
	{
		_Card.GetFirstChild("Frame_WholeItem").Show();
		declare Label_Card <=> (_Card.GetFirstChild("Label_Card") as CMlLabel);
		declare Integer OneDIndex for _Card;
		switch (OneDIndex) {
			case 0 : {
				_Card.GetFirstChild("Quad_HorizontalSeparator").Show();
				_Card.GetFirstChild("Quad_VerticalSeparator").Hide();
				Label_Card.SetText(_("Horizontal"));
			}
			case 1 : {
				_Card.GetFirstChild("Quad_HorizontalSeparator").Hide();
				_Card.GetFirstChild("Quad_VerticalSeparator").Show();
				Label_Card.SetText(_("Vertical"));
			}
			case 2 : {
				_Card.GetFirstChild("Quad_HorizontalSeparator").Show();
				_Card.GetFirstChild("Quad_VerticalSeparator").Show();
				Label_Card.SetText(_("Four screens"));
			}
		}
	}

	Void TwoDArrayCardBuilder_ShowLockedCard(CMlFrame _Card)
	{
	}

	Void TwoDArrayCardBuilder_UnFocusCard(CMlFrame _Card)
	{
	}

	Void TwoDArrayCardBuilder_FocusCard(CMlFrame _Card)
	{
	}

	Void TwoDArrayCardBuilder_UnSelectCard(CMlFrame _Card)
	{
		_Card.GetFirstChild("Quad_Selector").Hide();
		declare Label_Card <=> (_Card.GetFirstChild("Label_Card") as CMlLabel);
		Label_Card.TextColor = SplitScreen_TextLib::ToColor("DDD");
		LibManialink_AnimStop(Label_Card);
		LibManialink_SetTargetPosition(Label_Card, <Label_Card.RelativePosition_V3.X, {{{- C_SizeMediaCards.Y / 2. - 6.}}}>);
		LibManialink_PresetAnim(Label_Card, 70, "EaseLinear");
	}

	Void TwoDArrayCardBuilder_SelectCard(CMlFrame _Card)
	{
		declare Integer OneDIndex for _Card;
		G_CurrentState = OneDIndex;
		_Card.GetFirstChild("Quad_Selector").Show();
		declare Label_Card <=> (_Card.GetFirstChild("Label_Card") as CMlLabel);
		Label_Card.TextColor = SplitScreen_TextLib::ToColor("FFF");
		LibManialink_AnimStop(Label_Card);
		LibManialink_SetTargetPosition(Label_Card, <Label_Card.RelativePosition_V3.X, {{{- C_SizeMediaCards.Y / 2. - 7.5}}}>);
		LibManialink_PresetAnim(Label_Card, 70, "EaseLinear");
	}

{{{TwoDArrayCardBuilder::SecondDeclares()}}}

	Void Show()
	{
		DesignManialinks_Show();
		declare LabelSplitScreen <=> (Page.GetFirstChild("LabelSplitScreen") as CMlLabel);
		LibManialink_AnimStop(LabelSplitScreen);
		LabelSplitScreen.RelativePosition_V3.X = 100.;
		LabelSplitScreen.Opacity = 0.;
		LibManialink_SetTargetPosition(LabelSplitScreen, <-94.7, LabelSplitScreen.RelativePosition_V3.Y>);
		LibManialink_SetTargetOpacity(LabelSplitScreen, 1.);
		LibManialink_PresetAnim(LabelSplitScreen, 800, "EaseOutQuad");

		declare BG				<=> (Page.GetFirstChild("BG") as CMlQuad);
		LibManialink_AnimStop(BG);
		BG.Opacity = 0.;
		LibManialink_SetTargetOpacity(BG, 0.4);
		LibManialink_PresetAnim(BG, 400, "EaseOutCubic");
		declare Delimiter				<=> (Page.GetFirstChild("Delimiter") as CMlQuad);
		LibManialink_AnimStop(Delimiter);
		Delimiter.Opacity = 0.;
		LibManialink_SetTargetOpacity(Delimiter, 0.4);
		LibManialink_PresetAnim(Delimiter, 400, "EaseOutCubic");
		declare DelimiterExtra				<=> (Page.GetFirstChild("DelimiterExtra") as CMlQuad);
		LibManialink_AnimStop(DelimiterExtra);
		DelimiterExtra.Opacity = 0.;
		LibManialink_SetTargetOpacity(DelimiterExtra, 0.4);
		LibManialink_PresetAnim(DelimiterExtra, 400, "EaseOutCubic");

		declare Integer AddDecale  = 70;
		declare Integer DecaleTime = 150;
		for(LineIndex, 0, G_TwoDArrayCardBuilder_CountY - 1)
		{
			for(ColumnIndex, 0, G_TwoDArrayCardBuilder_CountX - 1)
			{
				declare Integer		FrameIndex					= ColumnIndex + LineIndex * G_TwoDArrayCardBuilder_CountX;
				declare CMlFrame	CardFrame					<=> (Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ FrameIndex) as CMlFrame);
				declare CMlFrame	Frame_WholeItem				<=> (CardFrame.GetFirstChild("Frame_WholeItem") as CMlFrame);
				foreach(Control in Frame_WholeItem.Controls) {
					if (Control is CMlQuad) {
						declare Quad <=> (Control as CMlQuad);
						LibManialink_AnimStop(Quad);
						Quad.Opacity = 0.;
						LibManialink_SetTargetOpacity(Quad, 1.);
						LibManialink_PresetAnimInsert(Quad, DecaleTime, 400, "EaseOutCubic");
					} else if (Control is CMlLabel) {
						declare Label <=> (Control as CMlLabel);
						LibManialink_AnimStop(Label);
						Label.Opacity = 0.;
						LibManialink_SetTargetOpacity(Label, 1.);
						LibManialink_PresetAnimInsert(Label, DecaleTime, 400, "EaseOutCubic");
					}
				}
				CardFrame.RelativePosition_V3.X = 10.;
				LibManialink_SetTargetPosition(CardFrame, <0., 0.>);
				LibManialink_PresetAnimInsert(CardFrame, DecaleTime, 400, "EaseOutCubic");
				DecaleTime += AddDecale;
			}
		}
	}

	Void Init()
	{
		TwoDArrayCardBuilder_Init();
		TwoDArrayCardBuilder_Update([C_TwoDArrayCardBuilder_Available,
								C_TwoDArrayCardBuilder_Available,
								C_TwoDArrayCardBuilder_Available], 0);
	}

	Void Select()
	{
		SendCustomEvent("SplitScreenToMatchSettings", [SplitScreen_TextLib::ToText(G_CurrentState)]);
	}

	Void Loop()
	{
		foreach(Event in PendingEvents) {
			switch(Event.Type) {
				case CMlEvent::Type::MenuNavigation: {
					switch (Event.MenuNavAction) {
						case CMlEvent::EMenuNavAction::Select: {
							Select();
						}
						case CMlEvent::EMenuNavAction::Cancel: {
							SendCustomEvent("GotoPrevious", [""]);
						}
					}
				}
				case CMlEvent::Type::MouseClick: {
					Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
					if (Event.ControlId == "MainButton") {
						Select();
					}
				}
				case CMlEvent::Type::PluginCustomEvent: {
					switch(Event.CustomEventType) {
						case "Back" : {
							SendCustomEvent("GotoPrevious", [""]);
						}
						case "Show" : {
							Show();
							EnableMenuNavigation(True, False, Null, 3);
						}
						case "Hide" : {
							SendCustomEvent("DetachPage", ["LocalSplitScreen"]);
							EnableMenuNavigation(False, False, Null, 0);
						}
					}
				}
			}
		}
		TwoDArrayCardBuilder_Loop();
		DesignManialinks_Loop();
		LibManialink_AnimLoop();
	}

	main()
	{
		Init();
		while(True) {
			yield;
			Loop();
		}
	}
--></script>
</manialink>""";
}