#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"		as DesignManialinks
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/TPLagoon/LibButton_Img.Script.txt"			as LibButton_Img
#Include "Libs/Nadeo/MP4/Common/Prompt.Script.txt"					as Prompt
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"					as Colors
#Include "TextLib"												as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font


#Const C_IMG_ArrowRight		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/SmallArrowRight.dds"
#Const C_IMG_ArrowRightOver	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/SmallArrowRightOver.dds"
#Const C_ImgBase      "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/"
#Const C_LabelRankDecalY		7.

Text Build() {
	
	declare Text[Text] CategoryColors =	[	"White"		=> TextLib::ColorToText(Colors::GetDifficultyColor(1)),
							"Green"		=> TextLib::ColorToText(Colors::GetDifficultyColor(2)),
							"Blue"		=> TextLib::ColorToText(Colors::GetDifficultyColor(3)),
							"Red"		=> TextLib::ColorToText(Colors::GetDifficultyColor(4)),
							"Black"		=> TextLib::ColorToText(Colors::GetDifficultyColor(5))];

	declare Integer Count_InstancesY     = 1;
	declare Integer Count_InstancesX     = 6;
	declare Real	PosXFirstQuad        = -18.8;
	declare Real	PosYFirstQuad        = 69.;
	declare Real	SizeXQuad            = 21.;
	declare Real	SizeYQuad            = 29.;
	declare Real	MarginY_Button       = 4.0;
	declare Real	MarginX_Button       = 0.6;
	declare Real	SizeXQuadIcon            = 15.;
	declare Real	SizeYQuadIcon            = 15.;

	declare Text	Green2				= Colors::GetColorXml("Green2");

	declare Text IMGGlobal_Back        = C_ImgBase^"Buttons/Global_Back.dds";
	declare Text IMG_RankingOnline		= C_ImgBase ^ "Achievements/Logo_Ranking.dds";

	declare Text	MainFont	= Font::GetFontName("Main");
	declare Text	ChronoFont	= Font::GetFontName("Chrono");
	declare Text	SubFont		= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_BarreSection">

	<framemodel id="Frame_CampaignLabel">
		<quad id="ChooseRed" valign="center" size="19 6" pos="1.5 -3"/>
		<quad id="UnderQuadRed"	 halign="center" valign="center" size="19 6" pos="0. -3" z-index="-2" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
		<quad id="OverQuadRed"	 halign="center" valign="center" size="19 6" pos="0. -3" opacity="0.3" bgcolor="fff" hidden="1"/>
		<quad id="ColorQuadRed"  halign="center" valign="center" size="19 6" pos="0. -3" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
		<label id="TextRed" size="18.5 6" halign="center" valign="center" pos="0 -2.3" z-index="1" text="TEST"	textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.65"/>
	</framemodel>

	<framemodel id="Frame_Button">
		<quad id="Quad_Section"    halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="0 8" z-index="1" opacity="0." bgcolor="fff" scriptevents="1" />
		<quad id="Quad_SectionImg" halign="center" valign="center" size="9.5 9.5"  pos="0 11" keepratio="fit" z-index="3"/>
		<label id="Label_Section"  halign="center"   valign="center" size="{{{SizeXQuad - 2.}}} 0" textfont="{{{SubFont}}}" textprefix="$t" z-index="2" textsize="2" textcolor="fff" opacity="1." textemboss="1"/>
		<label id="Label_Text"  halign="left"   valign="center" textfont="{{{SubFont}}}" pos="3 6" z-index="2" textsize="2" textcolor="fff" hidden="1" textemboss="1"/>
		<frameinstance modelid="Frame_CampaignLabel" id="CampaignLabel" pos="0 3" z-index="3"/>
	</framemodel>

	<framemodel id="Frame_BarreSection">
		<quad id="Quad_Barre" halign="center" valign="top" pos="0.2 -5.6" size="{{{SizeXQuad + MarginX_Button}}} 0.3"  opacity="0.8" bgcolor="ff0"/>
		<frame id="Frame_BarreFocus" hidden="1">
			<quad halign="center" valign="top" pos="0. -5.6" z-index="1" size="{{{SizeXQuad}}} 0.8"  opacity="1.0" bgcolor="fff"/>
			<frame pos="-2 0" size="4 5.6">
				<quad halign="center" valign="center" pos="2. -5.6" z-index="1" size="1.5 1.5"  opacity="1.0" bgcolor="fff" rot="45"/>
			</frame>
		</frame>
	</framemodel>

{{{Prompt::ManialinkFrameModels("""halign="left"	valign="center" size="47.2 2" textfont="{{{SubFont}}}"
		textemboss="1" pos="13 5.4" textsize="2" textcolor="fff" textprefix="$t" """)}}}

	<frame id="Frame_All" z-index="30" hidden="0">
		<label id="Label_HeaderTitle"  halign="left" valign="bottom" size="60 0" textfont="{{{MainFont}}}" pos="-49.5 74.8" z-index="2" textsize="9" text="" opacity="1." textprefix="$t" textcolor="fff" textemboss="1"/>
		<frame id="Prompt_Frame" pos="-62.2 62.6">
			{{{Prompt::ManialinkMainBody()}}}
		</frame>
		<frame id="Points_Frame" pos="-40.2 67.5">
			<label	id="Points_Label"		halign="left"	valign="center" size="12 2" textfont="{{{ChronoFont}}}" text="684" pos="-9 5.4" z-index="2" textsize="2" textcolor="{{{Green2}}}" textemboss="1"/>
			<quad	id="SkillPoints_Logo"		halign="left"	valign="center" size="5 5" pos="4.5 5.4" style="Icons128x128_1" substyle="SkillPoints" keepratio="fit"/>
			<quad	id="LadderPoints_Logo"		halign="left"	valign="center" size="5 5" pos="4.5 5.4" style="Icons128x128_1" substyle="LadderPoints" keepratio="fit" hidden="1"/>
		</frame>


		<frame id="Frame_BarreGlobal">
			<quad halign="left" valign="top" pos="-49.2 63.4" size="50.1 0.3"  opacity="0.8" bgcolor="ff0"/>
			<quad halign="left" valign="bottom" pos="-49.2 63.4" size="26.4 1.0"  opacity="0.8" bgcolor="ff0"/>
		</frame>
		<frame id="Button_RecordCenter" pos="-16 59" hidden="1">
			<frame id="Frame_RecordCenter_Button">
				<quad id="Quad_RecordCenter" halign="center" valign="center" size="22 5.2"  pos="12 0" opacity="0." bgcolor="000" scriptevents="1"/>
				<quad id="Quad_RecordCenterIcon" halign="center" valign="center" size="4.4 4.4" pos="-0.5 0" rot="90" image="{{{IMGGlobal_Back}}}"/>
				<label id="Label_RecordCenter" halign="left"   valign="center" text="{{{_("Record Center")}}}" textfont="{{{SubFont}}}" textprefix="$t" pos="6 0" z-index="2" textsize="1.7" textcolor="fff" opacity="1."/>

				<quad halign="right" valign="center" size="26.8 0.2" pos="23.6 -4.2" opacity="0.7" bgcolor="fff"/>
				<quad halign="right" valign="center" size="2  0.4"  pos="23.6 -4" opacity="0.7" bgcolor="fff"/>
			</frame>
		</frame>
		<frame pos="30 0">
			<frame id="Frame_Navigation" pos="0 80">
				<frame id="Frame_PageUp" pos="-35.6 0">
					<quad id="Button_PageUp"	halign="center" valign="center" size="13.0 8.5" pos="1.3 0" z-index="1" keepratio="Fit"/>
					<quad id="Click_PageUp"		halign="center" valign="center" size="6 6" image="{{{C_IMG_ArrowRight}}}" rot="180" keepratio="Fit" scriptevents="1"/>
				</frame>
				<frame id="Frame_PageDown" pos="59 0">
					<quad id="Button_PageDown"	halign="center" valign="center" size="13.0 8.5" pos="-0.3 0" z-index="1" keepratio="Fit"/>
					<quad id="Click_PageDown"	halign="center" valign="center" size="6 6" image="{{{C_IMG_ArrowRight}}}" keepratio="Fit" scriptevents="1"/>
				</frame>
			</frame>
			<frame id="ShadowBorder">
				<quad size="127.7 15.5"	pos="-18 88" bgcolor="000" opacity="0.4"/>
				<quad size="127.7 6"	pos="-18 72.1" bgcolor="000" opacity="0.4"/>
			</frame>

""";
	for(I,0,Count_InstancesY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstQuad - IndexY*SizeYQuad - IndexY*MarginY_Button*1.;
		for(J,0,Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosX = PosXFirstQuad + IndexX*SizeXQuad + IndexX*MarginX_Button*1.;
			MLText^="""
			<frameinstance modelid="Frame_Button" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Instance{{{J}}}{{{I}}}" hidden="1"/>
			<frameinstance modelid="Frame_BarreSection" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_BarreSection{{{J}}}{{{I}}}" hidden="0"/>
			""";
		}
	}
	MLText^="""
		</frame>

	</frame>
	
	
	<script><!--
		#Include "TextLib" as BarreSection_TextLib
		#Include "MathLib" as BarreSection_MathLib
		#Const		C_CategoryColors {{{dump(CategoryColors)}}}
		#Const		C_RankingNames ["SoloCampaign" => "Solo", "OnlinePlay" => "Multiplayer"]
		#Const		C_Localization ["White" => _("White"),
									"Green" => _("Green"),
									"Blue" => _("Blue"),
									"Red" => _("Red"),
									"Black" => _("Black")]
		{{{Prompt::Includes()}}}
		{{{Manialink::GetIncludes()}}}
		{{{LibButton_Img::IncludeInDeclare()}}}

		declare CVideo[Text]	G_Videos;
		declare CMlQuad[Text]	G_VideoQuads;
		declare Integer			G_SectionFocus;
		declare Integer			G_SectionOver;
		declare Integer			G_SectionMax;
		declare Integer			G_Last_QuadFocus;
		declare Text			G_DisplayType;
		declare Text[]			G_Rankings;
		declare Integer			G_RankingIndex;
		declare Integer			G_Prev_TimeRanking;
		declare Integer			G_TimeRanking;
		declare Integer			G_TimeReplaceFrame;
		declare Integer			G_Prev_TimeReplaceFrame;
		declare Text			G_PlayerZone;

		{{{Manialink::Load()}}}
		{{{Prompt::Declares()}}}

		Void SetRanking(Text _DisplayType)
		{
			declare Text[][Text]	Ranking_ZoneTexts		for Page;
			declare Text[Text]		Ranking_RemainingPoints	for Page;
			declare Text[Text]		Ranking_AllPoints		for Page;
			declare Points_Frame			<=> Page.GetFirstChild("Points_Frame");
			declare Prompt_Frame			<=> Page.GetFirstChild("Prompt_Frame");
			declare Label_HeaderTitle		<=> Page.GetFirstChild("Label_HeaderTitle");

			if (C_RankingNames.existskey(_DisplayType)) {
				Prompt_Frame.Show();
				Points_Frame.Show();
				Label_HeaderTitle.RelativePosition_V3 = <-49.5, 74.8>;
				declare Competition = C_RankingNames[_DisplayType];
				Prompt_Update(Ranking_ZoneTexts[Competition]);

				declare Points_Label			<=>	(Page.GetFirstChild("Points_Label") as CMlLabel);
				declare SkillPoints_Logo		<=> Page.GetFirstChild("SkillPoints_Logo");
				declare LadderPoints_Logo		<=> Page.GetFirstChild("LadderPoints_Logo");
				Points_Label.SetText(Ranking_AllPoints[Competition]);
				if (_DisplayType == "SoloCampaign") {
					declare Green2 = BarreSection_TextLib::Split(" ", {{{dump(Green2)}}});
					Points_Label.TextColor = <BarreSection_TextLib::ToReal(Green2[0]),
						BarreSection_TextLib::ToReal(Green2[1]),
						BarreSection_TextLib::ToReal(Green2[2])>;
					SkillPoints_Logo.Show();
					LadderPoints_Logo.Hide();
				} else {
					Points_Label.TextColor = <1., 1., 1.>;
					SkillPoints_Logo.Hide();
					LadderPoints_Logo.Show();
				}
			} else {
				Prompt_Frame.Hide();
				Points_Frame.Hide();
				Label_HeaderTitle.RelativePosition_V3 = <-49.5, 68.8>;
			}
		}

		Void SetRanking()
		{
			SetRanking(G_DisplayType);
		}

		Void UpdateAll(Boolean _Visibility)
		{
			declare CMlFrame Frame_Home <=> (Page.MainFrame.GetFirstChild("Frame_Home")	as CMlFrame);
		}

		Void UpdateBaseDisplay(Text _DisplayType)
		{
			G_DisplayType = _DisplayType;
			declare ShadowBorder        <=> Page.GetFirstChild("ShadowBorder");
			declare Click_PageUp        <=> Page.GetFirstChild("Click_PageUp");
			declare Click_PageDown      <=> Page.GetFirstChild("Click_PageDown");
			declare Button_RecordCenter <=> Page.GetFirstChild("Button_RecordCenter");
			if (False/*G_DisplayType == "SoloCampaign" || G_DisplayType == "RecordCenter"*/) {
				ShadowBorder.Show();
				Click_PageUp.Show();
				Click_PageDown.Show();
				Button_RecordCenter.Hide();
			} else {
				ShadowBorder.Hide();
				Click_PageUp.Hide();
				Click_PageDown.Hide();
				Button_RecordCenter.Hide();
			}
			SetRanking();
		}

		Void UpdateLogos()
		{
			declare Text[]	BarreSectionLogo	for Page;
			for(I, 0, {{{Count_InstancesX -1}}})
			{
				declare CMlFrame Frames_Instance    <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);

				if(I < G_SectionMax)
				{
					declare CMlQuad Quad_SectionImg <=> (Frames_Instance.GetFirstChild("Quad_SectionImg")	as CMlQuad);
					Quad_SectionImg.Opacity = 1.;

					if(BarreSectionLogo.existskey(I))
					{
						Quad_SectionImg.ChangeImageUrl(BarreSectionLogo[I]);
					} else {
						Quad_SectionImg.ChangeImageUrl("");
					}
				}
			}
		}

		Void UpdateText()
		{
			declare Text[]	BarreSectionText	for Page;
			for(I, 0, {{{Count_InstancesX-1}}})
			{
				
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlLabel Label_Text      <=> (Frames_Instance.GetFirstChild("Label_Text")			as CMlLabel);
				if(BarreSectionText.existskey(I)) Label_Text.SetText(BarreSectionText[I]);
			}
		}
		
		Void ClearText()
		{
			for(I, 0, {{{Count_InstancesX-1}}})
			{
				
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlLabel Label_Text      <=> (Frames_Instance.GetFirstChild("Label_Text")			as CMlLabel);
				Label_Text.SetText("");
			}
		}

		Void CloseBarre(Integer _Id)
		{
			if(_Id == -1) return;
			declare CMlFrame Frame_BarreSection <=> (Page.MainFrame.GetFirstChild("Frame_BarreSection"^_Id^"0")	as CMlFrame);
			declare CMlFrame Frames_Instance    <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^_Id^"0")	as CMlFrame);
			declare CMlFrame Frame_BarreFocus   <=> (Frame_BarreSection.GetFirstChild("Frame_BarreFocus")	as CMlFrame);
			declare CMlQuad Quad_Barre          <=> (Frame_BarreSection.GetFirstChild("Quad_Barre")	as CMlQuad);
			declare CMlQuad Quad_Section        <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
			declare CMlQuad ColorQuadRed		<=> (Frames_Instance.GetFirstChild("ColorQuadRed") as CMlQuad);
			declare CMlLabel	TextRed			<=> (Frames_Instance.GetFirstChild("TextRed") as CMlLabel);
			declare CMlQuad		OverQuadRed		<=> (Frames_Instance.GetFirstChild("OverQuadRed") as CMlQuad);
			OverQuadRed.Opacity = 0.3;
			OverQuadRed.Hide();
			ColorQuadRed.Hide();
			ColorQuadRed.BgColor = <0., 0., 0.>;
			TextRed.TextColor		= BarreSection_TextLib::ToColor("{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}");
			Quad_Section.Opacity = 0.0;
			Quad_Barre.Show();
			Frame_BarreFocus.Hide();
		}

		Void OpenBarre(Integer _Id)
		{
			if(_Id == -1) return;
			G_SectionFocus = _Id;
			declare Text[]	BarreSectionName	for Page;
			declare CMlFrame Frames_Instance    <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^_Id^"0")	as CMlFrame);
			declare CMlQuad ColorQuadRed		<=> (Frames_Instance.GetFirstChild("ColorQuadRed") as CMlQuad);
			declare CMlFrame Frame_BarreSection <=> (Page.MainFrame.GetFirstChild("Frame_BarreSection"^_Id^"0")	as CMlFrame);
			declare CMlFrame Frame_BarreFocus   <=> (Frame_BarreSection.GetFirstChild("Frame_BarreFocus")	as CMlFrame);
			declare CMlQuad Quad_Barre          <=> (Frame_BarreSection.GetFirstChild("Quad_Barre")	as CMlQuad);
			Quad_Barre.Hide();
			Frame_BarreFocus.Show();
			Frame_BarreFocus.RelativePosition_V3.Y = 0.;
			LibManialink_SetTargetPosition(Frame_BarreFocus, <0.,-1.>);
			LibManialink_PresetAnim(Frame_BarreFocus, 50, "Linear");
			if (False /*G_DisplayType == "SoloCampaign" && C_CategoryColors.existskey(BarreSectionName[_Id])*/) {
				ColorQuadRed.Show();
				ColorQuadRed.BgColor = BarreSection_TextLib::ToColor(C_CategoryColors[BarreSectionName[_Id]]);
				declare CMlLabel	TextRed		<=> (Frames_Instance.GetFirstChild("TextRed") as CMlLabel);
				declare CMlQuad		OverQuadRed		<=> (Frames_Instance.GetFirstChild("OverQuadRed") as CMlQuad);
				OverQuadRed.Opacity = 0.;
				if (BarreSectionName[_Id] == "White") {
					TextRed.TextColor		= BarreSection_TextLib::ToColor("{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}");
				}
			} else {
				declare CMlQuad Quad_Section        <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
				Quad_Section.Opacity = 0.2;
			}
		}

		Void LightOver()
		{
			if(G_SectionOver == -1 || G_SectionFocus == G_SectionOver) return;

			if (False /*G_DisplayType == "SoloCampaign"*/) {
				declare CMlFrame Frames_Instance    <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^G_SectionOver^"0")	as CMlFrame);
				declare CMlQuad OverQuadRed			<=> (Frames_Instance.GetFirstChild("OverQuadRed") as CMlQuad);
				OverQuadRed.Show();
			} else {
				declare CMlFrame Frame_BarreSection <=> (Page.MainFrame.GetFirstChild("Frame_BarreSection"^G_SectionOver^"0")	as CMlFrame);
				declare CMlFrame Frame_BarreFocus   <=> (Frame_BarreSection.GetFirstChild("Frame_BarreFocus")	as CMlFrame);
				declare CMlQuad Quad_Barre          <=> (Frame_BarreSection.GetFirstChild("Quad_Barre")	as CMlQuad);
				Quad_Barre.Hide();
				Frame_BarreFocus.Show();
				LibManialink_SetTargetPosition(Frame_BarreFocus, <0.,-1.>);
				LibManialink_PresetAnim(Frame_BarreFocus, 50, "Linear");
			}
		}
		
		Void UnLightOver()
		{
			if(G_SectionOver == -1 || G_SectionFocus == G_SectionOver) return;

			if (False /*G_DisplayType == "SoloCampaign"*/) {
				declare CMlFrame Frames_Instance    <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^G_SectionOver^"0")	as CMlFrame);
				declare CMlQuad OverQuadRed			<=> (Frames_Instance.GetFirstChild("OverQuadRed") as CMlQuad);
				OverQuadRed.Hide();
			} else {
				declare CMlFrame Frame_BarreSection <=> (Page.MainFrame.GetFirstChild("Frame_BarreSection"^G_SectionOver^"0")	as CMlFrame);
				declare CMlFrame Frame_BarreFocus   <=> (Frame_BarreSection.GetFirstChild("Frame_BarreFocus")	as CMlFrame);
				declare CMlQuad Quad_Barre          <=> (Frame_BarreSection.GetFirstChild("Quad_Barre")	as CMlQuad);
				Quad_Barre.Show();
				Frame_BarreFocus.Hide();
				Frame_BarreFocus.RelativePosition_V3.Y = 0.;
			}
		}

		Void UnlightFocus() //ToClean
		{
			
			if(G_SectionFocus == -1) return;
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^G_SectionFocus^"0")	as CMlFrame);
			declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);

			Label_Section.TextColor = <1., 1., 1.>;
			//Label_Section.Hide();
			LibManialink_SetTargetScale(Label_Section, 1.0);
			LibManialink_PresetAnim(Label_Section, 50, "Linear");
		}

		Vec3 GetSectionColor()
		{
			return <1., 1., 0.>;
		}


		Void LaunchTransition(Boolean _IsShow)
		{
			declare Real TargetPosX;
			declare Text Animation;
			//declare Real InitialPosX;
			if(_IsShow)
			{
				TargetPosX  = 0.;
				Animation   = "EaseOutCubic";
				//InitialPosX = -200.;

			}
			else
			{
				TargetPosX  = -200.;
				Animation   = "EaseInCubic";
				//InitialPosX = 0.;
			}
			declare CMlFrame Frame_All <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
			Frame_All.RelativePosition_V3.X = 300.;
			LibManialink_SetTargetPosition(Frame_All, <TargetPosX, Frame_All.RelativePosition_V3.Y>);
			LibManialink_PresetAnimInsert(Frame_All, 0, 1000, Animation);
		}

		Void ShowTransition()
		{
			LaunchTransition(True);
		}

		Void HideTransition()
		{
			LaunchTransition(False);
		}

		Void SetSection(Text _MainTitle, Text[] _Sections_Name)
		{
			declare CMlLabel Label_HeaderTitle <=> (Page.GetFirstChild("Label_HeaderTitle") as CMlLabel);
			Label_HeaderTitle.SetText(_MainTitle);
			if (_Sections_Name.count == 0) {
				Label_HeaderTitle.Size = <180., 0.>;
			} else {
				Label_HeaderTitle.Size = <40., 0.>;
			}

			declare Text[]  BarreSectionLogo for Page;
			declare Vec3    BarreSectionColor for Page;
			for(I, 0, {{{Count_InstancesX - 1}}})
			{
				declare CMlFrame Frames_Instance    <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlFrame Frame_BarreSection <=> (Page.MainFrame.GetFirstChild("Frame_BarreSection"^I^"0")	as CMlFrame);
				declare CMlQuad Quad_Barre          <=> (Frame_BarreSection.GetFirstChild("Quad_Barre")	as CMlQuad);
				Quad_Barre.BgColor = BarreSectionColor;
				G_SectionMax = _Sections_Name.count;

				if(I < _Sections_Name.count)
				{
					declare CMlLabel Label_Section  <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
					declare CMlLabel TextRed		<=> (Frames_Instance.GetFirstChild("TextRed") as CMlLabel);
					declare CMlQuad Quad_SectionImg <=> (Frames_Instance.GetFirstChild("Quad_SectionImg")	as CMlQuad);
					declare CMlControl CampaignLabel <=> Frames_Instance.GetFirstChild("CampaignLabel");
					Quad_SectionImg.Opacity = 1.;

					declare Text SectionName = _Sections_Name[I];

					Quad_SectionImg.Style = "";
					Quad_SectionImg.Substyle = "";
					if(BarreSectionLogo.existskey(I))
					{
						Quad_SectionImg.ChangeImageUrl(BarreSectionLogo[I]);
						declare Text[] SectionsColor = ["Green", "Blue", "Red"];
						Quad_SectionImg.Colorize = <1., 1., 1.>;
						if(SectionsColor.exists(_Sections_Name[I]))
						{
							Quad_SectionImg.Colorize =  BarreSection_TextLib::ToColor(C_CategoryColors[_Sections_Name[I]]);
						}
						else if(_Sections_Name[I] == "Black")
						{
							Quad_SectionImg.Colorize =  BarreSection_TextLib::ToColor("555");
						}
					}
					else
					{
						Quad_SectionImg.ChangeImageUrl("");
						Quad_SectionImg.Opacity = 1.;
					}
					Frames_Instance.Show();
					//Frame_BarreSection.Show();
					Label_Section.Show();
					if (C_Localization.existskey(SectionName))
					{
						Label_Section.SetText(C_Localization[SectionName]);
					} else {
						Label_Section.SetText(SectionName);
					}
					CampaignLabel.Hide();
				}
				else
				{
					Frames_Instance.Hide();
				}
			}
			declare Frame_PageDown     <=> (Page.MainFrame.GetFirstChild("Frame_PageDown")	as CMlQuad);
			declare Integer Count		= BarreSection_MathLib::Min(_Sections_Name.count, {{{Count_InstancesX}}});
			Frame_PageDown.RelativePosition_V3.X = (Count - 1) * {{{SizeXQuad}}};
			declare Frame_Navigation <=> Page.GetFirstChild("Frame_Navigation");
			if ((G_SectionMax == 0) || (G_SectionMax == 1)) {
				Frame_Navigation.Hide();
			} else {
				Frame_Navigation.Show();
			}

			declare CMlFrame Frame_BarreGlobal <=> (Page.MainFrame.GetFirstChild("Frame_BarreGlobal")	as CMlFrame);
			foreach(Control in Frame_BarreGlobal.Controls)
			{
				declare CMlQuad Quad_Line          <=> (Control	as CMlQuad);
				Quad_Line.BgColor = BarreSectionColor;
			}
			if (_Sections_Name.count > 0)
			{
				G_SectionFocus = 0;
				G_Last_QuadFocus = 0;
			} else {
				G_SectionFocus = -1;
				G_Last_QuadFocus = -1;
			}
			ClearText();
		}
		

		Void Init()
		{
			Prompt_Init();
			G_SectionFocus = -1;
			for(I, 0, {{{Count_InstancesX - 1}}})
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlQuad Quad_Section     <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
				declare Integer QuadId for Quad_Section;
				QuadId = I;

			}
		}

		Void Input_PageUp()
		{
			if(G_Last_QuadFocus > 0)
			{
				CloseBarre(G_Last_QuadFocus);
				G_Last_QuadFocus -= 1;
				OpenBarre(G_Last_QuadFocus);
				SendCustomEvent("BarreSec_Click", [""^G_Last_QuadFocus]);
			}
		}

		Void Input_PageDown()
		{
			if(G_Last_QuadFocus< G_SectionMax-1)
			{
				CloseBarre(G_Last_QuadFocus);
				G_Last_QuadFocus += 1;
				OpenBarre(G_Last_QuadFocus);
				SendCustomEvent("BarreSec_Click", [""^G_Last_QuadFocus]);
			}
		}

		Void Input_Cancel()
		{
			CloseBarre(G_Last_QuadFocus);
			G_Last_QuadFocus = -1;
			G_SectionFocus = -1;
		}

		Void Click(Integer _ClickIndex)
		{
			CloseBarre(G_Last_QuadFocus);
			G_Last_QuadFocus = _ClickIndex;
			OpenBarre(_ClickIndex);
		}

		main() {
			
			Init();

			while(True) {
				
				yield;
				if (!PageIsVisible && PendingEvents.count == 0) continue;
				Prompt_Loop();
				LibManialink_AnimLoop();
				{{{LibButton_Img::IncludeInWhile(["Button_PageUp", "Button_PageDown"])}}}
				
				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Select : {
									//SendCustomEvent("GotoPage", ["StartDemo"]);
								}
								case CMlEvent::EMenuNavAction::PageUp : {
									Input_PageUp();
								}
								case CMlEvent::EMenuNavAction::PageDown : {
									Input_PageDown();
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Quad_Section")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.0);
								declare Integer QuadId for Event.Control;
								CloseBarre(G_Last_QuadFocus);
								G_Last_QuadFocus = QuadId;
								OpenBarre(QuadId);
								
								SendCustomEvent("BarreSec_Click", [""^QuadId]);
							} else if (Event.ControlId == "Click_PageUp") {
								Input_PageUp();
							} else if (Event.ControlId == "Click_PageDown") {
								Input_PageDown();
							} else if (Event.ControlId == "Quad_Rankings") {
								SendCustomEvent("Solo_ToRankings", Text[]);
								Input_Cancel();
							} else if (Event.ControlId == "Quad_RecordCenter") {
								SendCustomEvent("RecordCenterStart", Text[]);
								Input_Cancel();
							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "Quad_Section")
							{
								Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 1, 0.0);
								declare CMlQuad Quad_Button     <=> (Event.Control	as CMlQuad);
								declare Integer QuadId for Event.Control;
								G_SectionOver = QuadId;
								LightOver();
							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "Quad_Section")
							{
								declare CMlQuad Quad_Button <=> (Event.Control	as CMlQuad);
								//UnlightFocus();
								UnLightOver();
								G_SectionOver = -1;
								//G_SectionFocus = -1;
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.CustomEventType) {
								case "Show" : {
									//EnableMenuNavigation(True,False,Null,1);
									{{{LibButton_Img::IncludeInShow()}}}
									ShowTransition();
								}
								case "Hide" : {
									EnableMenuNavigation(True,False,Null,0);
									SendCustomEvent("DetachPage", ["BarreSection"]);
								}
								case "UpdateAll" : {
									declare Text[]	BarreSectionName		for Page;
									declare Text	BarreSectionTitle		for Page;
									declare Text	BarreSectionDisplayType	for Page;
									UpdateBaseDisplay(BarreSectionDisplayType);
									CloseBarre(G_Last_QuadFocus);
									SetSection(BarreSectionTitle, BarreSectionName);
									OpenBarre(G_Last_QuadFocus);
								}
								case "BarreSection_PageUp" : {
									Input_PageUp();
								}
								case "BarreSection_PageDown" : {
									Input_PageDown();
								}
								case "BarreSection_InputCancel" : {
									Input_Cancel();
								}
								case "UpdateText" : {
									UpdateText();
								}
								case "UpdateLogos" : {
									UpdateLogos();
								}
								case "SetRanking" : {
									SetRanking();
								}
								case "Click" : {
									declare Integer ClickIndex = BarreSection_TextLib::ToInteger(Event.CustomEventData[0]);
									Click(ClickIndex);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	return MLText;
}