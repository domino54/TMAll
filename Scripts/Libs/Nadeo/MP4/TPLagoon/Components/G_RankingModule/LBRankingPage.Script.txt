#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "TextLib"												as TextLib
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"					as Colors
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font

#Const Label_Score_HiddenPos	<15., 0.>
#Const Label_Score_ShownPos		<0., 0.>
#Const Label_Zone_HiddenPos		<-41., 0.>
#Const Label_Zone_ShownPos		<-13., 0.>

Text Build() {
	declare Real SizeXQuad      = 106.;
	declare Real SizeYQuad      = 10.9;
	declare Real SizeXQuadTrack = 46.;

	declare Integer Count_InstancesPlayerY = 10;
	declare Integer Count_InstancesPlayerX = 1;
	declare Real	MarginY_ButtonPlayer   = 0.3;
	declare Real	MarginX_ButtonPlayer   = 4.0;
	declare Real	PosXFirstPlayer        = 9.8;
	declare Real	PosYFirstPlayer        = 36.6;

	declare Integer Count_InstancesTrackY = 10;
	declare Integer Count_InstancesTrackX = 1;
	declare Real	MarginY_ButtonTrack   = 0.3;
	declare Real	MarginX_ButtonTrack   = 4.0;
	declare Real	PosXFirstTrack        = 58.8;
	declare Real	PosYFirstTrack        = 36.6;
	
	declare Integer Count_InstancesOpponentRecordY = 10;
	declare Integer Count_InstancesOpponentRecordX = 1;
	declare Real	MarginY_ButtonOpponentRecord = 0.3;
	declare Real	MarginX_ButtonOpponentRecord = 4.0;
	declare Real	PosXFirstOpponentRecord = 130.;
	declare Real	PosYFirstOpponentRecord = 36.6;

	declare Text    IMGArrow	          = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/FlecheTri.dds";
	declare Text    IMGButton	          = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_Scroll_v.dds";

	declare Text	Green2		= Colors::GetColorXml("Green2");

	declare Text	MainFont	= Font::GetFontName("Main");
	declare Text	ChronoFont	= Font::GetFontName("Chrono");
	declare Text	SubFont		= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_RankingPage">
	<framemodel id="MenuButtons_FrameModelPlayer">
		<frame id="Frame_Button">
			<quad  id="MenuButtons_Player" halign="right"   valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="0 0" z-index="-4"                     opacity="0.5"             bgcolor="000" scriptevents="1" />
			<quad  id="MenuButtons_Color"  halign="right"   valign="bottom" size="15.3 0.5" z-index="-3"             pos="0 {{{-SizeYQuad/2.}}}"               opacity="0."              bgcolor="090" scriptevents="1" />
			<quad  id="MenuButtons_Barre"  halign="center"  valign="center" size="0.2 {{{SizeYQuad-2.5}}}"          pos="{{{-SizeXQuad+10.4}}} 0"             opacity="0.2" z-index="-2" bgcolor="fff" hidden="1"/>
			<label id="MenuButtons_Score"  halign="right"   valign="center" size="14 {{{SizeYQuad}}}" textfont="{{{ChronoFont}}}" pos="-9 0.5"                 opacity="1.0" z-index="2" textsize="3" textcolor="{{{Green2}}}"/>
			<quad						   halign="left"	valign="center" size="5 5" pos="-8 0" style="Icons128x128_1" substyle="SkillPoints" keepratio="fit"/>
			<label id="MenuButtons_Rank"   halign="right"   valign="center" size="8 {{{SizeYQuad}}}" textfont="{{{ChronoFont}}}" pos="{{{-SizeXQuad+9.}}} {{{0.5}}}"       opacity="1.0" z-index="2" textsize="5" text=""/>
			<label id="MenuButtons_Label"  halign="left"    valign="center" size="{{{SizeXQuad - 38.}}} {{{SizeYQuad}}}"       pos="{{{-SizeXQuad+14.}}} {{{0.5}}}"      opacity="1.0" z-index="2" textsize="3" text=""/>
			<frame id="Frame_Select" z-index="-2" hidden="1">
				<quad id="MenuButtons_Select" halign="right"   valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="0 0" z-index="0" opacity="0.72" bgcolor="fff"/>
				<quad                         halign="right"   valign="center" size="6. {{{SizeYQuad}}}"  pos="{{{-SizeXQuad-0.5}}} 0" z-index="0" opacity="0.6" bgcolor="000"/>
				<quad id="MenuButtons_Arrow"  halign="center"  valign="center" size="2.2 2.2"  pos="{{{-SizeXQuad-3.5}}} 0" z-index="1" opacity="1.0" image="{{{IMGArrow}}}" rot="-90" keepratio="Fit"/>
			</frame>
		</frame>
	</framemodel>
	<framemodel id="MenuButtons_FrameModelOpponentRecord">
		<frame id="Frame_Button">
			<quad  id="MenuButtons_OpponentRecord" halign="right"   valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="0 0" z-index="-4"                     opacity="0.5"             bgcolor="000" bgcolorfocus="fff" scriptevents="1" />
			<quad  id="MenuButtons_Color"  halign="right"   valign="bottom" size="15.3 0.5" z-index="-3"             pos="0 {{{-SizeYQuad/2.}}}"               opacity="0."              bgcolor="090" scriptevents="1" />
			<quad  id="MenuButtons_Barre"  halign="center"  valign="center" size="0.2 {{{SizeYQuad-2.5}}}"          pos="{{{-SizeXQuad+10.4}}} 0"             opacity="0.2" z-index="-2" bgcolor="fff" hidden="1"/>
			<label id="MenuButtons_Score"  halign="right"   valign="center" size="14 {{{SizeYQuad}}}" textfont="{{{ChronoFont}}}" pos="-9 0.5"                 opacity="1.0" z-index="2" textsize="3" textcolor="{{{Green2}}}"/>
			<quad						   halign="left"	valign="center" size="5 5" pos="-8 0" style="Icons128x128_1" substyle="SkillPoints" keepratio="fit"/>
			<label id="MenuButtons_Rank"   halign="right"   valign="center" size="8 {{{SizeYQuad}}}" textfont="{{{ChronoFont}}}" pos="{{{-SizeXQuad+9.}}} {{{0.5}}}"       opacity="1.0" z-index="2" textsize="5" text=""/>
			<label id="MenuButtons_Label"  halign="left"    valign="center" size="{{{SizeXQuad - 38.}}} {{{SizeYQuad}}}"       pos="{{{-SizeXQuad+14.}}} {{{0.5}}}"      opacity="1.0" z-index="2" textsize="3" text=""/>
		</frame>
	</framemodel>
	<framemodel id="MenuButtons_FrameModelTrack">
		<frame id="Frame_Button">
			<quad id="MenuButtons_Track"  halign="right"   valign="center" size="{{{SizeXQuadTrack}}} {{{SizeYQuad}}}"  pos="0 0" z-index="1" opacity="0.5" bgcolor="000" scriptevents="1" />
			<quad id="MenuButtons_Color"  halign="left"    valign="center" size="0.6 {{{SizeYQuad}}}"  pos="0 0" z-index="1" opacity="0.3" bgcolor="fff" scriptevents="1" />

			<quad id="MenuButtons_Barre"  halign="center"  valign="center" size="0.2 {{{SizeYQuad-2.5}}}"  pos="{{{-SizeXQuadTrack+1.4}}} 0" z-index="3" opacity="0.4" bgcolor="fff"/>
			<quad id="MenuButtons_Arrow"  halign="center"  valign="center" size="2.2 2.2"  pos="{{{-SizeXQuadTrack+3.4}}} 0" z-index="3" opacity="1.0" image="{{{IMGArrow}}}" rot="-90" keepratio="Fit"/>

			<label id="MenuButtons_Score" halign="right"   valign="center" textfont="{{{ChronoFont}}}" pos="{{{-3.}}} 0.4" opacity="1.0" z-index="2" textsize="3" text="1543212"/>
			<label id="MenuButtons_Rank"  halign="right"   valign="center" textfont="{{{ChronoFont}}}" pos="{{{-SizeXQuadTrack+6.}}} 0." opacity="0.0" z-index="2" textsize="5" text="01"/>
			<label id="MenuButtons_Label" halign="left"    valign="center"                      pos="{{{-SizeXQuadTrack+6.}}} 0." opacity="1.0" z-index="2" textsize="3" text="A01"/>
		</frame>
	</framemodel>
	<frame id="Frame_All"  pos="0 0" z-index="20" hidden="0">
		<frame pos="0 0">
			<frame id="ButtonRecordCenter" pos="-135.3 41.5" hidden="1">
				<quad id="ButtonRecordCenterStart" size="41.2 10" z-index="-1" scriptevents="1"/>
				<quad id="ButtonRecordCenterStartOver" size="41.2 10" z-index="-2" bgcolor="000" opacity="0.5" hidden="1"/>
				<label size="41.2 10" pos="20 -5" textfont="{{{SubFont}}}" text="RECORD CENTER" valign="center" halign="center" textcolor="FFF"/>
				<frame id="RecordCenterContour">
					<quad halign="left" valign="top" size="0.5 10" bgcolor="fff"/>
					<quad halign="left" valign="center" size="41.2 0.5" bgcolor="fff"/>
					<quad halign="left" valign="center" size="41.2 0.5" bgcolor="fff" pos="0 -10"/>
					<quad halign="right" valign="top" size="0.5 10" bgcolor="fff" pos="41.2. 0"/>
				</frame>
			</frame>

			<label id="Label_PlayerZone" pos="{{{PosXFirstPlayer-SizeXQuad/2.}}} {{{PosYFirstPlayer+SizeYQuad}}}" halign="center"  valign="center" textfont="{{{MainFont}}}" opacity="1.0" z-index="2" textsize="5" text=""/>

			<frame id="Zone" halign="center" valign="center" pos="95.6 33">
				<frame pos="-88.5 14.9">
					<quad id="MenuButtons_ZonePrev"  halign="center"  valign="center" size="6.5 9.6"  z-index="3" image="{{{IMGButton}}}" keepratio="Fit" scriptevents="1" opacity="0" rot="180"/>
					<quad id="MenuButtons_ZoneDisplay"  halign="center"  valign="center" size="6.2 9.2"  z-index="3" opacity="1.0" image="{{{IMGButton}}}" keepratio="Fit" colorize="FFF" rot="180"/>
				</frame>
				<frame pos="-96. 15">
					<quad id="MenuButtons_ZoneNext"  halign="center"  valign="center" size="6.5 9.6"  z-index="3" image="{{{IMGButton}}}" keepratio="Fit" scriptevents="1" opacity="0"/>
					<quad id="MenuButtons_ZoneDisplay"  halign="center"  valign="center" size="6.2 9.2"  z-index="3" opacity="1.0" image="{{{IMGButton}}}" keepratio="Fit" colorize="FFF"/>
				</frame>
			</frame>
			""";
	for(I, 0, Count_InstancesPlayerY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstPlayer + IndexY*-SizeYQuad - IndexY*MarginY_ButtonPlayer*1.;
		for(J, 0, Count_InstancesPlayerX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstPlayer + IndexX*SizeXQuad + IndexX*MarginX_ButtonPlayer*1.;
			MLText^="""
				<frameinstance modelid="MenuButtons_FrameModelPlayer" z-index="5." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_ButtonPlayer{{{I}}}"/>
				""";
		}
	}
	MLText^="""
			</frame>
		<frame id="PlayerSeparator_Frame" hidden="1">
			<quad  id="PlayerSeparator" halign="right" valign="center" size="{{{SizeXQuad}}} 6.4" pos="9.8 -62.6" z-index="-4" opacity="0.5" bgcolor="000"/>
		</frame>
		<frame pos="0 0.0" id="Frame_PlayerTracks" hidden="1">
			""";
	for(I, 0, Count_InstancesTrackY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstTrack + IndexY*-SizeYQuad - IndexY*MarginY_ButtonTrack*1.;
		for(J, 0, Count_InstancesTrackX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstTrack + IndexX*SizeXQuadTrack + IndexX*MarginX_ButtonTrack*1.;
			MLText^="""
				<frameinstance modelid="MenuButtons_FrameModelTrack" z-index="5." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_ButtonTrack{{{I}}}"/>
				""";
		}
	}
	MLText^="""
		</frame>
		
		<label id="Label_OpponentName" pos="{{{PosXFirstOpponentRecord-SizeXQuad/2.}}} {{{PosYFirstOpponentRecord+SizeYQuad}}}" halign="center"  valign="center" textfont="{{{MainFont}}}" opacity="1.0" z-index="2" textsize="5" text=""/>
		<frame id="frame_OpponentRecords" hidden="1">""";
	for(I, 0, Count_InstancesOpponentRecordY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstOpponentRecord + IndexY*-SizeYQuad - IndexY*MarginY_ButtonOpponentRecord*1.;
		for(J, 0, Count_InstancesOpponentRecordX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstOpponentRecord + IndexX*SizeXQuad + IndexX*MarginX_ButtonOpponentRecord*1.;
			MLText^="""
				<frameinstance modelid="MenuButtons_FrameModelOpponentRecord" z-index="5." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_ButtonOpponentRecord{{{I}}}"/>
				""";
		}
	}
		MLText^="""
		</frame>

		<frame id="Frame_Header" z-index="1" pos="90.0 35" hidden="1">
			<quad id="Quad_Section" scriptevents="1" halign="right" valign="center" pos="26.5 -0.5" size="54.5 15"  opacity="0.4" bgcolor="000"/>
			<label id="Label_PlayerName"  halign="left"   valign="center" textfont="{{{SubFont}}}" pos="-23 2" z-index="2" textsize="2" textcolor="fff" text="PlayerName" size="30 0"/>
			<quad id="Quad_Flag" halign="right" valign="center" pos="22.0 2.9" z-index="2" size="6.5 5.5" bgcolor="00F" image="{{{LocalUser.CountryFlagUrl}}}"/>
			<frame id="Frame_InfoRanking" pos="-2.6 -0.8" z-index="1">

				<frame id="Clip_Score" halign="center" valign="center" size="16.6 4" pos="-16.0 -2">
					<label id="Label_Score" halign="center" valign="center" textfont="{{{SubFont}}}" textsize="2" textcolor="ff3" opacity="1." text="393 SP" size="20 0" pos="{{{Label_Score_ShownPos[0]}}} {{{Label_Score_ShownPos[1]}}}"/>
				</frame>

				<quad halign="center" valign="center" pos="-7.5 -2" z-index="1" size="0.4 4.0"  opacity="1.0" bgcolor="fff"/>

				<frame id="Clip_Zone" halign="center" valign="center" size="31 4" pos="8.3 -2 1">
					<label id="Label_Zone"  halign="left" valign="center" textfont="{{{SubFont}}}" textsize="1" textcolor="fff" opacity="1." text="Paris [France]" size="30 0" pos="{{{Label_Zone_ShownPos[0]}}} {{{Label_Zone_ShownPos[1]}}}"/>
				</frame>
			</frame>
		</frame>

		<frame id="Frame_Habillage">
			<frame id="Habillage_Menu_Down" pos="10.0  -72.5">
				<quad id="Line0" halign="right" valign="top" size="{{{SizeXQuad}}} 0.2" opacity="0.7" bgcolor="fff"/>
				<quad id="Line1" halign="right" valign="bottom" size="9  0.4" pos="0 0." opacity="0.7" bgcolor="fff"/>
			</frame>
			<frame id="Habillage_Menu_HeaderDown" pos="116.5  24.5" hidden="1">
				<quad halign="right" valign="top" size="54.5 0.2" opacity="0.7" bgcolor="fff"/>
				<quad halign="right" valign="bottom" size="9  0.4" pos="0 0." opacity="0.7" bgcolor="fff"/>
			</frame>
		</frame>
	</frame>
	
	
	<script><!--
		#Const C_TimeNextZone  4500
		
		#Struct K_MapRecord {
			Text MapName;
			Integer SkillPoints;
			Text Thumbnail;
			Text MapPath;
			Text ReplayLogin;
			Text ReplayFileName;
			Text ReplayUrl;
		}

		{{{Manialink::GetIncludes()}}}
		
		declare Text[]				G_ZoneNames;
		declare Integer[]			G_ZoneScores;
		declare Integer				G_ZoneFocus;
		declare Integer				G_TimeNextZone;
		declare Boolean				G_InfoRankingIsShow;
		declare Integer				G_HideTime;
		declare Integer				G_MenuButton_Player_FocusY;
		declare Integer				G_MenuButton_Player_SelectY;
		declare CMlControl			G_MenuButton_ControlFocus;
		declare Integer				G_MenuButton_Track_FocusY;
		declare Integer				G_Max_Players;
		declare Integer				G_Max_Tracks;
		declare Integer				G_ZonePlayerFocus;
		declare Integer				G_ZonePlayerMax;
		declare Text[]				G_PlayerZones;
		declare Boolean[Integer]	G_ActiveQuad;
		{{{Manialink::Load()}}}
	
		Void UpdateAll()
		{
			declare CMlFrame Frame_All <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
			//Frame_All.Visible = _Visibility;
		}

		Void UpdateFrame_PlayerTracks()
		{
			declare CMlFrame Frame_PlayerTracks <=> (Page.MainFrame.GetFirstChild("Frame_PlayerTracks")	as CMlFrame);
			if(G_MenuButton_Player_SelectY != -1)
			{
				//Frame_PlayerTracks.Show();
			}
			else
			{
				Frame_PlayerTracks.Hide();
			}
		}

		Void ShowInfoRanking()
		{
			declare CMlFrame Frame_InfoRanking <=> (Page.MainFrame.GetFirstChild("Frame_InfoRanking")	as CMlFrame);
			declare CMlLabel Label_Score       <=> (Frame_InfoRanking.GetFirstChild("Label_Score")	as CMlLabel);
			declare CMlLabel Label_Zone        <=> (Frame_InfoRanking.GetFirstChild("Label_Zone")	as CMlLabel);

			declare Integer AnimationTime = 1000;

			declare Vec2 NewFramePosition = {{{Label_Score_ShownPos}}};
			LibManialink_SetTargetPosition(Label_Score, NewFramePosition);
			LibManialink_PresetAnim(Label_Score, AnimationTime, "EaseInOutBack");

			declare Vec2 NewFramePosition2 = {{{Label_Zone_ShownPos}}};
			LibManialink_SetTargetPosition(Label_Zone, NewFramePosition2);
			LibManialink_PresetAnim(Label_Zone, AnimationTime, "EaseInOutBack");


			declare CMlFrame Habillage_Menu_Down <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Down")	as CMlFrame);
			declare CMlQuad  Line0               <=> (Habillage_Menu_Down.GetFirstChild("Line0")	as CMlQuad);
			declare CMlQuad  Line1               <=> (Habillage_Menu_Down.GetFirstChild("Line1")	as CMlQuad);
			declare Vec2 Menu_DownPos = <60.0, Habillage_Menu_Down.RelativePosition_V3.Y>;
			LibManialink_SetTargetPosition(Habillage_Menu_Down, Menu_DownPos);
			LibManialink_PresetAnim(Habillage_Menu_Down, AnimationTime, "EaseOutQuint");
			declare Vec2 Line0Size = <136., Line0.Size.Y>;
			LibManialink_SetTargetSize(Line0, Line0Size);
			LibManialink_PresetAnim(Line0, AnimationTime, "EaseOutQuint");
		}
		
		Void HideInfoRanking()
		{
			declare CMlFrame Frame_InfoRanking <=> (Page.MainFrame.GetFirstChild("Frame_InfoRanking")	as CMlFrame);
			declare CMlLabel Label_Score       <=> (Frame_InfoRanking.GetFirstChild("Label_Score")	as CMlLabel);
			declare CMlLabel Label_Zone        <=> (Frame_InfoRanking.GetFirstChild("Label_Zone")	as CMlLabel);

			declare Integer AnimationTime = 1000;

			declare Vec2 NewFramePosition = {{{Label_Score_HiddenPos}}};
			LibManialink_SetTargetPosition(Label_Score, NewFramePosition);
			LibManialink_PresetAnim(Label_Score, AnimationTime, "EaseInOutBack");

			declare Vec2 NewFramePosition2 = {{{Label_Zone_HiddenPos}}};
			LibManialink_SetTargetPosition(Label_Zone, NewFramePosition2);
			LibManialink_PresetAnim(Label_Zone, AnimationTime, "EaseInOutBack");


			declare CMlFrame Habillage_Menu_Down <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Down")	as CMlFrame);
			declare CMlQuad  Line0               <=> (Habillage_Menu_Down.GetFirstChild("Line0")	as CMlQuad);
			declare CMlQuad  Line1               <=> (Habillage_Menu_Down.GetFirstChild("Line1")	as CMlQuad);
			declare Vec2 Menu_DownPos = <10.0, Habillage_Menu_Down.RelativePosition_V3.Y>;
			LibManialink_SetTargetPosition(Habillage_Menu_Down, Menu_DownPos);
			LibManialink_PresetAnim(Habillage_Menu_Down, AnimationTime, "EaseOutQuint");
			declare Vec2 Line0Size = <86., Line0.Size.Y>;
			LibManialink_SetTargetSize(Line0, Line0Size);
			LibManialink_PresetAnim(Line0, AnimationTime, "EaseOutQuint");
		}

		Void UpdateInfos()
		{
			declare CMlFrame Frame_InfoRanking <=> (Page.MainFrame.GetFirstChild("Frame_InfoRanking")	as CMlFrame);
			declare CMlLabel Label_Score       <=> (Frame_InfoRanking.GetFirstChild("Label_Score")	as CMlLabel);
			declare CMlLabel Label_Zone        <=> (Frame_InfoRanking.GetFirstChild("Label_Zone")	as CMlLabel);

			Label_Zone.SetText(G_ZoneNames[G_ZoneFocus]);
			Label_Score.SetText(G_ZoneScores[G_ZoneFocus] ^ " SP");
		}

		Void Init()
		{
			G_ZoneNames.add("WORLD : 593/879");
			G_ZoneNames.add("FRANCE : 154/189");
			G_ZoneNames.add("PARIS : 102/122");
			G_ZoneScores.add(2123);
			G_ZoneScores.add(821);
			G_ZoneScores.add(12);

			G_InfoRankingIsShow         = True;
			G_ZoneFocus                 = 0;
			G_ZonePlayerFocus           = 0;
			G_MenuButton_Player_SelectY = -1;
			G_MenuButton_Track_FocusY   = -1;
			G_MenuButton_Player_FocusY  = -1;
			G_Max_Players               = {{{Count_InstancesPlayerY}}};
			G_Max_Tracks                = {{{Count_InstancesTrackY}}};
			G_TimeNextZone              = Now + C_TimeNextZone;
			UpdateInfos();

			for(I, 0, {{{Count_InstancesPlayerY-1}}})
			{
				declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonPlayer"^I) as CMlFrame);
				declare CMlQuad  MenuButtons_Player <=> (ButtonsFrame.GetFirstChild("MenuButtons_Player")	as CMlQuad);
				declare CMlLabel MenuButtons_Rank   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
				declare Integer QuadId for MenuButtons_Player;
				QuadId = I;
			}
			for(I, 0, {{{Count_InstancesOpponentRecordY-1}}})
			{
				declare CMlFrame ButtonsFrame <=> (Page.GetFirstChild("Frame_ButtonOpponentRecord"^I) as CMlFrame);
				declare CMlQuad MenuButtons_OpponentRecord <=> (ButtonsFrame.GetFirstChild("MenuButtons_OpponentRecord") as CMlQuad);
				declare Integer QuadId for MenuButtons_OpponentRecord;
				QuadId = I;
			}
			for(I, 0, {{{Count_InstancesTrackY-1}}})
			{
				declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonTrack"^I) as CMlFrame);
				declare CMlQuad  MenuButtons_Track <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
				declare Integer QuadId for MenuButtons_Track;
				QuadId = I;
			}
		}

		Void NextZone()
		{
			if(G_InfoRankingIsShow)
			{
				G_TimeNextZone = Now + 700;
				HideInfoRanking();
			}
			else
			{
				if(G_ZoneFocus >= G_ZoneNames.count-1) G_ZoneFocus = 0;
				else G_ZoneFocus += 1;
				
				UpdateInfos();

				ShowInfoRanking();
				G_TimeNextZone = Now + C_TimeNextZone;
			}
			G_InfoRankingIsShow = !G_InfoRankingIsShow;
		}


		Void UnlightFocusPlayer()
		{
			if(G_HideTime > Now || G_MenuButton_Player_FocusY == -1) return;
			if(G_MenuButton_ControlFocus == Null) return;
			
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^G_MenuButton_Player_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			//declare CMlQuad  MenuButtons_Player  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Player")	as CMlQuad);
			declare CMlQuad  MenuButtons_Player  <=> (G_MenuButton_ControlFocus as CMlQuad);
			
			MenuButtons_Player.BgColor = <0., 0., 0.>;
		}

		Void UnlightFocusTrack()
		{
			if(G_HideTime > Now || G_MenuButton_Track_FocusY == -1) return;
			//if(G_MenuButton_ControlFocus == Null) return;
			declare CMlFrame ButtonsFrame        <=> (Page.GetFirstChild("Frame_ButtonTrack"^G_MenuButton_Track_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad MenuButtons_Track   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
			//declare CMlQuad  MenuButtons_Track   <=> (G_MenuButton_ControlFocus as CMlQuad);
			
			MenuButtons_Track.BgColor = <0., 0., 0.>;
		}

		Void LightFocusPlayer()
		{

			if(G_HideTime > Now || G_MenuButton_Player_FocusY <= -1) return;
			if(G_MenuButton_ControlFocus == Null) return;

			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^G_MenuButton_Player_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Player  <=> (G_MenuButton_ControlFocus as CMlQuad);

			MenuButtons_Player.BgColor = <1., 1., 1.>;
			UnlightFocusTrack();
		}
		
		Void LightFocusTrack()
		{

			if(G_HideTime > Now || G_MenuButton_Track_FocusY <= -1) return;
			//if(G_MenuButton_ControlFocus == Null) return;
			//log("G_MenuButton_Track_FocusY: " ^ G_MenuButton_Track_FocusY);
			
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonTrack"^G_MenuButton_Track_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Track <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
			//declare CMlQuad  MenuButtons_Track   <=> (G_MenuButton_ControlFocus as CMlQuad);

			MenuButtons_Track.BgColor = <1., 1., 1.>;
			//UnlightFocusPlayer();
		}


		Void AnimSelectPlayer()
		{
			declare Integer DecaleTime;
			declare Integer AddTime = 60;
			for(I, 0, {{{Count_InstancesTrackY-1}}})
			{
				declare CMlFrame  ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonTrack"^I) as CMlFrame);
				declare CMlFrame  Frame_Button      <=> (ButtonsFrame.GetFirstChild("Frame_Button")	as CMlFrame);
				declare CMlQuad   MenuButtons_Track <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
				declare CMlQuad   MenuButtons_Color <=> (ButtonsFrame.GetFirstChild("MenuButtons_Color")	as CMlQuad);
				declare CMlLabel  MenuButtons_Score <=> (ButtonsFrame.GetFirstChild("MenuButtons_Score")	as CMlLabel);
				declare CMlLabel  MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
				declare CMlQuad   MenuButtons_Barre <=> (ButtonsFrame.GetFirstChild("MenuButtons_Barre")	as CMlQuad);
				declare CMlQuad   MenuButtons_Arrow <=> (ButtonsFrame.GetFirstChild("MenuButtons_Arrow")	as CMlQuad);
				MenuButtons_Track.Opacity = 0.;
				MenuButtons_Color.Opacity = 0.;
				MenuButtons_Score.Opacity = 0.;
				MenuButtons_Label.Opacity = 0.;
				MenuButtons_Barre.Opacity = 0.;
				MenuButtons_Arrow.Opacity = 0.;
				if(I < G_Max_Tracks)
				{
					
					Frame_Button.RelativePosition_V3.X = 7.;
					LibManialink_AnimStop(MenuButtons_Track);
					LibManialink_AnimStop(MenuButtons_Color);
					LibManialink_AnimStop(MenuButtons_Score);
					LibManialink_AnimStop(MenuButtons_Label);
					LibManialink_AnimStop(MenuButtons_Barre);
					LibManialink_AnimStop(MenuButtons_Arrow);
					LibManialink_SetTargetOpacity(MenuButtons_Track, 0.5);
					LibManialink_PresetAnimInsert(MenuButtons_Track, DecaleTime+20, 150, "EaseOutCubic");
					LibManialink_SetTargetOpacity(MenuButtons_Color, 0.5);
					LibManialink_PresetAnimInsert(MenuButtons_Color, DecaleTime+20, 150, "EaseOutCubic");
					LibManialink_SetTargetOpacity(MenuButtons_Score, 1.);
					LibManialink_PresetAnimInsert(MenuButtons_Score, DecaleTime+20, 150, "EaseOutCubic");
					LibManialink_SetTargetOpacity(MenuButtons_Label, 1.);
					LibManialink_PresetAnimInsert(MenuButtons_Label, DecaleTime, 150, "EaseOutCubic");
					LibManialink_SetTargetOpacity(MenuButtons_Barre, 0.4);
					LibManialink_PresetAnimInsert(MenuButtons_Barre, DecaleTime, 150, "EaseOutCubic");
					LibManialink_SetTargetOpacity(MenuButtons_Arrow, 1.);
					LibManialink_PresetAnimInsert(MenuButtons_Arrow, DecaleTime, 150, "EaseOutCubic");
					LibManialink_AnimStop(Frame_Button);
					LibManialink_SetTargetPosition(Frame_Button, <0., 0.>);
					LibManialink_PresetAnimInsert(Frame_Button, DecaleTime, 400, "EaseOutCubic");
					DecaleTime += AddTime;
				}
				
			}

		}

		Void SetRankText(CMlLabel _Label, Integer _Rank, Boolean _IsSelect)
		{
			declare Text Color    = "$0000$fff";
			declare Text ColorInv = "$fff";
			if(_IsSelect)
			{
				Color    = "$fff0$000";
				ColorInv = "$000";
			}

			if(_Rank < 10)
			{
				_Label.SetText(Color ^ _Rank);
			}
			else
			{
				_Label.SetText(ColorInv ^ _Rank);
			}
		}

		Void Update_PlayersLabels()
		{
			declare Text[]		Page_PlayersNameList	for Page;
			declare Integer[]	Page_PlayersRankList	for Page;
			declare Integer[]	Page_PlayersScoreList	for Page;
			declare Text		Page_PlayersZone		for Page;
			declare Text[]	Page_PlayersLoginList for Page;
			G_MenuButton_Player_FocusY = 0;
			declare CMlLabel Label_PlayerZone <=> (Page.MainFrame.GetFirstChild("Label_PlayerZone")	as CMlLabel);

			Label_PlayerZone.SetText(Page_PlayersZone); //G_PlayerZones[G_ZonePlayerFocus]

			declare Integer LastRank = 0;
			for(I, 0, {{{Count_InstancesPlayerY-1}}})
			{
				declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^I) as CMlFrame);
				declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
				declare CMlLabel MenuButtons_Score <=> (ButtonsFrame.GetFirstChild("MenuButtons_Score")	as CMlLabel);
				declare CMlLabel MenuButtons_Rank  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
				declare CMlQuad  MenuButtons_Barre <=> (ButtonsFrame.GetFirstChild("MenuButtons_Barre")	as CMlQuad);
				declare CMlFrame PlayerSeparator_Frame <=> (Page.GetFirstChild("PlayerSeparator_Frame") as CMlFrame);
				declare CMlFrame Habillage_Menu_Down <=> (Page.GetFirstChild("Habillage_Menu_Down") as CMlFrame);

				if(Page_PlayersNameList.existskey(I))
				{
					MenuButtons_Barre.Show();
					G_ActiveQuad[I] = True;
					MenuButtons_Label.SetText(Page_PlayersNameList[I]);
					MenuButtons_Rank.Opacity = 1.0;
					declare Integer Rank = Page_PlayersRankList[I];
					SetRankText(MenuButtons_Rank, Rank, False);
					
					LastRank = Rank;
					MenuButtons_Score.SetText(""^Page_PlayersScoreList[I]);
					if (I == {{{Count_InstancesPlayerY - 1}}}) {
						if (Rank > {{{Count_InstancesPlayerY}}} && LocalUser.Login == Page_PlayersLoginList[I]) {
							PlayerSeparator_Frame.Show();
							ButtonsFrame.RelativePosition_V3.Y = - 72.2;
							Habillage_Menu_Down.RelativePosition_V3.Y = - 80.5;
						} else {
							PlayerSeparator_Frame.Hide();
							ButtonsFrame.RelativePosition_V3.Y = - 64.2;
							Habillage_Menu_Down.RelativePosition_V3.Y = - 72.5;
						}
					}
				}
				else
				{
					LastRank += 1;
					SetRankText(MenuButtons_Rank, LastRank, False);
					MenuButtons_Barre.Hide();
					G_ActiveQuad[I] = False;
					MenuButtons_Label.SetText("");
					MenuButtons_Score.SetText("");
					MenuButtons_Rank.Opacity = 0.5;
				}
			}
			G_Max_Players = Page_PlayersNameList.count;
		}
		
		Void Update_OpponentRecords() {
			declare CMlFrame Frame_OpponentRecords <=> (Page.GetFirstChild("frame_OpponentRecords") as CMlFrame);
			Frame_OpponentRecords.Visible = True;
			
			declare K_MapRecord[] Ranking_OpponentRecords for Page;
			for(I, 0, {{{Count_InstancesOpponentRecordY-1}}})
			{
				declare CMlFrame ButtonsFrame      <=> (Frame_OpponentRecords.GetFirstChild("Frame_ButtonOpponentRecord"^I) as CMlFrame);
				declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
				declare CMlLabel MenuButtons_Score <=> (ButtonsFrame.GetFirstChild("MenuButtons_Score")	as CMlLabel);
				declare CMlLabel MenuButtons_Rank  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
				declare CMlQuad  MenuButtons_Barre <=> (ButtonsFrame.GetFirstChild("MenuButtons_Barre")	as CMlQuad);

				if(Ranking_OpponentRecords.existskey(I)) {
					declare K_MapRecord Record = Ranking_OpponentRecords[I];
					MenuButtons_Barre.Show();
					MenuButtons_Label.SetText(Record.MapName);
					MenuButtons_Score.SetText(""^Record.SkillPoints);
					MenuButtons_Rank.Opacity = 1.0;
				} else {
					MenuButtons_Barre.Hide();
					MenuButtons_Label.SetText("");
					MenuButtons_Score.SetText("");
					MenuButtons_Rank.Opacity = 0.5;
				}
				SetRankText(MenuButtons_Rank, I + 1, False);
			}
		}
		
		Void Select_OpponentRecord(Integer _QuadId) {
			declare K_MapRecord[] Ranking_OpponentRecords for Page;
			if(Ranking_OpponentRecords.existskey(_QuadId)) {
				declare K_MapRecord Record = Ranking_OpponentRecords[_QuadId];
				SendCustomEvent("Solo_PlayMap", [Record.MapPath, Record.Thumbnail, Record.ReplayLogin, Record.ReplayFileName, Record.ReplayUrl]);
			}
		}

		Void Update_TracksLabels()
		{
			for(I, 0, {{{Count_InstancesTrackY-1}}})
			{

			}
		}

		Void SelectPlayer(Integer _QuadId)
		{
			declare Integer[]	Page_PlayersRankList	for Page;
			if(_QuadId == -1 || !Page_PlayersRankList.existskey(_QuadId)) return;
			declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonPlayer"^_QuadId) as CMlFrame);
			declare CMlFrame Frame_Button       <=> (ButtonsFrame.GetFirstChild("Frame_Button")	as CMlFrame);
			declare CMlQuad  MenuButtons_Color  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Color")	as CMlQuad);
			declare CMlFrame  Frame_Select      <=> (ButtonsFrame.GetFirstChild("Frame_Select")	as CMlFrame);
			declare CMlLabel MenuButtons_Rank   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
			MenuButtons_Color.BgColor = <1.,1.,1.>;
			SetRankText(MenuButtons_Rank, Page_PlayersRankList[_QuadId], True);
			
			MenuButtons_Color.Opacity = 1.;
			G_MenuButton_Player_SelectY = _QuadId;
			UnlightFocusPlayer();
			G_MenuButton_Player_FocusY = -1;
			AnimSelectPlayer();
			Frame_Select.Show();
		}

		Void UnSelectPlayer()
		{
			if(G_MenuButton_Player_SelectY == -1) return;
			declare Integer[]	Page_PlayersRankList	for Page;
			declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonPlayer"^G_MenuButton_Player_SelectY) as CMlFrame);
			declare CMlFrame Frame_Button       <=> (ButtonsFrame.GetFirstChild("Frame_Button")	as CMlFrame);
			declare CMlQuad  MenuButtons_Color  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Color")	as CMlQuad);
			declare CMlFrame  Frame_Select      <=> (ButtonsFrame.GetFirstChild("Frame_Select")	as CMlFrame);
			declare CMlLabel MenuButtons_Rank   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
			MenuButtons_Color.Opacity   = 0.;
			SetRankText(MenuButtons_Rank, Page_PlayersRankList[G_MenuButton_Player_SelectY], False);
			G_MenuButton_Player_SelectY = -1;
			Frame_Select.Hide();
			LibManialink_SetTargetPosition(Frame_Button, <0., 0.>);
			LibManialink_PresetAnim(Frame_Button, 200, "EaseOutCubic");

		}

		Void FocusPlayerByX(Integer _PosX)
		{
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^_PosX) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Player  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Player")	as CMlQuad);
			G_MenuButton_ControlFocus = MenuButtons_Player;
		}

		Void FocusTrackByX(Integer _PosX)
		{
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonTrack"^_PosX) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Track  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
			G_MenuButton_ControlFocus = MenuButtons_Track;
		}
		
		Void GetOpponentRecord(Integer _QuadId) {
			SendCustomEvent("GetOpponentRecords", [_QuadId^""]);
			
			declare Text[] Page_PlayersNameList for Page;
			if (Page_PlayersNameList.existskey(_QuadId)) {
				declare CMlLabel Label_OpponentName <=> (Page.MainFrame.GetFirstChild("Label_OpponentName")	as CMlLabel);
				Label_OpponentName.Value = Page_PlayersNameList[_QuadId];
			}
		}

		Void PressSelect(Integer _QuadId)
		{
			GetOpponentRecord(_QuadId);
			
			// On supprime les profiles côté live. Je laisse le code commenté au cas où on aurait de nouveaux des profiles.
			// SendCustomEvent("ShowProfile", [_QuadId^""]);
			return;
		}


		Void UpdateZoneArrow()
		{
			declare CMlQuad MenuButtons_ZoneNext <=> (Page.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
			declare CMlQuad MenuButtons_ZonePrev <=> (Page.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
			declare CMlQuad MenuButtons_ZoneNextDisplay <=> (MenuButtons_ZoneNext.Parent.GetFirstChild("MenuButtons_ZoneDisplay")	as CMlQuad);
			declare CMlQuad MenuButtons_ZonePrevDisplay <=> (MenuButtons_ZonePrev.Parent.GetFirstChild("MenuButtons_ZoneDisplay")	as CMlQuad);
			declare Integer NewDataList_GroupCount   for Page;
			
			//if(G_ZonePlayerFocus == G_ZonePlayerMax-1) {
			if(G_ZonePlayerFocus == G_ZonePlayerMax-1 + NewDataList_GroupCount +0) {
				MenuButtons_ZoneNext.Hide();
				MenuButtons_ZoneNextDisplay.Opacity = 0.2;
			} else {
				MenuButtons_ZoneNext.Show();
				MenuButtons_ZoneNextDisplay.Opacity = 0.8;
			}

			if(G_ZonePlayerFocus == 0) {
				MenuButtons_ZonePrev.Hide();
				MenuButtons_ZonePrevDisplay.Opacity = 0.2;
			} else {
				MenuButtons_ZonePrev.Show();
				MenuButtons_ZonePrevDisplay.Opacity = 0.8;
			}
		}

		Void ZoneNext()
		{
			declare Integer NewDataList_GroupCount   for Page;
			if(G_ZonePlayerFocus >= G_ZonePlayerMax-1 + NewDataList_GroupCount +0) return;
			G_ZonePlayerFocus += 1;
			UpdateZoneArrow();
			SendCustomEvent("GetPlayerInfo", [G_ZonePlayerFocus^""]);
			
		}
		
		Void ZonePrevious()
		{
			if(G_ZonePlayerFocus <= 0) return;
			G_ZonePlayerFocus -= 1;
			UpdateZoneArrow();
			SendCustomEvent("GetPlayerInfo", [G_ZonePlayerFocus^""]);
		}

		Void AnimShow()
		{
			declare Integer Speed = 1000;
			declare CMlFrame Frame_All               <=> (Page.GetFirstChild("Frame_All") as CMlFrame);
			declare Integer Decal = 100;
			for(I, 0 , {{{Count_InstancesPlayerY - 1}}})
			{
				declare Vec2 NewFramePosition = {{{Label_Score_ShownPos}}};
				declare CMlFrame Frame_ButtonPlayer <=> (Page.GetFirstChild("Frame_ButtonPlayer"^I) as CMlFrame);
				declare CMlFrame Frame_Button       <=> (Frame_ButtonPlayer.GetFirstChild("Frame_Button") as CMlFrame);
				Frame_Button.RelativePosition_V3.X = 40.+I*6.;
				LibManialink_AnimStop(Frame_Button);
				LibManialink_SetTargetPosition(Frame_Button, <0., 0.>);
				LibManialink_PresetAnimInsert(Frame_Button, Decal, Speed/2, "EaseOutCubic");
				if (I == {{{Count_InstancesPlayerY - 1}}}) {
					declare CMlFrame PlayerSeparator_Frame <=> (Page.GetFirstChild("PlayerSeparator_Frame") as CMlFrame);
					PlayerSeparator_Frame.RelativePosition_V3.X = 40.+I*6.;
					LibManialink_AnimStop(PlayerSeparator_Frame);
					LibManialink_SetTargetPosition(PlayerSeparator_Frame, <0., 0.>);
					LibManialink_PresetAnimInsert(PlayerSeparator_Frame, Decal, Speed/2, "EaseOutCubic");
				}
				Decal += 40;
			}
			
			Frame_All.RelativePosition_V3.X = 250.;
			LibManialink_AnimStop(Frame_All);
			LibManialink_SetTargetPosition(Frame_All, <0., 0.>);
			LibManialink_PresetAnimInsert(Frame_All, 100, Speed, "EaseOutCubic");
		}

		Void ShowPage(Text _PrevPage)
		{
			if(_PrevPage == "SectionsSelector")
			{
				AnimShow();
			}


			G_PlayerZones = TL::Split("|", LocalUser.ZonePath);
			if (G_PlayerZones.count == 0) {
				G_ZonePlayerMax = 1;
				G_ZonePlayerFocus = 0;
			} else {
				G_ZonePlayerMax = G_PlayerZones.count;
				G_ZonePlayerFocus = G_PlayerZones.count-1;
			}
			UpdateZoneArrow();
			G_MenuButton_Player_SelectY = -1;
			UpdateFrame_PlayerTracks();
			//UnlightFocusPlayer();
			//G_MenuButton_Player_FocusY = -1;
			SendCustomEvent("GetPlayerInfo", [G_ZonePlayerFocus^""]);
		}

		Void CancelPlayerSelect(Integer _PlayerFocus)
		{
			G_MenuButton_Player_FocusY = _PlayerFocus;
			UnSelectPlayer();
			UpdateFrame_PlayerTracks();
			G_MenuButton_Player_SelectY = -1;
			FocusPlayerByX(G_MenuButton_Player_FocusY);
			LightFocusPlayer();
		}

		main() {
			
			Init();
			

			while(True) {
				
				yield;
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
				

				//if(G_TimeNextZone < Now && G_TimeNextZone != -1) NextZone();

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlScriptEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlScriptEvent::EMenuNavAction::Action1 : {
									//if(G_InfoRankingIsShow) HideInfoRanking();
									//else					ShowInfoRanking();
									//G_InfoRankingIsShow = !G_InfoRankingIsShow;
								}
								case CMlScriptEvent::EMenuNavAction::Cancel : {
									if(G_MenuButton_Player_SelectY != -1)
									{
										CancelPlayerSelect(G_MenuButton_Player_SelectY);
									}
									else
									{
										SendCustomEvent("GotoPrevious", []);
									}
								}
								case CMlScriptEvent::EMenuNavAction::Down : {
									if(G_MenuButton_Player_SelectY == -1 || G_MenuButton_Player_FocusY != -1)
									{
										if(G_MenuButton_Player_FocusY < G_Max_Players-1)
										{
											UnlightFocusPlayer();
											G_MenuButton_Player_FocusY += 1;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
										else if(G_MenuButton_Player_FocusY == -1)
										{
											G_MenuButton_Player_FocusY = 0;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
									}
									else if(G_MenuButton_Player_SelectY != -1)
									{
										if(G_MenuButton_Track_FocusY < G_Max_Tracks-1)
										{
											UnlightFocusTrack();
											G_MenuButton_Track_FocusY += 1;
											FocusTrackByX(G_MenuButton_Track_FocusY);
											LightFocusTrack();
										}
										else if(G_MenuButton_Track_FocusY == -1)
										{
											G_MenuButton_Track_FocusY = 0;
											FocusTrackByX(G_MenuButton_Track_FocusY);
											LightFocusTrack();
										}
									}
								}
								case CMlScriptEvent::EMenuNavAction::Right : {
									if(G_MenuButton_Player_SelectY == -1)
									{
										ZonePrevious();
									}
								}
								case CMlScriptEvent::EMenuNavAction::Left : {
									if(G_MenuButton_Player_SelectY == -1)
									{
										ZoneNext();
									}
								}
								case CMlScriptEvent::EMenuNavAction::PageUp : {
									SendCustomEvent("Barre_PageUp", [""]);
								}
								case CMlScriptEvent::EMenuNavAction::PageDown : {
									SendCustomEvent("Barre_PageDown", [""]);
								}
								case CMlScriptEvent::EMenuNavAction::Up : {
									if(G_MenuButton_Player_SelectY == -1 || G_MenuButton_Player_FocusY != -1)
									{
										if(G_MenuButton_Player_FocusY > 0)
										{
											UnlightFocusPlayer();
											G_MenuButton_Player_FocusY -= 1;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
										else
										{
											G_MenuButton_Player_FocusY = 0;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
									}
									else if(G_MenuButton_Player_SelectY != -1)
									{
										if(G_MenuButton_Track_FocusY > 0)
										{
											UnlightFocusTrack();
											G_MenuButton_Track_FocusY -= 1;
											FocusTrackByX(G_MenuButton_Track_FocusY);
											LightFocusTrack();
										}
										else
										{
											G_MenuButton_Track_FocusY = 0;
											FocusTrackByX(G_MenuButton_Track_FocusY);
											LightFocusTrack();
										}
									}
								}
								case CMlScriptEvent::EMenuNavAction::Select : {
									PressSelect(G_MenuButton_Player_FocusY);
								}
							}
						}
						case CMlScriptEvent::Type::MouseClick: {
							if (Event.ControlId == "ButtonRecordCenterStart")
							{
								SendCustomEvent("RecordCenterStart", []);
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Hide();
							}
							else if (Event.ControlId == "Quad_Section")
							{
								//SendCustomEvent("Solo_RankingPage_Exit", Text[]);
							}
							else if (Event.ControlId == "MenuButtons_Player")
							{
								declare Integer QuadId for Event.Control;
								if(!G_ActiveQuad.existskey(QuadId) || !G_ActiveQuad[QuadId]) continue;
								G_MenuButton_Player_FocusY = QuadId;
								PressSelect(QuadId);
							}
							else if (Event.ControlId == "MenuButtons_Track")
							{
								//declare Integer QuadId for Event.Control;
								//PressSelect(QuadId);
							}
							else if (Event.ControlId == "MenuButtons_ZonePrev")
							{
								if(G_MenuButton_Player_SelectY != -1) CancelPlayerSelect(0);
								ZonePrevious();
							}
							else if (Event.ControlId == "MenuButtons_ZoneNext")
							{
								if(G_MenuButton_Player_SelectY != -1) CancelPlayerSelect(0);
								ZoneNext();
							}
							else if (Event.ControlId == "MenuButtons_OpponentRecord")
							{
								declare Integer QuadId for Event.Control;
								Select_OpponentRecord(QuadId);
							}
						}
						case CMlScriptEvent::Type::MouseOver: {
							if (Event.ControlId == "Quad_Section")
							{
								//Event.Control.RelativeScale = 1.1;
							}
							else if (Event.ControlId == "MenuButtons_Player")
							{
								declare Integer QuadId for Event.Control;
								if(!G_ActiveQuad.existskey(QuadId) || !G_ActiveQuad[QuadId]) continue;
								UnlightFocusPlayer();
								G_MenuButton_Player_FocusY = QuadId;
								G_MenuButton_ControlFocus = Event.Control;
								LightFocusPlayer();
							}
							else if (Event.ControlId == "MenuButtons_Track")
							{
								declare Integer QuadId for Event.Control;
								UnlightFocusTrack();
								G_MenuButton_Track_FocusY = QuadId;
								LightFocusTrack();
							}
							else if (Event.ControlId == "MenuButtons_ZonePrev" || Event.ControlId == "MenuButtons_ZoneNext")
							{
								declare CMlQuad   MenuButtons_ZoneDisplay <=> (Event.Control.Parent.GetFirstChild("MenuButtons_ZoneDisplay")	as CMlQuad);
								MenuButtons_ZoneDisplay.Opacity = 1.0;
							}
							if (Event.ControlId == "ButtonRecordCenterStart")
							{
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Show();
							}
						}
						case CMlScriptEvent::Type::MouseOut: {
							if (Event.ControlId == "Quad_Section")
							{
								Event.Control.RelativeScale = 1.;
							}
							else if (Event.ControlId == "MenuButtons_Player")
							{
								UnlightFocusPlayer();
								G_MenuButton_ControlFocus = Null;
								G_MenuButton_Player_FocusY = -1;
							}
							else if (Event.ControlId == "MenuButtons_Track")
							{
								UnlightFocusTrack();
								G_MenuButton_Track_FocusY = -1;
							}
							else if (Event.ControlId == "MenuButtons_ZonePrev" || Event.ControlId == "MenuButtons_ZoneNext")
							{
								declare CMlQuad   MenuButtons_ZoneDisplay <=> (Event.Control.Parent.GetFirstChild("MenuButtons_ZoneDisplay")	as CMlQuad);
								if (Event.Control.Visible) {
									MenuButtons_ZoneDisplay.Opacity = 1.;
								}
							}
							if (Event.ControlId == "ButtonRecordCenterStart")
							{
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Hide();
							}
						}
						case CMlScriptEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "Back" : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case "Update_PlayersLabels" : {
									Update_PlayersLabels();
								}
								case "Update_OpponentRecords": {
									Update_OpponentRecords();
								}
								case "Update_TracksLabels" : {
									Update_TracksLabels();
								}
								case "Show" : {
									declare Text PreviousPage = Event.CustomEventData[1];
									EnableMenuNavigation(True,False,Null,2);
									SendCustomEvent("UpdateBarreSection", ["SoloMain"]);
									ShowPage(PreviousPage);
								}
								case "Hide" : {
									UnSelectPlayer();
									EnableMenuNavigation(False,False,Null,0);
									SendCustomEvent("DetachPage", ["RankingPage"]);
								}
								case "SetPosition" : {
									declare CMlFrame  Frame_All    <=> (Page.GetFirstChild("Frame_All") as CMlFrame);
									//declare Text[] RankingModuleName for Page;
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	return MLText;
}