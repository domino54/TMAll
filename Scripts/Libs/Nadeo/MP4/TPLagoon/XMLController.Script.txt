#Include "TextLib"																as TextLib
#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"									as Logger

#Const C_XMLTitleMakerFilePath	"file://Media/XML/HorizonAddOn.xml" //TitlePackXML2
#Const C_ReqTimeout				10000

#Const C_DEFAULTASSET			0
#Const C_UGCASSET				1
#Const C_FIXEDASSET				2

declare Text[Text] 					G_GlobalParam;
declare Text[] 		  				G_Solo_Sections;
declare Boolean[Text] 				G_Sections;
declare Text[Text] 	  				G_PoliceStyle;
declare Text[Text] 	  				G_Logo_Sections;
declare Text[Text]	  				G_Color_Sections;
declare Text						G_NewsColor;
declare Text		  				G_ProjectEnviro;
declare Boolean						G_AllowAllModes;
declare Boolean						G_DisplayTitleServersOnly;
declare Text						G_FlashUrl;

declare Text[]						G_AllowedOnlineModes;

declare Text[][]					G_MapsPath;
declare Text[][]					G_MapsThumbnails;
declare Text[][]					G_MapsName;
declare Text[][]					G_SoloUnlock_MedalNb;
declare Text[][]					G_SoloUnlock_MedalType;
declare Boolean						G_SoloAllowEvaluate;
declare Text						G_SoloScriptName;
declare Text						G_MapEditorScriptName;

declare Text[][Text]				G_ButtonsNames;
declare Integer[][Integer][Text]	G_ButtonsTypes;
declare Text[][Text]				G_ButtonsIds;
declare Text[][Text]				G_ButtonsIdsToScriptPath;

declare Real						G_Gameplay_Acceleration;
declare Real						G_Gameplay_Control;
declare Real						G_Gameplay_Gravity;

Text[] Buttons_GetNames(Text _Section)
{
	declare Text[] Result;
	if(!G_ButtonsTypes.existskey(_Section))  return Result;
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_DEFAULTASSET]) {
		Result.add(G_ButtonsNames[_Section][ButtonIndex]);
	}
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_UGCASSET]) {
		Result.add(G_ButtonsNames[_Section][ButtonIndex]);
	}
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_FIXEDASSET]) {
		Result.add(G_ButtonsNames[_Section][ButtonIndex]);
	}
	if (_Section == "Editors" && TitleControl.CanPublishFiles) {
		Result.add(_("Publish to Steam Workshop"));
	}
	return Result;
}

Vec2[] Buttons_GetPositions(Text _Section)
{
	declare Vec2[] Result;
	declare ButtonPos = <-3.8, 31.7>;
	if(!G_ButtonsTypes.existskey(_Section))  return Result;
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_DEFAULTASSET]) {
		Result.add(ButtonPos);
		ButtonPos.Y += -12.7;
	}
	if (G_ButtonsTypes[_Section][C_UGCASSET].count != 0) {
		ButtonPos.Y += -2.3;
	}
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_UGCASSET]) {
		Result.add(ButtonPos);
		ButtonPos.Y += -12.7;
	}
	if (G_ButtonsTypes[_Section][C_FIXEDASSET].count != 0) {
		ButtonPos.Y += -2.3;
	}
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_FIXEDASSET]) {
		Result.add(ButtonPos);
		ButtonPos.Y += -12.7;
	}
	if (_Section == "Editors" && TitleControl.CanPublishFiles) {
		ButtonPos.Y += -2.3;
		Result.add(ButtonPos);
	}
	return Result;
}

Text[] Buttons_GetIds(Text _Section)
{
	declare Text[] Result;
	if(!G_ButtonsTypes.existskey(_Section))  return Result;
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_DEFAULTASSET]) {
		Result.add(G_ButtonsIds[_Section][ButtonIndex]);
	}
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_UGCASSET]) {
		Result.add(G_ButtonsIds[_Section][ButtonIndex]);
	}
	foreach(ButtonIndex in G_ButtonsTypes[_Section][C_FIXEDASSET]) {
		Result.add(G_ButtonsIds[_Section][ButtonIndex]);
	}
	if (_Section == "Editors" && TitleControl.CanPublishFiles) {
		Result.add("PublishFile");
	}
	return Result;
}
Text[] Buttons_GetIdsToScriptPath(Text _Section)
{
	if(!G_ButtonsIdsToScriptPath.existskey(_Section))  return [];
	return G_ButtonsIdsToScriptPath[_Section];
}

Text[Text] Get_GlobalParam()
{
	return G_GlobalParam;
}

Text Get_GlobalParam(Text _Param)
{
	if(!G_GlobalParam.existskey(_Param)) return "";
	return G_GlobalParam[_Param];
}

Text[Text] Get_Logo_Sections()
{
	return G_Logo_Sections;
}

Text[Text] Get_Color_Sections()
{
	return G_Color_Sections;
}

Text[] Get_Solo_Sections()
{
	return G_Solo_Sections;
}

Boolean[Text] Get_Sections()
{
	return G_Sections;
}

Text[Text]Get_PoliceStyle()
{
	return G_PoliceStyle;
}

Text[][] Get_MapsPath()
{
	return G_MapsPath;
}

Text[][] Get_MapsThumbnails()
{
	return G_MapsThumbnails;
}

Text[][] Get_MapsName()
{
	return G_MapsName;
}

Text[][] Get_SoloUnlock_MedalNb()
{
	return G_SoloUnlock_MedalNb;
}

Text[][] Get_SoloUnlock_MedalType()
{
	return G_SoloUnlock_MedalType;
}

Boolean Get_SoloAllowEvaluate()
{
	return G_SoloAllowEvaluate;
}

Text Get_SoloScriptName()
{
	return G_SoloScriptName;
}

Text Get_MapEditorScriptName()
{
	return G_MapEditorScriptName;
}

Text Get_NewsColor()
{
	return G_NewsColor;
}

Text Get_ProjectEnviro()
{
	return G_ProjectEnviro;
}

Real Get_Gameplay_Acceleration()
{
	return G_Gameplay_Acceleration;
}

Real Get_Gameplay_Control()
{
	return G_Gameplay_Control;
}

Real Get_Gameplay_Gravity()
{
	return G_Gameplay_Gravity;
}

Boolean Get_AllowAllModes()
{
	return G_AllowAllModes;
}

Text[] Get_AllowedOnlineModes()
{
	if (G_AllowAllModes) {
		return [];
	}
	return G_AllowedOnlineModes;
}

Boolean Get_DisplayTitleServersOnly()
{
	return G_DisplayTitleServersOnly;
}

Text GetFlashUrl()
{
	return G_FlashUrl;
}

Text Private_LoadXml(Text _Path) {
	declare XmlFile = "";
	
	declare Req <=> Http.CreateGet(_Path);
	declare ReqEndTime = Now + C_ReqTimeout;
	declare Success = False;
	
	while (Now < ReqEndTime) {
		if (Req.IsCompleted) {
			XmlFile = Req.Result;
			Success = True;
			break;
		}
		yield; //HACK - virer Yield
	}
	if (!Success) 	Logger::Warn("[MenuController] Private_LoadXml(): Failed to load: "^_Path);
	else 		 	Logger::Log("[MenuController] Private_LoadXml(): XML successfully loaded: "^_Path);

	Http.Destroy(Req);
	
	return XmlFile;
}

Text Private_LoadTrackAttribute(CParsingNode _TrackNode, Text _KeyValue, Text _DefaultValue)
{
	if (_TrackNode == Null) return _DefaultValue;
	declare Result = _TrackNode.GetAttributeText(_KeyValue, "-");
	if (Result == "-") {
		declare ChildNode <=> _TrackNode.GetFirstChild(_KeyValue);
		if (ChildNode == Null) {
			return _DefaultValue;
		}
		Result = ChildNode.TextContents;
	}
	return Result;
}

Void GetXML()
{
	G_Sections["Solo"]        = False;
	G_Sections["Multiplayer"] = False;
	G_Sections["LocalPlay"]   = False;
	G_Sections["Editors"]     = False;
	G_Sections["Profile"]     = False;
	G_Gameplay_Acceleration		= 1.;
	G_Gameplay_Control			= 1.;
	G_Gameplay_Gravity			= 1.;
	G_FlashUrl					= LoadedTitle.TitleId ^ "";
	G_NewsColor = "f00";
	G_Solo_Sections.clear();
	//G_CampaignMaps

	declare Text PublishedTitlePackXML;
	if (TitleEdition != Null) {
		PublishedTitlePackXML = TitleEdition.File_ReadText("Media/XML/HorizonAddOn.xml");
	}
	declare Text XMLContent;
	if (PublishedTitlePackXML == "")
	{
		XMLContent = Private_LoadXml(C_XMLTitleMakerFilePath);
	} else {
		XMLContent = PublishedTitlePackXML;
	}
	declare XmlStruct	= Xml.Create(XMLContent);
	G_ProjectEnviro = XmlStruct.Root.GetAttributeText("projectenviro", "");
	// HACK POUR FORCER LE FILTRAGE DES MAPS DANS LE TRACKBROWSER
	declare Text ProjectEnviro for LocalUser;
	ProjectEnviro = G_ProjectEnviro;
	// --

	foreach(MapNode in XmlStruct.Root.Children) {
		G_ButtonsNames[MapNode.Name]	= [];
		G_ButtonsTypes[MapNode.Name]	= [C_DEFAULTASSET => [], C_UGCASSET => [], C_FIXEDASSET => []];
		G_ButtonsIds[MapNode.Name]		= [];
		declare Text Logo = MapNode.GetAttributeText("logo", "");
		G_Logo_Sections[MapNode.Name] = Logo;
		declare Text Color = MapNode.GetAttributeText("color", "");
		G_Color_Sections[MapNode.Name] = Color;
		if (MapNode.Name == "global") {
			G_GlobalParam["Name"] = MapNode.GetAttributeText("titlename", "");
			foreach(SubMapNode in MapNode.Children) {
				declare Text Path = SubMapNode.GetAttributeText("path", "");
				G_GlobalParam[SubMapNode.Name] = Path;
				if(SubMapNode.Name == "Style") {
					declare Text MainTitlePolice = SubMapNode.GetAttributeText("MainTitlePolice", "");
					declare Text SectionsPolice = SubMapNode.GetAttributeText("SectionsPolice", "");
					G_PoliceStyle["MainTitlePolice"] = MainTitlePolice;
					G_PoliceStyle["SectionsPolice"] = SectionsPolice;
				} else if (SubMapNode.Name == "News") {
					G_NewsColor = SubMapNode.GetAttributeText("color", "f00");
				}
			}
		}
		if (MapNode.Name == "Solo")
		{
			G_SoloAllowEvaluate			= MapNode.GetAttributeBoolean("allowevaluate", False);
			G_SoloScriptName			= MapNode.GetAttributeText("scriptname", "");
			foreach(CategoryIndex => InfoCampaign in MapNode.Children) {
				if(InfoCampaign.Name != "category")
				{
					Logger::Warn("Fichier XML mal format√© : balise autre que <category> dans Solo");
					continue;
				}
				declare Text Difficulty = InfoCampaign.GetAttributeText("name", "");
				G_Solo_Sections.add(Difficulty);
				G_MapsPath.add([]);
				G_MapsName.add([]);
				G_MapsThumbnails.add([]);
				G_SoloUnlock_MedalNb.add([]);
				G_SoloUnlock_MedalType.add([]);
				foreach(Track in InfoCampaign.Children) {
					declare Text TrackPath = Private_LoadTrackAttribute(Track, "path", "-");
					declare Text TrackName = Private_LoadTrackAttribute(Track, "name", "-");
					declare Text TrackThumbnail = Private_LoadTrackAttribute(Track, "thumbnail", "-");
					if(TrackPath != "-")
					{
						G_MapsPath[CategoryIndex].add(TrackPath);
						G_MapsName[CategoryIndex].add(TrackName);
						G_MapsThumbnails[CategoryIndex].add(TrackThumbnail);
						declare Text Unlock_MedalNb   = Track.GetAttributeText("medalnb", "");
						declare Text Unlock_MedalType = Track.GetAttributeText("medaltype", "");
						G_SoloUnlock_MedalNb[CategoryIndex].add(Unlock_MedalNb);
						G_SoloUnlock_MedalType[CategoryIndex].add(Unlock_MedalType);
					}
				}
			}
		} else if (MapNode.Name == "LocalPlay" || MapNode.Name == "Editors") {
			if (MapNode.Name == "Editors") {
				G_MapEditorScriptName = MapNode.GetAttributeText("mapeditor", "");
			}
			if (G_MapEditorScriptName == "") {
				G_MapEditorScriptName = "";
			} else {
				G_MapEditorScriptName = G_MapEditorScriptName ^ ".Script.txt";
			}
			G_ButtonsNames[MapNode.Name]			= [];
			G_ButtonsTypes[MapNode.Name]			= [C_DEFAULTASSET => [], C_UGCASSET => [], C_FIXEDASSET => []];
			G_ButtonsIds[MapNode.Name]				= [];
			G_ButtonsIdsToScriptPath[MapNode.Name]	= [];
			foreach(AssetIndex => Asset in MapNode.Children) {
				G_ButtonsIds[MapNode.Name].add(Asset.GetAttributeText("id", ""));
				G_ButtonsNames[MapNode.Name].add(Asset.GetAttributeText("titlename", ""));
				if (Asset.GetAttributeBoolean("isdefault", False)) {
					if (Asset.GetAttributeBoolean("isvisibleinmaker", True)) {
						G_ButtonsTypes[MapNode.Name][C_DEFAULTASSET].add(AssetIndex);
					} else {
						G_ButtonsTypes[MapNode.Name][C_FIXEDASSET]	.add(AssetIndex);
					}
				} else {
					G_ButtonsIdsToScriptPath[MapNode.Name]			.add(Asset.GetAttributeText("titlename", ""));
					G_ButtonsTypes[MapNode.Name][C_UGCASSET]		.add(AssetIndex);
				}
			}
		} else if (MapNode.Name == "Multiplayer") {
			G_AllowAllModes				= MapNode.GetAttributeBoolean("allowallmodes", True);
			G_DisplayTitleServersOnly	= MapNode.GetAttributeBoolean("displaytitleserversonly", True);
			foreach(Asset in MapNode.Children) {
				if (Asset.GetAttributeBoolean("isdefault", False)) {
					G_AllowedOnlineModes.add(Asset.GetAttributeText("id", ""));
				} else {
					G_AllowedOnlineModes.add(Asset.GetAttributeText("titlename", ""));
				}
			}
		} else if (MapNode.Name == "Ingame") {
			G_Gameplay_Acceleration		= MapNode.GetAttributeReal("accelcoef", 1.);
			G_Gameplay_Control			= MapNode.GetAttributeReal("controlcoef", 1.);
			G_Gameplay_Gravity			= MapNode.GetAttributeReal("gravitycoef", 1.);
		} else if (MapNode.Name == "Resources") {
			G_FlashUrl					= MapNode.GetAttributeText("flashurl", LoadedTitle.TitleId ^ "");
		}

		if(G_Sections.existskey(MapNode.Name))
		{
			G_Sections[MapNode.Name] = True;
		}
	}
	Xml.Destroy(XmlStruct);
}
