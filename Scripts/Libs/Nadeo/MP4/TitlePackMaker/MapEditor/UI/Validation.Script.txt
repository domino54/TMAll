/** 
 * Validation UI
 */

#Const Version		"2016-03-14"
#Const ScriptName	"Validation.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" as Font

#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_SoloMapInfosBase.Script.txt"		as Inject_SoloMapInfosBase
#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_QuadsSelector.Script.txt"			as Inject_QuadsSelector
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"								as ManialinkNew
// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultVisibility	False
#Const C_BgAnim False	///< Anim button background on mouse over/out
#Const C_DemoSony			False
// Pop up
#Const C_PopUp_Improve	0
#Const C_PopUp_Exit		1

// ---------------------------------- //
// Constants
// ---------------------------------- //
declare Ident G_ValidationLayerId;

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return							The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return							The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

Text Private_GetValidationML2(Boolean _Validation) {

	declare Integer Count_InstancesY         = 2;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = -19.9;
	declare Real	PosYFirstQuad            = -27.8;

	declare Real	SizeXQuad                = 107.8;
	declare Real	SizeYQuad                = 11.3;
	declare Real	MarginY_Button           = 0.4;
	declare Real	MarginX_Button           = 4.0;
 
	declare Real	SizeXHeader              = SizeXQuad;
	declare Real	SizeYHeader              = 25.;
	declare Real    HeaderContentPosX        = SizeXHeader*0.1/2.;
 	// style="Bgs1" substyle="BgDialogBlur"
 
	declare Text	MainFont = Font::GetFontName("Main");
	declare Text	SubFont	 = Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_UIMedalSelection">

	<frame id="Frame_All">

		<frame id="Frame_Menu"  z-index="10" hidden="0">
			<quad z-index="-4" pos="0. 0." size="320 180" valign="center" halign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0." bluramount="0."/>
			<frame id="Frame_Header"  z-index="1" pos="0 {{{SizeYHeader/2.}}}">
				<quad  id="Quad_Bg"      size="{{{SizeXHeader}}} {{{SizeYHeader}}}" pos="0 0"  halign="right"  valign="center" z-index="-1" style="Bgs1" substyle="BgDialogBlur" opacity="0.9" bluramount="0."/>
				<quad  id="Quad_Line1"       pos="{{{-HeaderContentPosX}}} {{{SizeYHeader/2.-12.}}}" size="{{{SizeXHeader*0.9}}} 0.2" halign="right"  valign="center" z-index="0" opacity="0.9" bgcolor="fff"/>
				<label id="Label_Title"    pos="{{{-SizeXHeader+HeaderContentPosX}}} {{{SizeYHeader/2.-12.0}}}"     valign="bottom" halign="left"  textsize="6" textpref="$t$0d0" text="{{{//L16N Title of the map validation
					_("Map validate")}}}"  textcolor="fff" textfont="{{{MainFont}}}"/>
				
				<label id="Label_BestTime" pos="{{{-HeaderContentPosX}}} {{{SizeYHeader/2.-11.4}}}" valign="bottom" halign="right" textsize="3" textpref="$t" text=""  textcolor="fff" textfont="{{{SubFont}}}"/>
				<label id="Label_New"      pos="{{{-HeaderContentPosX+3.5}}} {{{SizeYHeader/2.-7.5}}}" valign="bottom" halign="right" textsize="1" textpref="$t" text="{{{_("|Best score|New")}}}"  textcolor="fff" textfont="{{{MainFont}}}"/>
				
				<label id="Label_YourTime" pos="{{{-SizeXHeader+HeaderContentPosX}}} {{{SizeYHeader/2.-16.}}}"     valign="top"    halign="left"  textsize="3" textpref="$t" text="{{{_("Best time :")}}}"  textcolor="fff" textfont="{{{SubFont}}}"/>
			</frame>
			<frame pos="0 -7.5">
				{{{Inject_QuadsSelector::InjectInManialink(Count_InstancesY, Count_InstancesX)}}}
			</frame>
		</frame>
	</frame>
	
	
	<script><!--
		#Include "TextLib" as TL
		#Const DebugName  "L_MedalSelection"

		{{{ManialinkNew::GetIncludes()}}}
		
		{{{ManialinkNew::Load()}}}
		
		//declare Integer G_ButtonFocus;
		
		{{{Inject_QuadsSelector::InjectInFunction()}}}

		Void SetTime(Integer _BestTime, Integer _YourTime) {

			declare Label_Title      <=> (Page.MainFrame.GetFirstChild("Label_Title") as CMlLabel);
			declare Label_BestTime   <=> (Page.MainFrame.GetFirstChild("Label_BestTime") as CMlLabel);
			declare Label_YourTime   <=> (Page.MainFrame.GetFirstChild("Label_YourTime") as CMlLabel);
			declare Label_New        <=> (Page.MainFrame.GetFirstChild("Label_New") as CMlLabel);
			declare Real LabelWidth   = Label_BestTime.ComputeWidth(Label_Title.Value);
			//Label_BestTime.RelativePosition.X = {{{-SizeXHeader+HeaderContentPosX+10.}}} + LabelWidth;
			Label_BestTime.RelativePosition.X = {{{-HeaderContentPosX}}};
			
			if (_BestTime < 0) Label_BestTime.Value = "--:--.--";
			else Label_BestTime.Value = TL::GetTranslatedText("Best time :") ^ TL::TimeToText(_BestTime, True);
			
			Label_YourTime.Value = TL::GetTranslatedText("Your time:") ^ "$ff0" ^ TL::TimeToText(_YourTime, True);

			if (_YourTime <= _BestTime || _BestTime <= 0) {
				Label_BestTime.Value = TL::GetTranslatedText("Best time :") ^ TL::TimeToText(_YourTime, True);
				//Label_New.RelativePosition_V3.X = Label_YourTime.ComputeWidth(Label_BestTime.Value) + 1.;
				Label_New.Visible = True;
			} else {
				Label_New.Visible = False;
			}
		}
		
		Void ClearChoose()
		{
			//declare netwrite Integer Net_MedalChosen 		for UI;
			//Net_MedalChosen = -1;
		}

		Void Confirm(Boolean _Validate) {
			declare netwrite Net_LibUIValidation_AnswerUpdate for Teams[0] = -1;
			declare netwrite Net_LibUIValidation_Answer for Teams[0] = True;
			declare netwrite Net_LibUIValidation_Distance for Teams[0] = 0.;
			Net_LibUIValidation_Answer = _Validate;
			Net_LibUIValidation_AnswerUpdate = Now;
			Net_LibUIValidation_Distance = InputPlayer.Distance;
		}

		Void PressSelect()
		{
			switch(G_ButtonFocus)
			{
				case 0: Confirm(False); //Restart
				case 1: Confirm(True); //Quit
			}
			EnableMenuNavigation(True, False, Null, 0);
		}

		Void SendInfo()
		{
			declare netread Integer[Integer] Net_TimesOnMap for UI;
			ClearChoose();
			declare Integer[Integer] TimesOnMap;	
			for(I, 0, 3)
			{
				if(Net_TimesOnMap.existskey(I))
				{
					TimesOnMap[I] = Net_TimesOnMap[I];
				}
				else
				{
					TimesOnMap[I] = 0;	
				}
			}

			declare Text[] LabelMedals = [_("Improve"),
										  _("Validate & exit")];
			declare Text[] LabelMedalsTime;
			declare Text[] QuadMedalImg;
			declare Vec3[Integer] QuadMedalImgColo;
			SetButtons(LabelMedals, LabelMedalsTime, QuadMedalImg, QuadMedalImgColo);
		}

		Void Init()
		{
			SendInfo();
		}

		Void ShowPage()
		{
			//CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
			ClearChoose();
		}

		Void SetVisibility(Boolean _Visible, Integer _PopUp)
		{
			declare CMlFrame Frame_Menu <=> (Page.MainFrame.GetFirstChild("Frame_Menu")	as CMlFrame);
			Frame_Menu.Visible = _Visible;
			if(_Visible)
			{
				EnableMenuNavigation(True,False,Null,2);
				FocusButton();
			}
			else
			{
				EnableMenuNavigation(False,False,Null,0);
				
			}
		}

		main() {
			Init();

			declare Boolean Prev_Visibility;

			declare netread Net_LibUIValidation_Visibility for Teams[0] = {{{C_DefaultVisibility}}};
			declare netread Net_LibUIValidation_VisibilityPopUp for Teams[0] = -1;
			declare PrevVisibility = {{{C_DefaultVisibility}}};

			SetVisibility({{{C_DefaultVisibility}}}, {{{C_PopUp_Improve}}});

			declare netread Net_LibUIValidation_BestTime for Teams[0] = 0;
			declare netread Net_LibUIValidation_YourTime for Teams[0] = 0;
			declare PrevBestTime = -1;
			declare PrevYourTime = -1;
			SetTime(Net_LibUIValidation_BestTime, Net_LibUIValidation_YourTime);

			while(True) {
				
				yield;
				if(Prev_Visibility != PageIsVisible) {
					if(PageIsVisible) ShowPage();
					Prev_Visibility = PageIsVisible;
				}

				if (PrevVisibility != Net_LibUIValidation_Visibility) {
					PrevVisibility = Net_LibUIValidation_Visibility;
					SetVisibility(Net_LibUIValidation_Visibility, Net_LibUIValidation_VisibilityPopUp);

				}

				if (PrevBestTime != Net_LibUIValidation_BestTime || PrevYourTime != Net_LibUIValidation_YourTime) {
					PrevBestTime = Net_LibUIValidation_BestTime;
					PrevYourTime = Net_LibUIValidation_YourTime;
					SetTime(Net_LibUIValidation_BestTime, Net_LibUIValidation_YourTime);
				}

				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
				
				//log(Now^"W");

				{{{Inject_QuadsSelector::InjectInWhile("PressSelect();")}}}
				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									Confirm(True); //Quit
								}
								case CMlEvent::EMenuNavAction::Action1 : {
									//AnimShow_QuadSelect(); //Hack
									//AnimShow_SoloMapInfosBase(); //Hack
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.PluginCustomEventType) {
								case "Show" : {
									ShowPage();
								}
								
								case "Hide" : {
									//EnableMenuNavigation(True,False,Null,0);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}

// ---------------------------------- //
/** Set the times to display in the UI
 *
 *	@param	_BestTime				The best validation time in ms
 *	@param	_YourTime				The player validation time in ms
 */
Void SetTime(Integer _BestTime, Integer _YourTime) {
	declare netwrite Net_LibUIValidation_BestTime for Mode.Teams[0] = 0;
	declare netwrite Net_LibUIValidation_YourTime for Mode.Teams[0] = 0;
	Net_LibUIValidation_BestTime = _BestTime;
	Net_LibUIValidation_YourTime = _YourTime;
}

// ---------------------------------- //
/** Set the menu visibility
 *
 *	@param	_Visible				Show the pop up if True
 *	@param	_PopUp					The pop up to show or hide
 */
Void SetVisibility(Boolean _Visible, Integer _PopUp) {
	declare netwrite Net_LibUIValidation_Visibility for Mode.Teams[0] = C_DefaultVisibility;
	declare netwrite Net_LibUIValidation_VisibilityPopUp for Mode.Teams[0] = -1;
	Net_LibUIValidation_Visibility = _Visible;
	log("SetVisibility: "^ Net_LibUIValidation_Visibility);
	Net_LibUIValidation_VisibilityPopUp = _PopUp;
}

// ---------------------------------- //
/// Show the menu
Void Show() {
	SetVisibility(True, C_PopUp_Improve);
}

// ---------------------------------- //
/// Hide the menu
Void Hide() {
	SetVisibility(False, C_PopUp_Improve);
}

// ---------------------------------- //
/// Show the exit confirmation
/*Void ShowExit() {
	SetVisibility(True, C_PopUp_Exit);
}*/

// ---------------------------------- //
/// Hide the exit confirmation
/*Void HideExit() {
	SetVisibility(False, C_PopUp_Exit);
}*/

// ---------------------------------- //
/** Check the last time the thumbnail was updated
 *
 *	@return							The last time the thumbnail was updated
 */
Integer GetThumbnailUpdate() {
	declare netread Net_LibUIValidation_ThumbnailUpdate for Mode.Teams[0] = -1;
	return Net_LibUIValidation_ThumbnailUpdate;
}

// ---------------------------------- //
/** Check the last time the answer was updated
 *
 *	@return							The last time the answer was updated
 */
Integer GetAnswerUpdate() {
	declare netread Net_LibUIValidation_AnswerUpdate for Mode.Teams[0] = -1;
	return Net_LibUIValidation_AnswerUpdate;
}

// ---------------------------------- //
/** Check the last answer given by the player
 *
 *	@return							The last answer
 */
Boolean GetAnswer() {
	Hide();
	
	declare netread Net_LibUIValidation_Answer for Mode.Teams[0] = True;
	return Net_LibUIValidation_Answer;
}

// ---------------------------------- //
/** Check the distance drived by the player
 *
 *	@return							The distance
 */
Real GetDistance() {
	declare netread Net_LibUIValidation_Distance for Mode.Teams[0] = 0.;
	return Net_LibUIValidation_Distance;
}

// ---------------------------------- //
/// Screen animation when taking the track thumbnail
Void Snap() {
	declare netwrite Net_LibUIValidation_SnapAnim for Mode.Teams[0] = -1;
	Net_LibUIValidation_SnapAnim += 1;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	if (Mode.UIManager.UILayers.existskey(G_ValidationLayerId)) {
		declare Removed = Mode.UIManager.UIAll.UILayers.removekey(G_ValidationLayerId);
		Mode.UIManager.UILayerDestroy(Mode.UIManager.UILayers[G_ValidationLayerId]);
	}
}

// ---------------------------------- //
/** Load the library
 *
 * @param	_Validation				True if it's a validation run, False if it's a test run
 */
Void Load(Boolean _Validation) {
	Unload();
	
	declare LayerValidation <=> Mode.UIManager.UILayerCreate();
	G_ValidationLayerId = LayerValidation.Id;
	LayerValidation.ManialinkPage = Private_GetValidationML2(_Validation);
	if (!Mode.UIManager.UIAll.UILayers.existskey(G_ValidationLayerId)) Mode.UIManager.UIAll.UILayers.add(LayerValidation);
	
	declare netwrite Net_LibUIValidation_Visibility for Mode.Teams[0] = C_DefaultVisibility;
	declare netwrite Net_LibUIValidation_VisibilityPopUp for Mode.Teams[0] = -1;
	Net_LibUIValidation_Visibility = C_DefaultVisibility;
	Net_LibUIValidation_VisibilityPopUp = -1;
	
	declare netwrite Net_LibUIValidation_BestTime for Mode.Teams[0] = 0;
	declare netwrite Net_LibUIValidation_YourTime for Mode.Teams[0] = 0;
	Net_LibUIValidation_BestTime = 0;
	Net_LibUIValidation_YourTime = 0;
	
	declare netwrite Net_LibUIValidation_SnapAnim for Mode.Teams[0] = -1;
	Net_LibUIValidation_SnapAnim = 0;
}