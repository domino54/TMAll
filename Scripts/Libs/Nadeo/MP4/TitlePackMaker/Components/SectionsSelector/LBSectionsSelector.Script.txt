#Const C_ImgBase	"file://Media/MEDIABROWSER_HiddenResources/Maker/Images/SectionsSelector/"

#Const C_ImgBaseBase				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"				as Font

#Const C_SizeProfil				<25., 6.5>

Text Build() {
	declare Integer Count_InstancesY         = 7;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = -120.;
	declare Real	PosYFirstQuad            = -10.;

	declare Real	SizeXQuad                = 50.;
	declare Real	SizeYQuad                = 7.;
	declare Real	MarginY_Button           = 4.0;
	declare Real	MarginX_Button           = 4.0;

	declare Text	GameLogoSolo			= C_ImgBase ^ "Logo_Solo.dds";
	declare Text	GameLogoOnline			= C_ImgBase ^ "Logo_Online.dds";
	declare Text	GameLogoLocalPlay		= C_ImgBase ^ "Logo_LocalPlay.dds";
	declare Text	GameLogoEditor			= C_ImgBase ^ "Logo_Editor.dds";
	declare Text	GameLogoStyle			= C_ImgBase ^ "Logo_Style.dds";
	declare Text	GameLogoResources		= C_ImgBase ^ "Logo_Resources.dds";
	declare Text	GameLogoPublishing		= C_ImgBase ^ "Logo_Publishing.dds";
	declare Text	GameLogoMatchSettings	= C_ImgBase ^ "Logo_MatchSettings.dds";
	declare Text	GameLogoIngame			= C_ImgBase ^ "Logo_Ingame.dds";

	declare Text	Img_SectionButton		= C_ImgBase ^ "SectionButton.dds";
	declare Text	Img_Warning				= "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Warning.dds";

	declare Text    IMGLogo_Profil           = C_ImgBaseBase ^ "Logo_Profil.dds";
	declare Vec2    ActiveButtonSize        = <20., 17.8>;
	declare Vec2    ActiveButtonSize2       = <5., 5.>;

	declare Text MainFont				= Font::GetFontName("Main");
	declare Text SubFont				= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_SectionsSelector">
	<framemodel id="Frame_Button">
		<quad id="Quad_Section" halign="center" valign="center" size="75 18.4" z-index="1" colorize="{{{DesignManialinks::GetColorCode_Overall()}}}" scriptevents="1"
			image="{{{Img_SectionButton}}}"/>
		<quad id="Quad_Logo" pos="-28 0" halign="center" valign="center" colorize="{{{DesignManialinks::GetColorCode_Overall()}}}" size="11.5 11.5" z-index="2"/>
		<label size="51.5 18" z-index="2" id="Label_Section" textsize="8" textprefix="$t" text="Test" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" pos="33 2" halign="right" textfont="{{{MainFont}}}"/>
		<frame id="WarningSign" pos="-22 3.2" z-index="3" hidden="1">
			<quad size="2.4 7" halign="center" valign="center" z-index="1"	image="{{{Img_Warning}}}"  keepratio="fit"/>
		</frame>
	</framemodel>

	<framemodel id="Frame_ActiveButton">
		<quad id="Quad_Active"  halign="center" valign="center" pos="0 0" size="{{{ActiveButtonSize.X}}} {{{ActiveButtonSize.Y}}}" z-index="1" scriptevents="1" bgcolor="fff" opacity="0.0"/>
		<label size="{{{ActiveButtonSize.X}}}" z-index="2" id="Label_Active" pos="3. 5.5" textsize="3" text="{{{//L16N Designates a section, for example Solo or Online (displayed in the maker)
		_("|Section|Active")}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" halign="right" valign="center" textfont="{{{MainFont}}}"/>

		<quad id="Quad_ActiveButton"  halign="left" valign="center" pos="4 5" size="5. 5." z-index="2" scriptevents="1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" opacity="0.9"/>
		<frame pos="6.5 5.0">
			<quad id="C_Down"  halign="center" valign="center" pos="0 {{{-ActiveButtonSize2.Y/2.}}}" size="{{{ActiveButtonSize2.X}}} 0.2" z-index="2" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" opacity="1.0"/>
			<quad id="C_Up"    halign="center" valign="center" pos="0 {{{ActiveButtonSize2.Y/2.}}}"  size="{{{ActiveButtonSize2.X}}} 0.2" z-index="2" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" opacity="1.0"/>
			<quad id="C_Right" halign="center" valign="center" pos="{{{ActiveButtonSize2.X/2.}}} 0"  size="0.2 {{{ActiveButtonSize2.Y}}}" z-index="2" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" opacity="1.0"/>
			<quad id="C_Left"  halign="center" valign="center" pos="{{{-ActiveButtonSize2.X/2.}}} 0" size="0.2 {{{ActiveButtonSize2.Y}}}" z-index="2" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" opacity="1.0"/>
		</frame>
	</framemodel>

	<frame id="Frame_All">
		<quad id="Quad_BlurryBG"	halign="center" valign="center" size="220 120" pos="-18.5 15" z-index="-1" opacity="0" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
		<quad id="Quad_BG"			halign="center" valign="center" pos="0 0" size="320 180" z-index="-6" opacity="0." scriptevents="1"/>

			<frame id="Frame_Profile" pos="143 82.0" z-index="1">
				<quad id="Quad_LogoProfil" halign="center" valign="center" pos="-8.2 0" size="{{{C_SizeProfil.Y/1.4}}} {{{C_SizeProfil.Y/1.4}}}" z-index="1"  opacity="1.0" image="{{{IMGLogo_Profil}}}" modulatecolor="{{{DesignManialinks::GetColorCode_Overall()}}}" hidden="0"/>
				<quad id="Quad_Profile"   halign="center" valign="center" size="{{{C_SizeProfil.X}}} {{{C_SizeProfil.Y}}}" opacity="0." bgcolor="000" scriptaction="GoToProfile"/>
				<label id="Label_Profile" halign="center" valign="center" pos="2.2 0" textfont="{{{SubFont}}}" z-index="1" textsize="2" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" textprefix="$t" text="{{{//L16N Noun, on the main menu, designates the options to modify the player's description
			_("Profile")
			}}}"/>
				<frame id="Frame_MouseOver" z-index="2" hidden="1">
					<quad id="Quad_Up"		halign="center"	valign="top"	size="{{{C_SizeProfil.X}}} 0.4" pos="0 {{{C_SizeProfil.Y/2.}}}"		opacity="0.8" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
					<quad id="Quad_Down"	halign="center"	valign="bottom"	size="{{{C_SizeProfil.X}}} 0.4" pos="0 -{{{C_SizeProfil.Y/2.}}}"	opacity="0.8" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
					<quad id="Quad_Left"	halign="left"	valign="center"	size="0.4 {{{C_SizeProfil.Y}}}" pos="-{{{C_SizeProfil.X/2.}}} 0"		opacity="0.8" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
					<quad id="Quad_Right"	halign="right"	valign="center"	size="0.4 {{{C_SizeProfil.Y}}}" pos="{{{C_SizeProfil.X/2.}}} 0"		opacity="0.8" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
				</frame>
				<frame pos="{{{C_SizeProfil.X/2.}}} {{{-C_SizeProfil.Y/2.-1.8}}}">
					<quad halign="right" valign="top"    size="{{{C_SizeProfil.X}}} 0.2" opacity="1." bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
					<quad halign="right" valign="bottom" size="3  0.2" pos="0 0"              opacity="1." bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
				</frame>
			</frame>

		<frame id="Frame_Menu" pos="0 80" hidden="0">
			<label pos="-100 -38.5" z-index="0" size="75 10" textprefix="$t" text="{{{//L16N Section can be Solo, Online, etc
	_("Sections")}}}" valign="center" textsize="7" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" textfont="{{{MainFont}}}" halign="left"/>
			<label pos="10 -38.5" z-index="0" size="75 10" textprefix="$t" text="{{{_("Title")}}}" halign="left" valign="center" textsize="7" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" textfont="{{{MainFont}}}"/>
			<frameinstance modelid="Frame_Button" pos="47 -55" z-index="5" id="Frame_Instance00"/>
			<frameinstance modelid="Frame_Button" pos="-63 -55" z-index="5" id="Frame_Instance10"/>
			<frameinstance modelid="Frame_Button" pos="-63 -73.5" z-index="5" id="Frame_Instance20"/>
			<frameinstance modelid="Frame_Button" pos="-63 -92" z-index="5" id="Frame_Instance30"/>
			<frameinstance modelid="Frame_Button" pos="-63 -110.5" z-index="5" id="Frame_Instance40"/>
			<frameinstance modelid="Frame_Button" pos="47 -73.5" z-index="5" id="Frame_Instance50"/>
			<frameinstance modelid="Frame_Button" pos="47 -92" z-index="5" id="Frame_Instance60" hidden="1"/>
			<!--frameinstance modelid="Frame_Button" pos="47 -110.5" z-index="5" id="Frame_Instance70"/-->
		</frame>
		<frame id="Frame_Active" pos="0 0">
			<frame id="Clip_Zone" size="180 180" pos="-100.9 0" halign="right" valign="center" clip="False">
				<frameinstance modelid="Frame_ActiveButton" pos="21 25" z-index="5" id="Frame_Active1"/>
				<frameinstance modelid="Frame_ActiveButton" pos="21 6.5" z-index="5" id="Frame_Active2"/>
				<frameinstance modelid="Frame_ActiveButton" pos="21 -11.9" z-index="5" id="Frame_Active3"/>
				<frameinstance modelid="Frame_ActiveButton" pos="21 -30.4" z-index="5" id="Frame_Active4"/>
			</frame>
		</frame>

	</frame>

	
	<script><!--
		#Include "TextLib" as SectionsSelector_TextLib
		{{{Manialink::GetIncludes()}}}

		//#Const ActiveButtonColorOver_old  [True => <0.1, 1.0, 0.1>, False => <1.0, 0.1, 0.1>]
		//#Const ActiveButtonColorOut_old   [True => <0.3, 0.8, 0.3>, False => <0.8, 0.3, 0.3>]
		#Const ActiveButtonColorOver [True => <0.09, 0.14, 0.18>, False => <0.29, 0.34, 0.38>]
		#Const ActiveButtonColorOut  [True => <0.19, 0.24, 0.28>, False => <1., 1., 1.>]
		#Const SectionsColorsDefault  [<1.,1.,0.>, <0.8,0.2,0.6>, <0.25, 0.93, 0.28>, <0.3, 0.5, 0.9>]

		{{{Manialink::Load()}}}
		
		declare Integer          G_ActiveFocus;
		declare Boolean[Integer] G_IsActive;
		declare Integer          G_ActiveTimeToUnfocus;
		declare CMlControl[]	 G_WarningSigns;

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,1);
			SendCustomEvent("GetSections", ["SectionsSelector"]);
		}

		Void SetSection()
		{
			declare Text[] Sections_Name      for Page;
			declare Text[] Sections_FirstPage for Page;
			//log("Layer - Sections_Name: " ^ Sections_Name);
			//log("Layer - Sections_FirstPage: " ^ Sections_FirstPage);
			for(I, 0, Sections_Name.count - 1)
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
				Frames_Instance.Show();
				// TODO : Gros hack à corriger : Les sections n'ont pas de nom à afficher, juste leur nom dans le code
				// Ici je remplace le nom dans le code à la main
				declare Text LabelText = "TEST";
				declare Text LogoUrl;
				switch(Sections_Name[I]) {
					case "Campaign" : {
						LabelText = "{{{
							//L16N Name for the main menu button, designates the one-player campaign
							_("Solo")}}}";
						LogoUrl = "{{{GameLogoSolo}}}";
					}
					case "Online" : {
						LabelText = "{{{
							//L16N Name for the main menu button, is related to the multiplayer servers online
							_("Online play")}}}";
						LogoUrl = "{{{GameLogoOnline}}}";
					}
					case "LocalPlay" : {
						LabelText = "{{{
							//L16N Name for the main menu button, means playing locally on the same screen
						_("Local play")}}}";
						LogoUrl = "{{{GameLogoLocalPlay}}}";
					}
					case "Editor" : {
						LabelText = "{{{
							//L16N Name for the main menu button, designates the editors of Maniaplanet
							_("Editors")}}}";
						LogoUrl = "{{{GameLogoEditor}}}";
					}
					case "Style" : {
						LabelText = "{{{
							//L16N Name for the main menu button, the appearance of the menus (as in "stylesheet")
							_("Style")}}}";
						LogoUrl = "{{{GameLogoStyle}}}";
					}
					case "Resources" : {
						LabelText = "{{{
							//L16N Name for the main menu button, designates all the files and folders that will be added to the game
							_("Publishing")}}}";
						LogoUrl = "{{{GameLogoPublishing}}}";
					}
					case "DataCreation" : {
						LabelText = "{{{
							//L16N Name for the main menu button, designates all the files and folders that will be added to the game
							_("Resources")}}}";
						LogoUrl = "{{{GameLogoResources}}}";
					}
					case "MatchSettings" : {
						LabelText = "{{{
							//L16N Name for the main menu button, term referencing a playlist of maps with a ruleset to play them
							_("Match settings")}}}";
						LogoUrl = "{{{GameLogoMatchSettings}}}";
					}
					case "Ingame" : {
						LabelText = "{{{
							//L16N Name for the main menu button
							_("Ingame")}}}";
						LogoUrl = "{{{GameLogoIngame}}}";
					}
				}
				Label_Section.SetText(LabelText);
				(Frames_Instance.GetFirstChild("Quad_Logo") as CMlQuad).ChangeImageUrl(LogoUrl);
			}
		}
		
		Void UpdateLabelSectionState(Integer _Index, Boolean _IsActive)
		{
			declare Real Opacity;
			if(_IsActive) Opacity = 1.0;
			else          Opacity = 0.6;

			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^_Index^"0")	as CMlFrame);
			declare CMlQuad Quad_Section     <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
			declare CMlQuad Quad_Logo        <=> (Frames_Instance.GetFirstChild("Quad_Logo")	as CMlQuad);
			declare CMlLabel Label_Section   <=> (Frames_Instance.GetFirstChild("Label_Section") as CMlLabel);
			Quad_Section.Opacity = Opacity;
			Quad_Logo.Opacity = Opacity;
			Label_Section.Opacity = Opacity;
		}


		Void MoveActiveQuad(Integer _Index, Real _PosX)
		{
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
			if(Frame_Active == Null) return;
			declare CMlQuad Quad_Active     <=> (Frame_Active.GetFirstChild("Quad_Active")	as CMlQuad);
			declare CMlLabel Label_Active     <=> (Frame_Active.GetFirstChild("Label_Active")	as CMlLabel);
			LibManialink_SetTargetPosition(Frame_Active, <_PosX, Frame_Active.RelativePosition_V3.Y>);
			LibManialink_PresetAnim(Frame_Active, 200, "EaseOutCubic");
		}

		Void Init()
		{
			G_IsActive[0] = True;
			G_IsActive[1] = True;
			G_IsActive[2] = True;
			G_IsActive[3] = True;
			G_IsActive[4] = True;
			for(I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlQuad Quad_Section     <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
				declare CMlControl WarningSign	 <=>  Frames_Instance.GetFirstChild("WarningSign");
				declare Integer QuadId for Quad_Section;
				QuadId = I;
				G_WarningSigns.add(WarningSign);
				UpdateLabelSectionState(I, G_IsActive[G_ActiveFocus]);
			}
			for(I, 1, 4)
			{
				declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^I)	as CMlFrame);
				if(Frame_Active == Null) return;
				declare Text ColorToText = SectionsSelector_TextLib::ColorToText(SectionsColorsDefault[I-1]);
				MoveActiveQuad(I, 20.);
			}
		}
		
		Void SetActiveQuadColor(Integer _Index, Vec3 _Color)
		{
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
			if(Frame_Active == Null) return;
			declare CMlQuad Quad_Active     <=> (Frame_Active.GetFirstChild("Quad_Active")	as CMlQuad);
			Quad_Active.BgColor = _Color;
		}

		Void SetColorQuadColor(Integer _Index, Vec3 _Color, Real _Opacity)
		{
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
			if(Frame_Active == Null) return;
			declare CMlQuad Quad_ActiveButton     <=> (Frame_Active.GetFirstChild("Quad_ActiveButton")	as CMlQuad);
			Quad_ActiveButton.BgColor = _Color;
			Quad_ActiveButton.Opacity = _Opacity;
		}
		
		Void SetSectionColor(Integer _Index, Text _Color)
		{
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
			if(Frame_Active == Null) return;
			declare Vec3 TextToColor = SectionsSelector_TextLib::ToColor(_Color);

		}

		Void SetFrameColor_Visibility(Integer _Index, Boolean _Visible)
		{
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Active"^_Index)	as CMlFrame);
			if(Frame_Active == Null) return;
		}

		Void UpdateAllSections()
		{
			foreach(ActiveIndex => IsActive in G_IsActive) {
				declare Vec3 Color = ActiveButtonColorOver[IsActive];
				SetColorQuadColor(ActiveIndex, Color, 0.8);
				UpdateLabelSectionState(ActiveIndex, IsActive);
			}
		}

		main() {
			Init();
			ShowPage();

			while(True) {
				
				yield;
				if(! PageIsVisible && PendingEvents.count == 0) continue;
				LibManialink_AnimLoop();
				
				if(G_ActiveTimeToUnfocus < Now && G_ActiveTimeToUnfocus != -1)
				{
					MoveActiveQuad(G_ActiveFocus, 20.);
					G_ActiveFocus = 0;
					G_ActiveTimeToUnfocus = -1;
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									SendCustomEvent("Quit", [""]);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Quad_Section")
							{
								declare Integer QuadId for Event.Control;
								declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^QuadId^"0")	as CMlFrame);
								declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section") as CMlLabel);
								Label_Section.TextColor = SectionsSelector_TextLib::ToColor("{{{DesignManialinks::GetColorCode_Overall()}}}");
								SendCustomEvent("GotoSection", [QuadId^""]);
							}
							else if(Event.ControlId == "Quad_ActiveButton")
							{
								G_IsActive[G_ActiveFocus] = !G_IsActive[G_ActiveFocus];
								SetFrameColor_Visibility(G_ActiveFocus, G_IsActive[G_ActiveFocus]);

								declare Vec3 Color = ActiveButtonColorOver[G_IsActive[G_ActiveFocus]];
								SetColorQuadColor(G_ActiveFocus, Color, 0.8);
								UpdateLabelSectionState(G_ActiveFocus, G_IsActive[G_ActiveFocus]);
								SendCustomEvent("SectionsSelector_SetActive", [SectionsSelector_TextLib::ToText(G_ActiveFocus), SectionsSelector_TextLib::ToText(G_IsActive[G_ActiveFocus])]);

							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "Quad_Section")
							{
								declare Integer QuadId for Event.Control;
								declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^QuadId^"0")	as CMlFrame);
								declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section") as CMlLabel);
								Label_Section.TextColor = <1., 1., 1.>;

								if(G_ActiveFocus != QuadId) MoveActiveQuad(G_ActiveFocus, 20.);
								G_ActiveFocus = QuadId;
								MoveActiveQuad(G_ActiveFocus, -10.4);
								G_ActiveTimeToUnfocus = -1;
							}
							else if(Event.ControlId == "Quad_Active")
							{
								G_ActiveTimeToUnfocus = -1;
							}
							else if(Event.ControlId == "Quad_ActiveButton")
							{
								G_ActiveTimeToUnfocus = -1;
								declare Vec3 Color = ActiveButtonColorOver[G_IsActive[G_ActiveFocus]];
								declare Real Opacity;
								if(G_IsActive[G_ActiveFocus]) Opacity = 0.8;
								else                          Opacity = 0.5;
								SetColorQuadColor(G_ActiveFocus, Color, Opacity);
							}
							else if(Event.ControlId == "Quad_BG")
							{
								G_ActiveTimeToUnfocus = 1000 + Now;

							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "Quad_Section")
							{
								declare Integer QuadId for Event.Control;
								declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^QuadId^"0")	as CMlFrame);
								declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section") as CMlLabel);
								Label_Section.TextColor = SectionsSelector_TextLib::ToColor("{{{DesignManialinks::GetColorCode_Overall()}}}");
								//G_ActiveTimeToUnfocus = 1000 + Now;
							}
							else if(Event.ControlId == "Quad_Active")
							{
								//SetActiveQuadColor(G_ActiveFocus, <1., 1., 1.>);
							}
							else if(Event.ControlId == "Quad_ActiveButton")
							{
								declare Vec3 Color = ActiveButtonColorOut[G_IsActive[G_ActiveFocus]];
								declare Real Opacity;
								if(G_IsActive[G_ActiveFocus]) Opacity = 0.8;
								else                          Opacity = 0.5;
								SetColorQuadColor(G_ActiveFocus, Color, Opacity);

							}
						}

						case CMlEvent::Type::PluginCustomEvent: {

							switch(Event.CustomEventType) {
								case "Show" : {
									ShowPage();
									SendCustomEvent("TaskBar_Show", Text[]);
									SendCustomEvent("TaskBar_UpdateTitleAndLogo", [SectionsSelector_TextLib::ToText(True)]);
								}

								case "Hide" : {
									EnableMenuNavigation(True,False,Null,0);
									SendCustomEvent("DetachPage", ["SectionsSelector"]);
								}
								case "SectionInfosSent" : {
									SetSection();
								}
								case "UpdateAll" : {
									declare Boolean[Integer]	SectionsSelector_ActiveSections	for Page;
									declare Integer[]			SectionsSelector_Warnings		for Page;
									G_IsActive = SectionsSelector_ActiveSections;
									for (HideIndex, 0, {{{Count_InstancesY - 1}}}) {
										G_WarningSigns[HideIndex].Hide();
									}
									foreach(WarningId in SectionsSelector_Warnings) {
										G_WarningSigns[WarningId].Show();
									}
									UpdateAllSections();
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}