#Include "Libs/Nadeo/MP4/Common/Components/AssetMaker/LBAssetMaker.Script.txt"	as AssetMaker
#Include "TextLib"											as TextLib

#Const C_IMG_Checkbox_Open		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open.dds"
#Const C_IMG_Checkbox_Closed_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed_Over.dds"
#Const C_IMG_Checkbox_Closed	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed.dds"
#Const C_IMG_Checkbox_Open_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open_Over.dds"

#Const C_DefaultAssetPositions	<-130., 29.>
#Const C_UGCAssetPositions		<-130., -22.>
//L16N Refers to game modes represented as scripts, to be played online.
#Const C_DefaultAssetTitle		_("|Max 20 characters|Default modes")
//L16N Refers to game modes represented as scripts, to be played online.
#Const C_UGCAssetTitle			_("|Max 20 characters|Custom modes")
//L16N Refers to game modes represented as scripts, to be played online.
#Const C_ExtraAssetTitle		_("|Max 20 characters|Player modes")
#Const C_DefaultAssetText		_("These are the classic Trackmania mode scripts.")
//L16N Refers to scripts, editors, files.
#Const C_DefaultAssetEnding		_("You can keep or discard them from your title.")
#Const C_UGCAssetText			_("These are custom mode scripts.")
//L16N Refers to scripts, editors, files.
#Const C_UGCAssetEnding			_("You can add them to your title by clicking on the '+'.")
#Const C_ExtraAssetText			"By checking this box, you are allowing players of your title to play online with other custom modes."

#Const C_Logo					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Online.dds"
#Const C_AssetLogo				""

Text Build() {
	//L16N Title of a section. Refers to the different settings for the online menu.
	declare Text[] AssetName = [_("Online settings"),
	//L16N |Verb, infinitive| refers to game modes represented as scripts, to be played online.
	_("Choose online mode")];
	AssetMaker::Init("Online", AssetName, C_DefaultAssetTitle,
			TextLib::Compose("%1 %2", C_DefaultAssetText, C_DefaultAssetEnding),
			C_UGCAssetTitle,
			TextLib::Compose("%1 %2", C_UGCAssetText, C_UGCAssetEnding),
			//L16N Refers to game modes represented as scripts, to be played online.
			"Allow players' custom script modes online",
			True, C_ExtraAssetTitle, C_ExtraAssetText,
			//L16N |Infinitive| In a popup, a button to modify the selected file
			_("Edit"), C_Logo, C_AssetLogo);
	declare Text MLText = """
<manialink version="3" name="L_Online">
{{{AssetMaker::ManialinkFrameModels()}}}

	<frame id="Frame_All">
	<quad id="HideAllOtherAssets" halign="center" valign="center" size="150.65 99" pos="0.325 -20.65" bgcolor="000" opacity="0.5" scriptevents="1"/>
	<frameinstance modelid="AssetButton" id="AssetButton_AllowAllModes" pos="-5 37"/>
	<frameinstance modelid="AssetButton" id="AssetButton_DisplayTitleServersOnly" pos="-5 49"/>
{{{AssetMaker::ManialinkMainBody()}}}
	</frame>

	<script><!--
	#Include "TextLib" as Online_TextLib
	{{{AssetMaker::Includes()}}}
	{{{AssetMaker::Declares()}}}

	declare Boolean G_AllAssets_Active;
	declare Boolean G_DisplayTitleServersOnly;

	Void ShowPage()
	{
		EnableMenuNavigation(True,False,Null,1);
	}

	Void Update()
	{
		declare AssetButton_AllowAllModes			<=> (Page.GetFirstChild("AssetButton_AllowAllModes") as CMlFrame);
		declare AssetButton_DisplayTitleServersOnly	<=> (Page.GetFirstChild("AssetButton_DisplayTitleServersOnly") as CMlFrame);
		{
			declare CMlQuad ParamBox			<=> (AssetButton_AllowAllModes.GetFirstChild("Quad_ActiveButton") as CMlQuad);
			if (G_AllAssets_Active) {
				ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Closed)}}});
				ParamBox.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Closed_Over)}}};
			} else {
				ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Open)}}});
				ParamBox.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Open_Over)}}};
			}
		}
		{
			declare CMlQuad ParamBox			<=> (AssetButton_DisplayTitleServersOnly.GetFirstChild("Quad_ActiveButton") as CMlQuad);
			if (G_DisplayTitleServersOnly) {
				ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Closed)}}});
				ParamBox.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Closed_Over)}}};
			} else {
				ParamBox.ChangeImageUrl({{{dump(C_IMG_Checkbox_Open)}}});
				ParamBox.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Open_Over)}}};
			}
		}
		declare			HideAllOtherAssets	<=> Page.GetFirstChild("HideAllOtherAssets");
		HideAllOtherAssets.Visible = G_AllAssets_Active;
		
	}

	Void Init()
	{
		declare AssetButton_AllowAllModes			<=> (Page.GetFirstChild("AssetButton_AllowAllModes") as CMlFrame);
		declare AssetButton_DisplayTitleServersOnly	<=> (Page.GetFirstChild("AssetButton_DisplayTitleServersOnly") as CMlFrame);
		declare AssetMaker_Frame	<=> Page.GetFirstChild("AssetMaker_Frame");
		AssetMaker_Frame.RelativePosition_V3	= <0., -23.>;
		declare Frame_Menu			<=>	Page.GetFirstChild("Frame_Menu");
		Frame_Menu.RelativePosition_V3			= <0., 91.>;
		{
			declare Asset_Label			<=> (AssetButton_AllowAllModes.GetFirstChild("Asset_Label") as CMlLabel);
			declare Quad_RemoveButton	<=> (AssetButton_AllowAllModes.GetFirstChild("Quad_RemoveButton") as CMlQuad);
			declare Quad_ActiveButton	<=> AssetButton_AllowAllModes.GetFirstChild("Quad_ActiveButton");
			declare Integer QuadId for Quad_ActiveButton;
			QuadId = -1;
			G_AllAssets_Active = True;
			Asset_Label.SetText(_("|Servers' scripts|Allow all modes"));
			Quad_RemoveButton.Hide();
		}
		{
			declare Asset_Label			<=> (AssetButton_DisplayTitleServersOnly.GetFirstChild("Asset_Label") as CMlLabel);
			declare Quad_RemoveButton	<=> (AssetButton_DisplayTitleServersOnly.GetFirstChild("Quad_RemoveButton") as CMlQuad);
			declare Quad_ActiveButton	<=> AssetButton_DisplayTitleServersOnly.GetFirstChild("Quad_ActiveButton");
			declare Integer QuadId for Quad_ActiveButton;
			QuadId = -2;
			G_DisplayTitleServersOnly = True;
			//L16N |Verb, infinitive| in a checkbox button, in the maker menu "Online play" to restrict server browsing
			Asset_Label.SetText(_("Display title servers only"));
			Quad_RemoveButton.Hide();
		}
		Update();
	}

	Void UpdateFromController()
	{
		declare Boolean Page_AllAssets_Active			for Page;
		declare Boolean Page_DisplayTitleServersOnly	for Page;
		G_AllAssets_Active			= Page_AllAssets_Active;
		G_DisplayTitleServersOnly	= Page_DisplayTitleServersOnly;
		Update();
	}

	main() {
		Init();
		Asset_Init();
		while(True) {

			yield;
			Asset_Loop();
			if(! PageIsVisible && PendingEvents.count == 0) continue;
			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								SendCustomEvent("GotoPrevious", [""]);
							}
						}
					}
					case CMlEvent::Type::MouseClick: {
						if(Event.ControlId == "Quad_ActiveButton") {
							declare Integer QuadId for Event.Control;
							if (QuadId > -1) continue;
							if (QuadId == -1) {
								G_AllAssets_Active			= !G_AllAssets_Active;
								SendCustomEvent("Asset_SetAllAssets_Active", [Online_TextLib::ToText(G_AllAssets_Active)]);
								Update();
							} else if (QuadId == -2) {
								G_DisplayTitleServersOnly	= !G_DisplayTitleServersOnly;
								SendCustomEvent("Asset_DisplayTitleServersOnly", [Online_TextLib::ToText(G_DisplayTitleServersOnly)]);
								Update();
							}
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch(Event.CustomEventType) {
							case "Show" : {
								ShowPage();
								SendCustomEvent("UpdateBarreSection", ["Online"]);
								SendCustomEvent("TaskBar_UpdateTitleAndLogo", [Online_TextLib::ToText(False)]);
								Asset_Show();
							}
							case "Back" : {
								SendCustomEvent("GotoPrevious", Text[]); // TODO : Lié au hack constaté dans LocalPlayController
							}
							case "Hide" : {
								EnableMenuNavigation(False,False,Null,0);
								SendCustomEvent("DetachPage", ["Online"]);
							}
							case "UpdateFromController" : {
								UpdateFromController();
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>	""";
	
	return MLText;
}