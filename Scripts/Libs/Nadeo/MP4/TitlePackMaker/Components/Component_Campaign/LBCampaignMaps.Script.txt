#Include "Libs/Nadeo/MP4/Common/Components/MediaDisplayer/LBMediaDisplayer.Script.txt"	as MediaCardDisplayer
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"				as Colors
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font

#Include "Libs/Nadeo/MP4/TitlePackMaker/Components/Component_Campaign/LBCampaignCategories.Script.txt"		as CampaignCategories

#Const C_ImgBase				"file://Media/MEDIABROWSER_HiddenResources/"
#Const C_ImgTrack				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/TrackBrowser/"
#Const C_IMG_Cross_Remove		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCross.dds"
#Const C_IMG_Cross_RemoveOver	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCrossOver.dds"
#Const C_IMG_Cross_Move			"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/MoveCross.dds"
#Const C_IMG_Cross_MoveOver		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/MoveCrossOver.dds"

#Const C_ScaleFactor	1.005

Text MoveCardsFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frame id="MoveCardFrame-{{{CardIndex}}}" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}" scale="{{{C_ScaleFactor}}}" hidden="1">
					<quad id="MoveCardQuad" halign="center" valign="center" size="{{{_CardSize.X}}} {{{_CardSize.Y}}}" scriptevents="1"/>
					<quad id="MoveCardQuadHelper-{{{CardIndex}}}" halign="center" valign="center" size="{{{_CardSize.X}}} {{{_CardSize.Y}}}" bgcolor="F00" opacity="0.05"/>
				</frame>
""";
	}
	return Result;
}

Text ChooseQuadFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frameinstance id="ChooseQuadFrame-{{{CardIndex}}}" modelid="ChooseQuadFrame" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}"/>
""";
	}
	return Result;
}

Text WarningSignFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frameinstance id="WarningSignFrame-{{{CardIndex}}}" modelid="WarningSignFrame" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}"/>
""";
	}
	return Result;
}

Text RemoveQuadFrameBody(Vec2[] _CardPositions, Vec2 _CardSize) {
	declare Text Result;
	foreach(CardIndex => CardPosition in _CardPositions) {
		Result ^= """				<frameinstance id="InteractQuadFrame-{{{CardIndex}}}" modelid="InteractQuadFrame" pos="{{{CardPosition.X}}} {{{CardPosition.Y}}}"/>
""";
	}
	return Result;
}

Text Build() {
	//Maps
	declare Vec2[]	CategoryCardPosiitons	= CampaignCategories::GetCategoryCardPositions();
	declare Vec2	SizeMaps				= MediaCardDisplayer::Get_SizeMediaCards();

	declare Text	IMGTrack				= C_ImgTrack ^ "TrackType.dds";
	declare Text	IMGTime					= C_ImgTrack ^ "LastTime.dds";
	declare Text	IMGValid				= C_ImgTrack ^ "Validated.dds";
	declare Text	IMGReplay				= C_ImgTrack ^ "Replay.dds";
	declare Text	IMGGhosts				= C_ImgTrack ^ "GhostRecord.dds";

	declare Text	IMGStart				= C_ImgBase ^ "/Common/Images/Menus/Buttons/ReplaceLogoMain.dds";
	declare Text	IMGMapEdit				= C_ImgBase ^ "/Common/Images/Menus/Buttons/LogoEdit.dds";
	declare Text	IMGRecGhost				= C_ImgBase ^ "/Common/Images/Menus/Buttons/LogoRecGhost.dds";

	declare Text	IMGCardMapMedal			= C_ImgBase ^ "/Maker/Images/Campaign/CardMedalLock.dds";

	declare Text	Img_Warning				= C_ImgBase ^ "/Common/Images/Menus/Buttons/Warning.dds";

	declare Integer	Count_InstancesMapsX	= 5;
	declare Integer	Count_InstancesMapsY	= 4;
	declare Real	PosXFirstMaps			= -85.7;
	declare Real	PosYFirstMaps			= 38.8;
	declare Boolean	IsAuthorLine			= True;
	declare Boolean	IsScroll				= False;
	declare Boolean	ShowsNonExistentFrames	= True;
	declare Text	InfoLineStyle			= "Main";
	declare Text[]	InfoLineLogos			= [IMGTrack, IMGTime, IMGValid, IMGReplay, IMGGhosts];
	declare Text[]	MetadataKeys			= ["Medal", "Time", "LockMedalType", "UserMedalNb", "LockMedalNb"];
	declare Text[]	ButtonNames				= [
										//L16N Verb, infinitive, to change the current media with another media
										_("Replace"), 
										//L16N Verb, infinitive, to modify the selected map
										_("Edit map"), 
										//L16N Verb, infinitive, to edit the replays associated with the map
										_("Edit ghosts")];
	declare Text[]	ButtonLogos				= [IMGStart, IMGMapEdit, IMGRecGhost];
	declare Text[]	ButtonActions			= ["Select", "Action2", ""];
	declare Text[]	ButtonEvents			= ["Campaign_SwitchMap", "Campaign_Edit", "Campaign_RecordGhost"];

	MediaCardDisplayer::Init(	Count_InstancesMapsX, Count_InstancesMapsY, <PosXFirstMaps, PosYFirstMaps>, IsAuthorLine, IsScroll, ShowsNonExistentFrames,
								InfoLineStyle, InfoLineLogos, MetadataKeys, ButtonNames, ButtonLogos, ButtonActions, ButtonEvents);

	declare Vec2[]		CardPositions		= MediaCardDisplayer::GetCardPositions();
	declare Vec3[Text]	MedalColors			= ["Bronze" => Colors::GetColor("Bronze"), "Silver" => Colors::GetColor("Silver"), "Gold" => Colors::GetColor("Gold")];

	declare Text	SubFont				= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_Campaign">

	<framemodel id="MediaCardDisplayer_Card_ExtraData">
		<frame id="Frame_MedalLock" pos="-20 -10.5">
			<quad	id="Quad_MedalLock"		halign="left" valign="bottom" size="7 7" pos="0.5 1"   image="{{{IMGCardMapMedal}}}"/>
			<label	id="Label_MedalLock"	halign="left" valign="bottom" size="5 3" pos="6 0" textfont="{{{SubFont}}}" textemboss="1" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.5" text="0"/>
		</frame>
		<frame id="Frame_AdditionalInfo" pos="18.5 -10.5">

		</frame>
	</framemodel>

	<framemodel id="MediaCardDisplayer_Menu_ExtraData">
	</framemodel>

	<framemodel id="MediaCardDisplayer_ListItem_ExtraData">
	</framemodel>

	<framemodel id="ChooseQuadFrame">
		<label id="ChooseQuadLabel"	valign="center" halign="center" size="{{{SizeMaps.X}}} {{{SizeMaps.Y}}}" z-index="1"
			textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textfont="{{{SubFont}}}" textprefix="$t" text="+" textsize="7."/>
		<quad id="ChooseQuad"		valign="center" halign="center" size="{{{SizeMaps.X}}} {{{SizeMaps.Y}}}" z-index="1" scriptevents="1"/>
	</framemodel>

	<framemodel id="WarningSignFrame">
		<frame id="WarningSign" pos="-14 6" z-index="3" hidden="1">
			<quad size="2.4 7" halign="center" valign="center" z-index="1"	image="{{{Img_Warning}}}"  keepratio="fit"/>
		</frame>
	</framemodel>

	<framemodel id="InteractQuadFrame">
		<quad id="RemoveQuad"		valign="center" halign="center" size="5 5" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 4.}}}" z-index="-1" bgcolor="000" opacity="0.2" scriptevents="1"/>
		<quad id="RemoveQuadImage"	valign="center" halign="center" size="3 3" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 4.}}}" image="{{{C_IMG_Cross_Remove}}}" colorize="ddd"/>
		<quad id="MoveQuad"			valign="center" halign="center" size="5 5" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 10.}}}" z-index="-1" bgcolor="000" opacity="0.2" scriptevents="1"/>
		<quad id="MoveQuadImage"	valign="center" halign="center" size="4 4" pos="{{{SizeMaps.X / 2. - 4.}}} {{{SizeMaps.Y / 2. - 10.}}}" image="{{{C_IMG_Cross_Move}}}" colorize="fff"/>
	</framemodel>

	{{{MediaCardDisplayer::ManialinkFrameModels()}}}

	<frame id="Frame_All">
		<quad id="Quad_BlurryBG"	halign="center" valign="center" size="320 180" z-index="-1" opacity="0" style="Bgs1" substyle="BgDialogBlur" bluramount="0"/>
		<frame id="MoveHelper_Frame" pos="-19 -21.5" hidden="1">
			<quad id="MoveHelper_Line" z-index="0" size="20 1" bgcolor="F80" halign="center" valign="center"/>
			<quad id="MoveHelper_RightArrow" pos="10 0" z-index="0" size="4 3.3" bgcolor="FFFA" style="Copilot" substyle="Right" modulatecolor="F80" halign="center" valign="center"/>
			<quad id="MoveHelper_LeftArrow" pos="-10 0" z-index="0" size="4 3.3" bgcolor="FFFA" style="Copilot" substyle="Left" modulatecolor="F80" halign="center" valign="center"/>
		</frame>

		<frame id="Frame_ButtonSettings" pos="-106.3 -45">
			<quad id="ButtonSettings" size="41.2 10" z-index="-1" scriptevents="1"/>
			<quad id="ButtonSettingsOver" size="41.2 10" z-index="-2" bgcolor="000" opacity="0.5" hidden="1"/>
			<label size="41.2 10" pos="20 -5" textfont="{{{SubFont}}}" textprefix="$t" text="{{{//L16N Noun, plural, the options in the menu, similar to "parameters"
				_("Settings")
				}}}" valign="center" halign="center" textcolor="FFF"/>
			<frame id="RecordCenterContour">
				<quad halign="left" valign="top" size="0.5 10" bgcolor="fff"/>
				<quad halign="left" valign="center" size="41.2 0.5" bgcolor="fff"/>
				<quad halign="left" valign="center" size="41.2 0.5" bgcolor="fff" pos="0 -10"/>
				<quad halign="right" valign="top" size="0.5 10" bgcolor="fff" pos="41.2. 0"/>
			</frame>
		</frame>

		<frame id="Frame_Parallax">
			<frame id="WarningSignFrames" z-index="4">
{{{WarningSignFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="MoveCardsFrame" z-index="3">
{{{MoveCardsFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="ChooseQuadFrames" z-index="2">
{{{ChooseQuadFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="InteractQuadFrames" z-index="1">
{{{RemoveQuadFrameBody(CardPositions, SizeMaps)}}}
			</frame>
			<frame id="CardsFrame">
{{{MediaCardDisplayer::ManialinkMainBody()}}}
			</frame>
		</frame>
	</frame>

	<script><!--
	#Include "TextLib"	as Campaign_TextLib
	#Include "MathLib"  as Campaign_MathLib

	#Const C_AllCardPositions	{{{dump(CardPositions)}}}
	#Const C_MedalColors		{{{dump(MedalColors)}}}
	#Const C_QuadOver			["RemoveQuad" => {{{dump(C_IMG_Cross_RemoveOver)}}},	"MoveQuad" => {{{dump(C_IMG_Cross_MoveOver)}}}]
	#Const C_QuadOut			["RemoveQuad" => {{{dump(C_IMG_Cross_Remove)}}},		"MoveQuad" => {{{dump(C_IMG_Cross_Move)}}}]

{{{MediaCardDisplayer::Includes()}}}
{{{MediaCardDisplayer::FirstDeclares()}}}

	declare CMlFrame[]		G_ChooseQuadFrames;
	declare CMlLabel[]		G_ChooseQuadLabels;
	declare CMlFrame[]		G_InteractQuadFrames;
	declare CMlControl[]	G_WarningSigns;
	declare Boolean			G_DisableNavigation;
	declare Integer[]		G_ChooseTrackIndexes;
	declare Boolean			G_IsInMoveMode;
	declare Integer			G_MovingSectionStart;
	declare Integer			G_MovingSectionDestination;
	declare Integer			G_MovingMapStart;
	declare Integer			G_LockFocusQuad;// Utilisé pour forcer la sélection sur
											// le quad sur lequel on a cliqué la dernière fois

	Void ShowPage()
	{
		declare CMlFrame Frame_Parallax <=> (Page.MainFrame.GetFirstChild("Frame_Parallax")	as CMlFrame);
		Frame_Parallax.Show();
	}

	Void MediaCardDisplayer_ShowCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare Integer OneDIndex for _Card;
		if ((OneDIndex == 0) && _Data["State"] == "NonExistent") {
			G_DisableNavigation = True;
		}
		declare CMlFrame	Frame_MedalLock	<=> (_Card.GetFirstChild("Frame_MedalLock") as CMlFrame);
		declare CMlQuad		Quad_MedalLock	<=> (_Card.GetFirstChild("Quad_MedalLock") as CMlQuad);
		declare CMlLabel	Label_MedalLock	<=> (_Card.GetFirstChild("Label_MedalLock") as CMlLabel);
		declare Text MedalType	= _Data["LockMedalType"];
		declare Text MedalNb	= _Data["LockMedalNb"];
		if (MedalNb == "0") {
			Frame_MedalLock.Hide();
		} else {
			Frame_MedalLock.Show();
			Quad_MedalLock.Colorize = C_MedalColors[MedalType];
			Label_MedalLock.Value = MedalNb;
		}
	}

	Void MediaCardDisplayer_ShowLockedCard(CMlFrame _Card, Text[Text] _Data)
	{
	}

	Void MediaCardDisplayer_UnSelectCard(CMlFrame _Card)
	{
	}

	Void MediaCardDisplayer_UnFocusCard(CMlFrame _Card, Text[Text] _Data)
	{
	}

	Void MediaCardDisplayer_FocusCard(CMlFrame _Card, Text[Text] _Data)
	{
	}

	Void MediaCardDisplayer_SelectCard(CMlFrame _Card, Text[Text] _Data)
	{
		declare Integer OneDIndex for _Card;
		G_MovingMapStart = OneDIndex;
	}

{{{MediaCardDisplayer::SecondDeclares()}}}

	Void LockFocusQuad()
	{
		if (G_LockFocusQuad != -1) {
			TwoDArrayCardBuilder_SetRunningState(True, G_LockFocusQuad);
			G_LockFocusQuad = -1;
		} else {
			TwoDArrayCardBuilder_SetRunningState(True);
		}
	}

	Void ShowTransition()
	{
		LockFocusQuad();
	}

		Void Init()
		{
			G_WarningSigns			.clear();
			for (WarningSignIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame	WarningSignFrame	<=> (Page				.GetFirstChild("WarningSignFrame-" ^ WarningSignIndex) as CMlFrame);
				declare CMlControl	WarningSign			<=> (WarningSignFrame	.GetFirstChild("WarningSign") as CMlControl);
				G_WarningSigns.add(WarningSign);
			}
			G_ChooseQuadFrames		.clear();
			G_ChooseQuadLabels		.clear();
			for (ChooseQuadIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame	ChooseQuadFrame	<=> (Page			.GetFirstChild("ChooseQuadFrame-" ^ ChooseQuadIndex) as CMlFrame);
				declare CMlControl	ChooseQuad		<=> ChooseQuadFrame	.GetFirstChild("ChooseQuad");
				declare CMlLabel	ChooseQuadLabel	<=> (ChooseQuadFrame.GetFirstChild("ChooseQuadLabel") as CMlLabel);
				G_ChooseQuadFrames.add(ChooseQuadFrame);
				G_ChooseQuadLabels.add(ChooseQuadLabel);
				declare Integer MapIndex for ChooseQuad;
				MapIndex = ChooseQuadIndex;
			}
			G_InteractQuadFrames	.clear();
			for (InteractQuadIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame InteractQuadFrame	<=> (Page				.GetFirstChild("InteractQuadFrame-" ^ InteractQuadIndex) as CMlFrame);
				declare CMlControl RemoveQuad		<=> InteractQuadFrame	.GetFirstChild("RemoveQuad");
				declare CMlControl MoveQuad			<=> InteractQuadFrame	.GetFirstChild("MoveQuad");
				G_InteractQuadFrames.add(InteractQuadFrame);
				{
					declare Integer MapIndex for RemoveQuad;
					MapIndex = InteractQuadIndex;
				}
				{
					declare Integer MapIndex for MoveQuad;
					MapIndex = InteractQuadIndex;
				}
			}
			for (MoveCardIndex, 0, C_AllCardPositions.count - 1) {
				declare CMlFrame	MoveCardFrame	<=> (Page.GetFirstChild("MoveCardFrame-" ^ MoveCardIndex) as CMlFrame);
				declare CMlControl	MoveCardQuad	<=> MoveCardFrame.GetFirstChild("MoveCardQuad");
				declare Integer 	MoveCardQuadIndex for MoveCardQuad;
				MoveCardQuadIndex =	MoveCardIndex;
			}
			G_DisableNavigation			= False;
			G_ChooseTrackIndexes		= Integer[];
			G_IsInMoveMode				= False;
			G_MovingMapStart			= -1;
			G_MovingSectionStart		= -1;
			G_MovingSectionDestination	= -1;
			G_LockFocusQuad				= -1;
		}

		Void Hide() {
		}

		Void StopMovingMode()
		{
			if (!G_IsInMoveMode) {
				return;
			}
			G_IsInMoveMode = False;
			for(I, 0, C_AllCardPositions.count - 1) {
				Page.GetFirstChild("MoveCardFrame-" ^ I).Hide();
				Page.GetFirstChild("ChooseQuadFrame-" ^ I).Show();
				Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ I).RelativeScale = 1.;
			}
			LockFocusQuad();
			Page.GetFirstChild("MoveHelper_Frame").Hide();
		}

		Void StartMovingMode()
		{
			if (G_IsInMoveMode) {
				return;
			}
			G_IsInMoveMode = True;
			G_MovingSectionDestination = G_MovingSectionStart;
			TwoDArrayCardBuilder_SetRunningState(False);
			for(I, 0, C_AllCardPositions.count - 1) {
				Page.GetFirstChild("MoveCardFrame-" ^ I).Show();
				G_ChooseQuadLabels[I].SetText("");
				if ((I == G_MovingMapStart) && (G_MovingSectionDestination == G_MovingSectionStart)) {
					Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Hide();
					continue;
				}
				Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Show();
				Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ I).RelativeScale = {{{C_ScaleFactor}}};
			}
		}

		Void RestartMovingMode(Integer _SectionIndex)
		{
			if (!G_IsInMoveMode) {
				return;
			}
			G_MovingSectionDestination = _SectionIndex;
			for(I, 0, C_AllCardPositions.count - 1) {
				Page.GetFirstChild("MoveCardFrame-" ^ I).Show();
				if ((I == G_MovingMapStart) && (G_MovingSectionDestination == G_MovingSectionStart)) {
					Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Hide();
					continue;
				}
				Page.GetFirstChild("MoveCardQuadHelper-" ^ I).Show();
				Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ I).RelativeScale = {{{C_ScaleFactor}}};
			}
		}

		Vec2 GetMiddlePosition(Vec2 _Vector1, Vec2 _Vector2)
		{
			return 0.5 * (_Vector1 + _Vector2); 
		}

		Real GetMiddleDistance(Vec2 _Vector1, Vec2 _Vector2)
		{
			return Campaign_MathLib::Distance(<_Vector1.X, _Vector1.Y, 0.>, <_Vector2.X, _Vector2.Y, 0.>);
		}

		Real GetMiddleAngle(Vec2 _Vector1, Vec2 _Vector2)
		{
			declare Vec3 VectorStart = <-1., 0., 0.>;
			declare Vec3 VectorEnd = <_Vector1.X - _Vector2.X, _Vector1.Y - _Vector2.Y, 0.>;
			if (_Vector2.Y > _Vector1.Y) {
				VectorEnd = <_Vector2.X - _Vector1.X, _Vector2.Y - _Vector1.Y, 0.>;
			}
			return 180. / Campaign_MathLib::PI() * Campaign_MathLib::OrientedAngle(VectorStart, VectorEnd); 
		}

		Vec2 GetVectorStart(Integer _SectionStart, Integer _SectionDestination, Integer _MapStart)
		{
			declare Vec2 VectorStart;
			if (_SectionStart == _SectionDestination) {
				VectorStart = C_AllCardPositions[_MapStart];
				VectorStart.Y -= 0.8;
			} else {
				declare Vec2[] StartPoints = {{{CategoryCardPosiitons}}};
				VectorStart = StartPoints[_SectionStart];
				VectorStart += <15., 1.3>;
			}
			return VectorStart;
		}

		Vec2 GetVectorDestination(Integer _MapDestination)
		{
			return C_AllCardPositions[_MapDestination];
		}

		Vec2 GetPosition(Integer _SectionStart, Integer _SectionDestination, Integer _MapStart, Integer _MapDestination)
		{
			declare Vec2 VectorStart = GetVectorStart(_SectionStart, _SectionDestination, _MapStart);
			declare Vec2 VectorDestination = GetVectorDestination(_MapDestination);
			return GetMiddlePosition(VectorStart, VectorDestination);
		}

		Real GetDistance(Integer _SectionStart, Integer _SectionDestination, Integer _MapStart, Integer _MapDestination)
		{
			declare Vec2 VectorStart = GetVectorStart(_SectionStart, _SectionDestination, _MapStart);
			declare Vec2 VectorDestination = GetVectorDestination(_MapDestination);
			return GetMiddleDistance(VectorStart, VectorDestination);
		}

		Real GetAngle(Integer _SectionStart, Integer _SectionDestination, Integer _MapStart, Integer _MapDestination)
		{
			declare Vec2 VectorStart = GetVectorStart(_SectionStart, _SectionDestination, _MapStart);
			declare Vec2 VectorDestination = GetVectorDestination(_MapDestination);
			return GetMiddleAngle(VectorStart, VectorDestination);
		}

		Void UpdateMoveHelper(Integer _SectionStart, Integer _SectionDestination, Integer _MapStart, Vec2 _MousePos)
		{
			declare Vec2 VectorStart = GetVectorStart(_SectionStart, _SectionDestination, _MapStart);
			Page.GetFirstChild("MoveHelper_Frame").RelativePosition_V3	= GetMiddlePosition(VectorStart, _MousePos);
			Page.GetFirstChild("MoveHelper_Line").Size					= <GetMiddleDistance(VectorStart, _MousePos), 1.>;
			Page.GetFirstChild("MoveHelper_RightArrow").RelativePosition_V3 =
																		<GetMiddleDistance(VectorStart, _MousePos) / 2., 0.>;
			Page.GetFirstChild("MoveHelper_LeftArrow").RelativePosition_V3 =
																		<- GetMiddleDistance(VectorStart, _MousePos) / 2., 0.>;
			Page.GetFirstChild("MoveHelper_Frame").RelativeRotation		= GetMiddleAngle(VectorStart, _MousePos);
		}

		Void MouseOver(Text _QuadId, CMlControl _Control) {
			if (!C_QuadOver.existskey(_QuadId)) {
				return;
			}
			declare Image <=> (_Control.Parent.GetFirstChild(_QuadId ^ "Image") as CMlQuad);
			Image.ChangeImageUrl(C_QuadOver[_QuadId]);
		}

		Void MouseOut(Text _QuadId, CMlControl _Control) {
			if (!C_QuadOut.existskey(_QuadId)) {
				return;
			}
			declare Image <=> (_Control.Parent.GetFirstChild(_QuadId ^ "Image") as CMlQuad);
			Image.ChangeImageUrl(C_QuadOut[_QuadId]);
		}

		main() {
			Init();
			MediaCardDisplayer_Init();

			while(True) {
				
				yield;
				if (G_DisableNavigation) {
					TwoDArrayCardBuilder_SetRunningState(False);
					G_DisableNavigation = False;
				}
				if(!PageIsVisible && (PendingEvents.count == 0)) continue;
				MediaCardDisplayer_Loop();
				if (G_IsInMoveMode) {
					UpdateMoveHelper(G_MovingSectionStart, G_MovingSectionDestination, G_MovingMapStart, <MouseX, MouseY>);
				}
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									SendCustomEvent("GotoPrevious", [""]);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							MouseOut(Event.ControlId, Event.Control);
							if (Event.ControlId == "ChooseQuad")
							{
								declare Integer MapIndex for Event.Control;
								G_LockFocusQuad = MapIndex;
								SendCustomEvent("Campaign_AddMap", [Campaign_TextLib::ToText(MapIndex)]);
								StopMovingMode();
							} else if (Event.ControlId == "RemoveQuad"){
								declare Integer MapIndex for Event.Control;
								SendCustomEvent("Campaign_RemoveMap", [Campaign_TextLib::ToText(MapIndex)]);
								StopMovingMode();
							} else if (Event.ControlId == "MoveQuad") {
								declare Integer MapIndex for Event.Control;
								SendCustomEvent("Campaign_Move", Text[]);
								G_MovingMapStart = MapIndex;
							} else if (Event.ControlId == "MoveCardQuad") {
								Page.GetFirstChild("MoveHelper_Frame").Hide();
								declare Integer MoveCardQuadIndex for Event.Control;
								G_LockFocusQuad = MoveCardQuadIndex;
								SendCustomEvent("Campaign_FinishMovingCard", [
													Campaign_TextLib::ToText(G_MovingSectionStart),
													Campaign_TextLib::ToText(G_MovingSectionDestination),
													Campaign_TextLib::ToText(G_MovingMapStart),
													Campaign_TextLib::ToText(MoveCardQuadIndex)]);
								StopMovingMode();
							} else if (Event.ControlId == "ButtonSettings") {
								SendCustomEvent("SoloSettings", Text[]);
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Hide();
							}
						}
						case CMlEvent::Type::MouseOver: {
							MouseOver(Event.ControlId, Event.Control);
							if (Event.ControlId == "ChooseQuad")
							{
								declare Integer MapIndex for Event.Control;
								declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MapIndex];
								ChooseQuadLabel.SetText("{{{//L16N Verb, infinitive form, to select a map
									_("Choose track")
									}}}");
								// TODO STORM : Change to map
								ChooseQuadLabel.TextSizeReal = 2.2;
							} else if (Event.ControlId == "MoveCardQuad") {
								declare Integer MoveCardQuadIndex for Event.Control;
								if ((MoveCardQuadIndex == G_MovingMapStart) && (G_MovingSectionStart == G_MovingSectionDestination)) {
									Page.GetFirstChild("MoveHelper_Frame").Hide();
									continue;
								} else {
									Page.GetFirstChild("MoveHelper_Frame").Show();
								}
								(Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ MoveCardQuadIndex) as CMlFrame).GetFirstChild("Quad_CardShadow").Hide();
								declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MoveCardQuadIndex];
								ChooseQuadLabel.SetText("{{{//L16N Verb, infinitive form, to put preselected media on this spot ("here")
									_("Move here")
									}}}");
								ChooseQuadLabel.TextSizeReal = 2.2;
							} else if (Event.ControlId == "ButtonSettings") {
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Show();
							}
						}
						case CMlEvent::Type::MouseOut: {
							MouseOut(Event.ControlId, Event.Control);
							if (Event.ControlId == "ChooseQuad")
							{
								declare Integer MapIndex for Event.Control;
								declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MapIndex];
								ChooseQuadLabel.SetText("+");
								ChooseQuadLabel.TextSizeReal = 7.;

							} else if (Event.ControlId == "MoveCardQuad") {
								if (!G_IsInMoveMode) {
									continue;
								}
								declare Integer MoveCardQuadIndex for Event.Control;
								if ((MoveCardQuadIndex == G_MovingMapStart) && (G_MovingSectionStart == G_MovingSectionDestination)) {
									Page.GetFirstChild("MoveHelper_Frame").Show();
									continue;
								}
								(Page.GetFirstChild("TwoDArrayCardBuilder_CardInstance-" ^ MoveCardQuadIndex) as CMlFrame).GetFirstChild("Quad_CardShadow").Show();
								declare CMlLabel ChooseQuadLabel <=> G_ChooseQuadLabels[MoveCardQuadIndex];
								ChooseQuadLabel.SetText("");
							} else if (Event.ControlId == "ButtonSettings") {
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Hide();
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "StartMovingAllCards" : {
									StartMovingMode();
								}
								case "Back" : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case "Show" : {
									StopMovingMode();
									EnableMenuNavigation(True,False,Null,1);
									ShowTransition();
									SendCustomEvent("TaskBar_UpdateTitleAndLogo", [Campaign_TextLib::ToText(False)]);
									MediaCardDisplayer_Show();
								}
								case "GiveChooseTrackQuads" : {
									declare Boolean	  Campaign_HasSettings	for Page;
									declare Integer[] Campaign_NewTracks	for Page;
									declare Integer[] Campaign_WarningMaps	for Page;
									if (Campaign_HasSettings) {
										Page.GetFirstChild("Frame_ButtonSettings").Show();
									} else {
										Page.GetFirstChild("Frame_ButtonSettings").Hide();
									}
									for(HideIndex, 0, C_AllCardPositions.count - 1) {
										G_ChooseQuadFrames[HideIndex].Hide();
										G_InteractQuadFrames[HideIndex].Show();
										G_WarningSigns[HideIndex].Hide();
									}
									foreach (ShowIndex in Campaign_NewTracks) {
										G_ChooseQuadFrames[ShowIndex].Show();
										if (G_IsInMoveMode) {
											G_ChooseQuadLabels[ShowIndex].SetText("");
										} else {
											G_ChooseQuadLabels[ShowIndex].SetText("+");
											G_ChooseQuadLabels[ShowIndex].TextSizeReal = 7.;
										}
										G_InteractQuadFrames[ShowIndex].Hide();
									}
									foreach(WarningIndex in Campaign_WarningMaps) {
										G_WarningSigns[WarningIndex].Show();
									}
								}
								case "ChangeSection" : {
									declare Integer NewSectionIndex = Campaign_TextLib::ToInteger(Event.CustomEventData[0]);
									if (!G_IsInMoveMode) {
										G_MovingSectionStart = NewSectionIndex;
									}
									RestartMovingMode(NewSectionIndex);
								}
								case "Hide" : {
									StopMovingMode();
									EnableMenuNavigation(True,False,Null,0);
									Hide();
									SendCustomEvent("DetachPage", ["CampaignMaps"]);
									SendCustomEvent("DetachPage", ["CampaignCategories"]);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}