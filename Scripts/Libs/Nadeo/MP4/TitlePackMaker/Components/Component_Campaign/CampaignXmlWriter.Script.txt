#Include "TextLib" as TextLib

Text PlaylistBasicGameModeText()
{
	return """	<gameinfos>
		<game_mode>2</game_mode>
		<chat_time>10000</chat_time>
		<finishtimeout>1</finishtimeout>
		<allwarmupduration>0</allwarmupduration>
		<disablerespawn>0</disablerespawn>
		<forceshowallopponents>0</forceshowallopponents>
		<script_name></script_name>
		<rounds_pointslimit>50</rounds_pointslimit>
		<rounds_usenewrules>0</rounds_usenewrules>
		<rounds_forcedlaps>0</rounds_forcedlaps>
		<rounds_pointslimitnewrules>5</rounds_pointslimitnewrules>
		<team_pointslimit>5</team_pointslimit>
		<team_maxpoints>6</team_maxpoints>
		<team_usenewrules>0</team_usenewrules>
		<team_pointslimitnewrules>5</team_pointslimitnewrules>
		<timeattack_limit>300000</timeattack_limit>
		<timeattack_synchstartperiod>0</timeattack_synchstartperiod>
		<laps_nblaps>5</laps_nblaps>
		<laps_timelimit>0</laps_timelimit>
		<cup_pointslimit>100</cup_pointslimit>
		<cup_roundsperchallenge>5</cup_roundsperchallenge>
		<cup_nbwinners>3</cup_nbwinners>
		<cup_warmupduration>2</cup_warmupduration>
	</gameinfos>

	<hotseat>
		<game_mode>0</game_mode>
		<time_limit>300000</time_limit>
		<rounds_count>5</rounds_count>
	</hotseat>

	<filter>
		<is_lan>1</is_lan>
		<is_internet>1</is_internet>
		<is_solo>0</is_solo>
		<is_hotseat>0</is_hotseat>
		<sort_index>1000</sort_index>
		<random_map_order>0</random_map_order>
	</filter>
""";
}

Text PlaylistMapContainer()
{
	return "	<startindex>0</startindex>";
}

Text Playlist(Text _Contained)
{
	return """<playlist>
{{{_Contained}}}
</playlist>""";
}

Text PlaylistMap(Text _Contained)
{
	return """	<map>
	{{{_Contained}}}
	</map>""";
}

Text PlaylistMapFileAndIdent(Text _File, Text _Ident)
{
	return """		<file>{{{_File}}}</file>
		<ident>{{{_Ident}}}</ident>""";
}

Text Intro()
{
	return """<?xml version="1.0"?>
<unlockcriteria id="1" name="semi-open"/>
<unlockcriteria id="2" name="progressive"/>
""";
}

Text PlaylistSerialize()
{
	return """{{{Intro()}}}
	{{{Playlist(PlaylistBasicGameModeText()
		^ PlaylistMapContainer()
		^ PlaylistMap(PlaylistMapFileAndIdent("MapFilePath", "MapIdent")))}}}
	""";
}

Text UnlockCriterias()
{
	return """	<unlockcriterias>
		<unlockcriteria id="1" name="semi-open"/>
		<unlockcriteria id="2" name="progressive"/>
	</unlockcriterias>""";
}

Text Campaign(Text _CampaignName, Text _Contained, Boolean _IsOnlyPublished, Text _SectionColor,
	Boolean _IsActive, Boolean _AllowEvaluate, Text _ContextName, Text _ScriptName)
{
	if (!_IsOnlyPublished) {
	return """<Solo activated="{{{_IsActive}}}" color="{{{_SectionColor}}}" logo="file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Solo.dds" allowevaluate="{{{_AllowEvaluate}}}" contextname="{{{_ContextName}}}" scriptname="{{{_ScriptName}}}">
<campaign type="{{{_CampaignName}}}">
{{{UnlockCriterias()}}}
	<categories>
{{{_Contained}}}
	</categories>
</campaign>
</Solo>""";
	}
	return """<Solo color="{{{_SectionColor}}}" logo="file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Solo.dds" allowevaluate="{{{_AllowEvaluate}}}" scriptname="{{{_ScriptName}}}">
{{{_Contained}}}
</Solo>""";
}

Text Category(Text _CategoryName, Text _Contained)
{
	return """	<category name="{{{_CategoryName}}}">
{{{_Contained}}}	</category>""";
}

Text Track(Text _MapPath, Text _MapName, Text _MapThumbnail, Text _UnlockCondSemiOpen, Text _UnlockCondProgressive, Boolean _IsOnlyPublished)
{
	if (!_IsOnlyPublished) {
	return """		<track>
			<path>{{{_MapPath}}}</path>
			<name>{{{_MapName}}}</name>
			<thumbnail>{{{_MapThumbnail}}}</thumbnail>
			<unlock id="1" {{{_UnlockCondSemiOpen}}}/>
			<unlock id="2" {{{_UnlockCondProgressive}}}/>
		</track>
""";
	}
	return """		<track {{{_UnlockCondSemiOpen}}}>
			<path>{{{_MapPath}}}</path>
			<name>{{{_MapName}}}</name>
			<thumbnail>{{{_MapThumbnail}}}</thumbnail>
		</track>
""";
}

Text UnlockCond(Integer _MedalNb, Text _MedalType)
{
	return "medalnb=\"" ^ _MedalNb ^ "\" medaltype=\"" ^ _MedalType ^ "\"";
}

Text Serialize(Text[] _Categories, Text[][] _MapsPerCategory, Text[Text][][] _MapMetadata, Text[Text][][] _UnlockConditions,
	Integer[][Text][] _CardTypeGroups, Text _SectionColor, Boolean _IsActive, Text _CampaignName,
	Boolean _IsOnlyPublished, Boolean _AllowEvaluate, Text _ContextName, Text _ScriptName)
{
	declare Text Result = "";
	declare Text Categories;
	declare Integer CategoryCount = 0;
	foreach(CategoryKey => CategoryName in _Categories)
	{
		declare Text Maps = "";
		declare Integer MapCount = 0;
		foreach(MapKey => Map in _MapsPerCategory[CategoryKey])
		{
			declare Text[Text] Metadata = _MapMetadata[CategoryKey][MapKey];
			declare Text Thumbnail;
			if (Map != "" && Metadata.existskey("Thumbnail")) {
				Thumbnail = Metadata["Thumbnail"];
			}
			declare Text MapNameForXML;
			if (Metadata.existskey("Name")) {
				MapNameForXML = Metadata["Name"];
			}

			declare Integer ObjectiveMedalNumber = TextLib::ToInteger(_UnlockConditions[CategoryKey][MapKey]["MedalNumber"]);

			if (_IsOnlyPublished)
			{
				for (IndexCardBeforeThis, 0, MapKey - 1) {
					if (_MapsPerCategory[CategoryKey][IndexCardBeforeThis] == "") {
						if ((IndexCardBeforeThis / 5) != (MapKey / 5)) {
							ObjectiveMedalNumber -= 1;
						}
					}
				}
				if (ObjectiveMedalNumber < 0) {
					ObjectiveMedalNumber = 0;
				}
			}

			if (_MapsPerCategory[CategoryKey][(MapKey / 5) * 5] != "" || !_IsOnlyPublished) {
				Maps ^= Track(Map, MapNameForXML, Thumbnail	,	"medalnb=\"" ^ ObjectiveMedalNumber ^ "\" medaltype=\"" ^ _UnlockConditions[CategoryKey][MapKey]["MedalType"] ^ "\""
											,	"medalnb=\"" ^ ObjectiveMedalNumber ^ "\" medaltype=\"" ^ _UnlockConditions[CategoryKey][MapKey]["MedalType"] ^ "\""
											,	_IsOnlyPublished);
				MapCount += 1;
			}
		}
		if (!_IsOnlyPublished || MapCount != 0) {
			Categories ^= Category(CategoryName, Maps);
			CategoryCount += 1;
		}
	}
	if (!_IsOnlyPublished || CategoryCount != 0) {
		Result ^= Campaign(_CampaignName, Categories, _IsOnlyPublished, _SectionColor, _IsActive, _AllowEvaluate, _ContextName, _ScriptName);
	}
	return Result;
}