#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"		as Manialink
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"				as Colors
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 		as Font
#Include "TextLib"											as TextLib

#Const C_CategoryCardPositions		[<-106.3, 52.5>, <-69.8, 52.5>, <-33.3, 52.5>, <3.2, 52.5>, <39.7, 52.5>]
#Const C_CategorySize				<36.5,	6.5>
#Const C_CategoryBigSize			<32.5,	6.5>
#Const C_CategoryMediumSize			<23.5,	2.>
#Const C_CategorySmallSize			<16.,	1.>

#Const C_MainDescriptions [	"White"		=> _("Beginner tracks."),
							"Green"		=> _("Easy tracks."),
							"Blue"		=> _("Intermediate tracks."),
							"Red"		=> _("Difficult tracks."),
							"Black"		=> _("Extreme tracks.")]
#Const C_Descriptions	[	"White"		=> _("To unlock a new line, players need bronze medals on all the maps of the line above."),
							"Green"		=> _("To unlock a new line, players need bronze medals on all the maps of the line above."),
							"Blue"		=> _("To unlock a new line, players need silver medals on all the maps of the line above."),
							"Red"		=> _("To unlock a new line, players need silver medals on all the maps of the line above."),
							"Black"		=> _("To unlock a new track, players need gold medals on all the maps of the campaign before this one.")]
#Const C_Categories		["White", "Green", "Blue", "Red", "Black"]
#Const C_SectionImage	"file://Media/MEDIABROWSER_HiddenResources/Maker/Images/Campaign/CampaignSectionTriangleEnd.dds"

Vec2[] GetCategoryCardPositions()
{
	return C_CategoryCardPositions;
}

Text GetML()
{

	declare Text	Img_Warning				= "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Warning.dds";
	declare Text	Img_Flag				= "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Solo/LittleFlag.dds";
	declare Text	Img_ConditionFlag		= "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Warning.dds";
	declare Text	SubFont					= Font::GetFontName("SubTitle");
	declare Text Result;
	Result = """
	<frame z-index="-4">

	<framemodel id="CategoryCard">
		<quad id="CategoryButton"		valign="bottom" size="{{{C_CategorySize.X}}} {{{C_CategorySize.Y}}}" scriptevents="1"/>
		<quad							valign="bottom" size="{{{C_CategoryBigSize.X}}} {{{C_CategoryBigSize.Y}}}" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
		<quad							valign="bottom" size="{{{C_CategoryBigSize.Y}}} {{{C_CategoryBigSize.Y}}}" pos="{{{C_CategoryBigSize.X}}} 0"
				image="{{{C_SectionImage}}}" colorize="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}" keepratio="fit"/>
		<quad id="CategoryColor"		valign="bottom" size="{{{C_CategorySmallSize.X}}} {{{C_CategorySmallSize.Y}}}" z-index="1" pos="0.5 0.5" bgcolor="000"/>
		<quad id="CategoryColorExtra"	valign="bottom" size="{{{C_CategorySmallSize.Y}}} {{{C_CategorySmallSize.Y}}}" pos="{{{C_CategorySmallSize.X + 0.5}}} 0.5"
				z-index="1" image="{{{C_SectionImage}}}" keepratio="fit" colorize="000"/>
		<frame id="WarningSign" pos="{{{C_CategorySize.X / 2.}}} 7.5" z-index="3" hidden="1">
			<quad size="2.4 7" halign="center" valign="center" z-index="1"	image="{{{Img_Warning}}}"  keepratio="fit"/>
		</frame>
	</framemodel>
	<frame id="CategoryButtons">
	""";

	// We add the cards corresponding to sections
	// White, Green, Blue, Red, Black
	foreach (CategoryIndex => CategoryPos in C_CategoryCardPositions)
	{
		Result ^= """
			<frameinstance id="CategoryCard{{{CategoryIndex}}}" modelid="CategoryCard" z-index="{{{5 - CategoryIndex}}}"
				pos="{{{CategoryPos.X}}} {{{CategoryPos.Y}}}"/>
		""";
	}
	Result ^= """
	</frame>
	<frame pos="-131.5 50.3">
		<frame pos="0 0">
			<quad id="FlagWhite" z-index="1" pos="2 -3" valign="center" size="5 5" image="{{{Img_Flag}}}" modulatecolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}"/>
			<quad id="ChooseWhite" valign="center" size="21.5 6" pos="1.5 -3" scriptevents="1"/>
			<quad id="UnderQuadWhite"	valign="center" size="21.5 6" pos="1.2 -3.3" z-index="-2" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<quad id="OverQuadWhite"	valign="center" size="21.5 6" pos="1.5 -3" opacity="0.3" bgcolor="000" hidden="1"/>
			<quad id="ColorQuadWhite" 	valign="center" size="21.5 6" pos="1.5 -3" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<label id="TextWhite" size="21 6" halign="right" valign="center" pos="21 -3" z-index="1" textprefix="$t" text="{{{_("White")}}}"	textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.5"/>
		</frame>
		<frame pos="0 -7">
			<quad id="FlagGreen" z-index="1" pos="2 -3" valign="center" size="5 5" image="{{{Img_Flag}}}" modulatecolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}"/>
			<quad id="ChooseGreen" valign="center" size="21.5 6" pos="1.5 -3" scriptevents="1"/>
			<quad id="UnderQuadGreen"	valign="center" size="21.5 6" pos="1.2 -3.3" z-index="-2" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<quad id="OverQuadGreen"	valign="center" size="21.5 6" pos="1.5 -3" opacity="0.3" bgcolor="000" hidden="1"/>
			<quad id="ColorQuadGreen" 	valign="center" size="21.5 6" pos="1.5 -3" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<label id="TextGreen" size="21 6" halign="right" valign="center" pos="21 -3" z-index="1" textprefix="$t" text="{{{_("Green")}}}"	textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.5"/>
		</frame>
		<frame pos="0 -14">
			<quad id="FlagBlue" z-index="1" pos="2 -3" valign="center" size="5 5" image="{{{Img_Flag}}}" modulatecolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}"/>
			<quad id="ChooseBlue" valign="center" size="21.5 6" pos="1.5 -3" scriptevents="1"/>
			<quad id="UnderQuadBlue"	valign="center" size="21.5 6" pos="1.2 -3.3" z-index="-2" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<quad id="OverQuadBlue"		valign="center" size="21.5 6" pos="1.5 -3" opacity="0.3" bgcolor="000" hidden="1"/>
			<quad id="ColorQuadBlue" 	valign="center" size="21.5 6" pos="1.5 -3" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<label id="TextBlue" size="21 6" halign="right" valign="center" pos="21 -3" z-index="1" textprefix="$t" text="{{{_("Blue")}}}"	textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.5"/>
		</frame>
		<frame pos="0 -21">
			<quad id="FlagRed" z-index="1" pos="2 -3" valign="center" size="5 5" image="{{{Img_Flag}}}" modulatecolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}"/>
			<quad id="ChooseRed" valign="center" size="21.5 6" pos="1.5 -3" scriptevents="1"/>
			<quad id="UnderQuadRed"		valign="center" size="21.5 6" pos="1.2 -3.3" z-index="-2" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<quad id="OverQuadRed"		valign="center" size="21.5 6" pos="1.5 -3" opacity="0.3" bgcolor="000" hidden="1"/>
			<quad id="ColorQuadRed" 	valign="center" size="21.5 6" pos="1.5 -3" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<label id="TextRed" size="21 6" halign="right" valign="center" pos="21 -3" z-index="1" textprefix="$t" text="{{{_("Red")}}}"	textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.5"/>
		</frame>
		<frame pos="0 -28">
			<quad id="FlagBlack" z-index="1" pos="2 -3" valign="center" size="5 5" image="{{{Img_Flag}}}" modulatecolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}"/>
			<quad id="ChooseBlack" valign="center" size="21.5 6" pos="1.5 -3" scriptevents="1"/>
			<quad id="UnderQuadBlack"	valign="center" size="21.5 6" pos="1.2 -3.3" z-index="-2" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<quad id="OverQuadBlack"	valign="center" size="21.5 6" pos="1.5 -3" opacity="0.3" bgcolor="000" hidden="1"/>
			<quad id="ColorQuadBlack" 	valign="center" size="21.5 6" pos="1.5 -3" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}"/>
			<label id="TextBlack" size="21 6" halign="right" valign="center" pos="21 -3" z-index="1" textprefix="$t" text="{{{_("Black")}}}"	textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}" textsize="1.5"/>
		</frame>
	</frame>
	<quad id="CategoryColorOutlineTop"			pos="-108.5 52.5"	size="209.6 0.4"	bgcolor="000"/>
	<quad id="CategoryColorOutlineTopExtra"		pos="91.1 52.9"		size="10 0.4"		bgcolor="000"/>
	<quad id="CategoryColorOutlineLeft"			pos="-108.5 52.1"	size="0.4 95.2"		bgcolor="000"/>
	<quad id="CategoryShadowOutlineTop"			pos="-108.5 52.5"	size="209.6 0.6"	bgcolor="000" opacity="0.1"/>
	<quad id="CategoryShadowOutlineLeft"		pos="-108.5 52.1"	size="0.6 95.2"		bgcolor="000" opacity="0.1"/>
	<frame id="FrameConditions" pos="-149.5 14">
		<quad id="ConditionFlag" halign="center" valign="center" size="5.5 5.5" pos ="5 -4" image="{{{Img_ConditionFlag}}}" keepratio="Fit" opacity="0.7" colorize="aaa"/>
		<quad size="41 33.88" z-index="-1" bgcolor="FFF" opacity="0.4"/>
		<label halign="left" valign="center" size="24 4" pos="10 -4" textprefix="$t" text="{{{//L16N Noun, plural, necessary achievements to advance further in the game
			_("Conditions")
			}}}" textsize="1.5" textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Dark()}}}"/>
		<label id="DescriptionTextLabel" halign="left" valign="top" size="27 10" pos="10 -8" text="Lorem Ipsum." textsize="0.5" textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Dark()}}}" autonewline="1"/>
		<label id="ConditionsTextLabel" halign="left" valign="top" size="27 20" pos="10 -16" text="Lorem Ipsum dolor sit amet, consectetur adipiscing elit." textsize="0.5" textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_TextLabel_Dark()}}}" autonewline="1"/>
	</frame>
	</frame>
	""";
	return Result;
}

Text Build()
{
	declare Text[Text] C_CategoryColors =	[	"White"		=> TextLib::ColorToText(Colors::GetDifficultyColor(1)),
							"Green"		=> TextLib::ColorToText(Colors::GetDifficultyColor(2)),
							"Blue"		=> TextLib::ColorToText(Colors::GetDifficultyColor(3)),
							"Red"		=> TextLib::ColorToText(Colors::GetDifficultyColor(4)),
							"Black"		=> TextLib::ColorToText(Colors::GetDifficultyColor(5))];
	declare Text[Text] C_ConditionColors =	[	"White"		=> "809297",
							"Green"		=> "4C9945",
							"Blue"		=> "0088FF",
							"Red"		=> "FF5350",
							"Black"		=> "000"];
	return """<manialink version="3" name="L_CampaignCategories">
	{{{GetML()}}}
	<script><!--
	{{{Manialink::GetIncludes()}}}
	#Include "TextLib" as CampaignCategories_TextLib
	#Const C_CategoryColors	{{{dump(C_CategoryColors)}}}
	#Const C_ConditionColors {{{dump(C_ConditionColors)}}}
	#Const C_Categories		{{{dump(C_Categories)}}}
	#Const C_MainDescriptions {{{dump(C_MainDescriptions)}}}
	#Const C_Descriptions	{{{dump(C_Descriptions)}}}
	declare Integer			G_CurrentCategory;
	declare CMlFrame[]		G_CategoryFrames;
	declare Text[]			G_Categories;
	declare CMlQuad[]		G_CategoryColorOutlines;
	declare CMlQuad[Text]	G_ColorQuads;
	declare CMlQuad[Text]	G_UnderQuads;
	declare CMlQuad[Text]	G_OverQuads;
	declare CMlControl[]	G_WarningQuads;
	declare Integer[]		G_WarningCategories;
	{{{Manialink::Load()}}}

	Void UpdateCategories()
	{
		foreach (ButtonIndex => CategoryFrame in G_CategoryFrames) {
			if (G_Categories.existskey(ButtonIndex)) {
				CategoryFrame.Show();
				CategoryFrame.ZIndex = 5. - ButtonIndex;
				declare CMlQuad CategoryColor		<=> (CategoryFrame.GetFirstChild("CategoryColor") as CMlQuad);
				declare CMlQuad CategoryColorExtra	<=> (CategoryFrame.GetFirstChild("CategoryColorExtra") as CMlQuad);
				declare Text CategoryType = G_Categories[ButtonIndex];
				declare Color = CampaignCategories_TextLib::ToColor(C_CategoryColors[CategoryType]);
				CategoryColor.BgColor		= Color;
				CategoryColorExtra.Colorize	= Color;
				LibManialink_AnimStop(CategoryColor);
				LibManialink_AnimStop(CategoryColorExtra);
				if (ButtonIndex == G_CurrentCategory) {
					CategoryFrame.ZIndex = 6.;
					foreach(Quad in G_CategoryColorOutlines) {
						Quad.BgColor = Color;
					}
					declare CMlLabel TextWhite		<=> (Page.GetFirstChild("TextWhite") as CMlLabel);
					declare CMlQuad FlagWhite		<=> (Page.GetFirstChild("FlagWhite") as CMlQuad);
					declare CMlQuad ConditionFlag	<=> (Page.GetFirstChild("ConditionFlag") as CMlQuad);
					foreach (ColorQuadCategory => ColorQuad in G_ColorQuads) {
						if (ColorQuadCategory == CategoryType) {
							ColorQuad.BgColor = Color;
							if (CategoryType == "White") {
								TextWhite.TextColor		= CampaignCategories_TextLib::ToColor("{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}");
								FlagWhite.ModulateColor	= CampaignCategories_TextLib::ToColor("{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}");
								G_UnderQuads[ColorQuadCategory].Show();
							} else {
								TextWhite.TextColor		= CampaignCategories_TextLib::ToColor("{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}");
								FlagWhite.ModulateColor	= CampaignCategories_TextLib::ToColor("{{{DesignManialinks::GetColorCode_TextLabel_Normal()}}}");
								G_UnderQuads[ColorQuadCategory].Hide();
							}
							//ConditionFlag.Colorize = <1.0,1.0,1.0>;
							declare CMlLabel DescriptionTextLabel <=> (Page.GetFirstChild("DescriptionTextLabel") as CMlLabel);
							DescriptionTextLabel.SetText(C_MainDescriptions[CategoryType]);
							declare CMlLabel ConditionsTextLabel <=> (Page.GetFirstChild("ConditionsTextLabel") as CMlLabel);
							ConditionsTextLabel.SetText(C_Descriptions[CategoryType]);
							G_OverQuads[ColorQuadCategory].Opacity = 0.;
						} else {
							ColorQuad.BgColor = CampaignCategories_TextLib::ToColor("{{{DesignManialinks::GetColorCode_ButtonOutline_Dark()}}}");
							G_OverQuads[ColorQuadCategory].Opacity = 0.3;
							G_UnderQuads[ColorQuadCategory].Hide();
						}
					}
					CategoryColor.Size = {{{<C_CategoryBigSize.X, C_CategoryBigSize.Y>}}};
					CategoryColor.RelativePosition_V3 = <0.2, -0.2>;
					CategoryColor.Opacity = 1.;
					CategoryColorExtra.Size = {{{<C_CategoryBigSize.Y, C_CategoryBigSize.Y>}}};
					CategoryColorExtra.RelativePosition_V3 = <{{{C_CategoryBigSize.X + 0.2}}}, -0.2>;
					CategoryColorExtra.Opacity = 1.;
				} else {
					CategoryColor.Size = {{{<C_CategorySmallSize.X, C_CategorySmallSize.Y>}}};
					CategoryColor.RelativePosition_V3 = <0.5, 0.5>;
					CategoryColor.Opacity = 0.9;
					CategoryColorExtra.Size = {{{<C_CategorySmallSize.Y, C_CategorySmallSize.Y>}}};
					CategoryColorExtra.RelativePosition_V3 = <{{{C_CategorySmallSize.X + 0.5}}}, 0.5>;
					CategoryColorExtra.Opacity = 0.9;
				}
			} else {
				CategoryFrame.Hide();
			}
			if (G_WarningCategories.exists(ButtonIndex)) {
				G_WarningQuads[ButtonIndex].Show();
			} else {
				G_WarningQuads[ButtonIndex].Hide();
			}
		}
	}

	Void Init()
	{
		declare CMlFrame	CategoryButtons			<=> (Page.GetFirstChild("CategoryButtons") as CMlFrame);
		foreach (ButtonIndex => CategoryButtonFrameAsControl in CategoryButtons.Controls) {
			declare CMlFrame CategoryButtonFrame	<=> (CategoryButtonFrameAsControl as CMlFrame);
			G_CategoryFrames.add(CategoryButtonFrame);
			declare CMlControl CategoryButton		<=> CategoryButtonFrame.GetFirstChild("CategoryButton");
			declare CMlControl WarningSign			<=> CategoryButtonFrame.GetFirstChild("WarningSign");
			G_WarningQuads.add(WarningSign);
			declare Integer CategoryIndex for CategoryButton;
			CategoryIndex = ButtonIndex;
		}
		G_CurrentCategory	= 0;
		G_Categories		= Text[];

		declare CMlQuad		CategoryColorOutlineLeft		<=> (Page.GetFirstChild("CategoryColorOutlineLeft")		as CMlQuad);
		declare CMlQuad		CategoryColorOutlineTop			<=> (Page.GetFirstChild("CategoryColorOutlineTop")		as CMlQuad);
		declare CMlQuad		CategoryColorOutlineTopExtra	<=> (Page.GetFirstChild("CategoryColorOutlineTopExtra")	as CMlQuad);
		G_CategoryColorOutlines = [CategoryColorOutlineLeft, CategoryColorOutlineTop, CategoryColorOutlineTopExtra];

		foreach (Category in C_Categories) {
			declare CMlQuad ColorQuad		<=> (Page.GetFirstChild("ColorQuad" ^ Category) as CMlQuad);
			G_ColorQuads[Category] = ColorQuad;
			declare CMlQuad OverQuad		<=> (Page.GetFirstChild("OverQuad" ^ Category) as CMlQuad);
			G_OverQuads[Category] = OverQuad;
			declare CMlQuad UnderQuad		<=> (Page.GetFirstChild("UnderQuad" ^ Category) as CMlQuad);
			G_UnderQuads[Category] = UnderQuad;
		}
		G_WarningCategories = Integer[];
	}

	main()
	{
		Init();
		while (True) {
			yield;
			LibManialink_AnimLoop();
			foreach(Event in PendingEvents) {
				switch (Event.Type) {
					case CMlEvent::Type::MouseClick: {
						switch (Event.ControlId) {
							case "ChooseWhite" : {
								SendCustomEvent("Campaign_ChangeCategory", ["White"]);
							}
							case "ChooseGreen" : {
								SendCustomEvent("Campaign_ChangeCategory", ["Green"]);
							}
							case "ChooseBlue" : {
								SendCustomEvent("Campaign_ChangeCategory", ["Blue"]);
							}
							case "ChooseRed" : {
								SendCustomEvent("Campaign_ChangeCategory", ["Red"]);
							}
							case "ChooseBlack" : {
								SendCustomEvent("Campaign_ChangeCategory", ["Black"]);
							}
							case "CategoryButton" : {
								declare Integer CategoryIndex for Event.Control;
								G_CurrentCategory = CategoryIndex;
								UpdateCategories();
								SendCustomEvent("Campaign_SwitchCategory", [CampaignCategories_TextLib::ToText(CategoryIndex)]);
							}
						}
					}
					case CMlEvent::Type::MouseOver: {
						switch (Event.ControlId) {
							case "ChooseWhite" : {
								Page.GetFirstChild("OverQuadWhite").Show();
							}
							case "ChooseGreen" : {
								Page.GetFirstChild("OverQuadGreen").Show();
							}
							case "ChooseBlue" : {
								Page.GetFirstChild("OverQuadBlue").Show();
							}
							case "ChooseRed" : {
								Page.GetFirstChild("OverQuadRed").Show();
							}
							case "ChooseBlack" : {
								Page.GetFirstChild("OverQuadBlack").Show();
							}
							case "CategoryButton" : {
								declare Integer CategoryIndex for Event.Control;
								if (G_CurrentCategory == CategoryIndex) {
									continue;
								}
								declare CMlQuad CategoryColor <=> (G_CategoryFrames[CategoryIndex].GetFirstChild("CategoryColor") as CMlQuad);
								declare CMlQuad CategoryColorExtra <=> (G_CategoryFrames[CategoryIndex].GetFirstChild("CategoryColorExtra") as CMlQuad);
								LibManialink_AnimStop(CategoryColor);
								LibManialink_AnimStop(CategoryColorExtra);
								LibManialink_SetTargetSize(CategoryColorExtra, {{{<C_CategoryMediumSize.Y, C_CategoryMediumSize.Y>}}});
								LibManialink_SetTargetPosition(CategoryColorExtra, <{{{C_CategoryMediumSize.X + 0.5}}}, 0.5>);
								LibManialink_SetTargetSize(CategoryColor, {{{<C_CategoryMediumSize.X, C_CategoryMediumSize.Y>}}});
								LibManialink_PresetAnim(CategoryColor, 70, "EaseOutQuad");
								LibManialink_PresetAnim(CategoryColorExtra, 70, "EaseOutQuad");
							}
						}
					}
					case CMlEvent::Type::MouseOut: {
						switch (Event.ControlId) {
							case "ChooseWhite" : {
								Page.GetFirstChild("OverQuadWhite").Hide();
							}
							case "ChooseGreen" : {
								Page.GetFirstChild("OverQuadGreen").Hide();
							}
							case "ChooseBlue" : {
								Page.GetFirstChild("OverQuadBlue").Hide();
							}
							case "ChooseRed" : {
								Page.GetFirstChild("OverQuadRed").Hide();
							}
							case "ChooseBlack" : {
								Page.GetFirstChild("OverQuadBlack").Hide();
							}
							case "CategoryButton" : {
								declare Integer CategoryIndex for Event.Control;
								if (G_CurrentCategory == CategoryIndex) {
									continue;
								}
								declare CMlQuad CategoryColor <=> (G_CategoryFrames[CategoryIndex].GetFirstChild("CategoryColor") as CMlQuad);
								declare CMlQuad CategoryColorExtra <=> (G_CategoryFrames[CategoryIndex].GetFirstChild("CategoryColorExtra") as CMlQuad);
								LibManialink_AnimStop(CategoryColor);
								LibManialink_AnimStop(CategoryColorExtra);
								LibManialink_SetTargetSize(CategoryColorExtra, {{{<C_CategorySmallSize.Y, C_CategorySmallSize.Y>}}});
								LibManialink_SetTargetPosition(CategoryColorExtra, <{{{C_CategorySmallSize.X + 0.5}}}, 0.5>);
								LibManialink_SetTargetSize(CategoryColor, {{{<C_CategorySmallSize.X, C_CategorySmallSize.Y>}}});
								LibManialink_PresetAnim(CategoryColor, 70, "EaseOutQuad");
								LibManialink_PresetAnim(CategoryColorExtra, 70, "EaseOutQuad");
							}
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch (Event.CustomEventType) {
							case "UpdateCategories": {
								declare Text[] Campaign_Categories for Page;
								G_Categories = Campaign_Categories;
								declare Integer[] Campaign_WarningCategories for Page;
								G_WarningCategories = Campaign_WarningCategories;
								UpdateCategories();
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>""";
}