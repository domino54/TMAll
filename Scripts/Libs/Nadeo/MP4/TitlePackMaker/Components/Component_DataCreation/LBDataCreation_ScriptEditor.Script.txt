#Include "TextLib"											as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks

#Const C_SizeMainButton              <79.5, 8.>
#Const C_SizeActivateButton          <8., 8.>
#Const C_SizeDefaultButton           <8., 8.>
#Const C_SelectorLargeur		0.4

#Const PosXFirstButton           -45.5
#Const PosYFirstButton           19.6
#Const SizeXButton               40.0
#Const SizeYButton               19.6
#Const MarginY_Button            0.7
#Const MarginX_Button            4.0
#Const C_Logo					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Editor.dds"

#Const C_IMG_Checkbox_Closed_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed_Over.dds"
#Const C_IMG_Checkbox_Closed	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed.dds"
#Const C_IMG_Checkbox_Open_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open_Over.dds"
#Const C_IMG_Checkbox_Open		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open.dds"
#Const C_ImgBase				"file://Media/MEDIABROWSER_HiddenResources/"

#Const C_Helper				_("Script")

Text Build() {
	declare Text IMG_Arrow  = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/Arrow.dds";
	declare Text IMG_Delete = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCrossOver.dds";
	declare Text SubFont    = Font::GetFontName("SubTitle");
	declare Text MainFont   = Font::GetFontName("Main");

	declare Text IMG_ConditionFlag			= C_ImgBase ^ "Common/Images/Menus/Buttons/Warning.dds";
	declare Text HelperExplanation			=  TextLib::Compose(_("Once ingame, press $<$i$o%1$> to open the script editor"), _("Scroll Lock"));

	declare Integer Count_InstancesButtonY = 2;
	declare Integer Count_InstancesButtonX = 1;

	DesignManialinks::Init();
	declare Text MLText = """
<manialink version="3" name="L_DataCreation_ScriptEditor">
	<framemodel id="Frame_Button">
		<frame id="Frame_MainButton">
			<label id="Label_Button" halign="left" valign="center" pos="-21.5 0" z-index="1"  textsize="2.3" textfont="{{{SubFont}}}" text="" textcolor="fff"/>
			<quad id="Quad_Button" halign="left"   valign="center" size="{{{C_SizeMainButton.X}}} {{{C_SizeMainButton.Y}}}" pos="-24.7 -0.5" z-index="1" opacity="0.2" bgcolor="000" scriptevents="1"/>
			<frame id="Frame_ButtonInfo" >
				<quad id="Quad_Arrow" halign="left"   valign="center" size="3.5 3.5" pos="5.8 -0.5" z-index="1" opacity="0.5" image="{{{IMG_Arrow}}}" keepratio="Fit"/>
				<quad id="Quad_Line1" halign="center" valign="center" size="0.2 {{{C_SizeMainButton.Y-2.5}}}" pos="9.3 -0.5" z-index="1" opacity="0.5" bgcolor="fff"/>
				<quad id="Quad_Line2" halign="left" valign="center" size="42. 0.2" pos="11.0 -3.1" z-index="1" opacity="0.5" bgcolor="fff"/>
				<label id="Label_ButtonDetail" halign="left" valign="center" pos="11.5 -0.5" textsize="1.5" size="{{{C_SizeMainButton.X-4.5}}}" textfont="{{{SubFont}}}" text="" textcolor="fff"/>
			</frame>

			<frame id="Frame_Selector" pos="15.0 -0.5" hidden="1">
				<quad id="C_Down"   halign="center" valign="center" pos="0 {{{-C_SizeMainButton.Y/2.}}}" size="{{{C_SizeMainButton.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				<quad id="C_Up"     halign="center" valign="center" pos="0 {{{C_SizeMainButton.Y/2.}}}"  size="{{{C_SizeMainButton.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				<quad id="C_Right"  halign="left" valign="center" pos="{{{C_SizeMainButton.X/2.-C_SelectorLargeur}}} 0"  size="{{{C_SelectorLargeur}}} {{{C_SizeMainButton.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				<quad id="C_Left"   halign="right" valign="center" pos="{{{-C_SizeMainButton.X/2.+C_SelectorLargeur}}} 0" size="{{{C_SelectorLargeur}}} {{{C_SizeMainButton.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			</frame>
		</frame>

	</framemodel>
	

	<frame id="Frame_All">
		<quad id="Quad_BG" halign="center" valign="center" size="145.5 54.8" pos="-9.8 1.2" opacity="0.7" z-index="-5" bgcolor="333"/>
		<label id="Label_Button" halign="center" valign="center" pos="-60.5 45" z-index="1" textsize="2.3" textfont="{{{SubFont}}}" text="" textcolor="fff"/>
		<frame id="Frame_Title" pos="0 70">
			<quad id="Quad_Title" valign="center" halign="center" size="16 16" pos="-87 -1.5" z-index="3" keepratio="fit" colorize="{{{DesignManialinks::GetColorCode_Overall()}}}" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" image="{{{C_Logo}}}"/>
			<label id="Label_Title" valign="center" size="160 10" pos="-75 0" textfont="{{{MainFont}}}" z-index="2" textsize="9" textprefix="$t" text="{{{_("Game Mode Editor")}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" halign="left"/>
			<quad id="Quad_Black" halign="center" valign="top" size="151.65 0.2" pos="0.825 -8" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
			<quad id="Quad_Black" halign="left" valign="bottom" size="32 0.8" pos="-75 -8" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
		</frame>
	""";
	for(I,0,Count_InstancesButtonY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstButton - IndexY*C_SizeMainButton.Y - IndexY*MarginY_Button*1.-2.5;
		for(J,0,Count_InstancesButtonX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosX = PosXFirstButton + IndexX*C_SizeMainButton.X + IndexX*MarginX_Button*1.-4.5;
			MLText^="""
				<frameinstance modelid="Frame_Button" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Button{{{I}}}{{{J}}}" hidden="0"/>
			""";
		}
	}

	declare Vec2	MainActionPosition		= <16.3, -7.2>;
	declare Vec2	SecondActionPosition		= <-30.3, MainActionPosition.Y>;
	MLText^="""
		{{{DesignManialinks::ManialinkMainButtonLarge(MainActionPosition, _("Launch"), "", "MainAction")}}}
		{{{DesignManialinks::ManialinkSecondaryButtonLarge(SecondActionPosition, _("Documentation"), "", "", "SecondAction")}}}

		<frame id="FrameConditions" pos="-125.7 -5.2">
			<quad id="ConditionFlag" halign="center" valign="center" size="5.5 5.5" pos ="5 -4" image="{{{IMG_ConditionFlag}}}" keepratio="Fit" opacity="0.7" colorize="aaa"/>
			<quad size="41 21" z-index="-1" bgcolor="FFF" opacity="0.4"/>
			<quad size="41 21" z-index="-1" opacity="0" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
			<label id="ConditionsTextTitle" halign="left" valign="center" size="24 4" pos="10 -4" textprefix="$t" text="{{{C_Helper}}}" textsize="1.5" textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
			<label id="ConditionsTextLabel" halign="left" valign="top" size="34 23" pos="7 -8" text="{{{HelperExplanation}}}" textsize="1.0" textfont="{{{SubFont}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" autonewline="1"/>
		</frame>

	</frame>

	<script><!--
	#Include "TextLib" as DataCreation_ScriptEditor
	{{{DesignManialinks::Includes()}}}

	#Const C_ButtonName		[_("Mode Script"), _("Test Map")]

	declare Boolean[] G_IsCustomisable;
	declare Text G_Info_Map;
	declare Text G_Info_Script;
	{{{DesignManialinks::Declares()}}}

	Void GetInfosButtons()
	{

	}

	Void UpdateButtonInfos()
	{
		declare Text[] Page_CustomName  for Page;
		

		declare Text[] ButtonDetail = [""^G_Info_Script, ""^G_Info_Map];

		declare Real MaxLabelWidth = 75.4;
		for(I, 0, {{{Count_InstancesButtonY - 1}}})
		{
			declare CMlFrame Frames_Button         <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I^"0") as CMlFrame);
			declare CMlFrame Frame_Selector        <=> (Frames_Button.GetFirstChild("Frame_Selector")	  as CMlFrame);
			declare CMlLabel Label_ButtonDetail    <=> (Frames_Button.GetFirstChild("Label_ButtonDetail")	  as CMlLabel);
			declare CMlLabel Label_Button          <=> (Frames_Button.GetFirstChild("Label_Button")	  as CMlLabel);
			declare CMlQuad  Quad_Button           <=> (Frames_Button.GetFirstChild("Quad_Button")	      as CMlQuad);
			declare CMlQuad  Quad_Line1            <=> (Frames_Button.GetFirstChild("Quad_Line1")	      as CMlQuad);
			declare CMlQuad  Quad_Arrow            <=> (Frames_Button.GetFirstChild("Quad_Arrow")	      as CMlQuad);
			declare CMlFrame Frame_ButtonInfo      <=> (Frames_Button.GetFirstChild("Frame_ButtonInfo")	  as CMlFrame);
			declare CMlQuad  Quad_Right            <=> (Frame_Selector.GetFirstChild("C_Right")	          as CMlQuad);
			declare CMlQuad  Quad_Up               <=> (Frame_Selector.GetFirstChild("C_Up")	          as CMlQuad);
			declare CMlQuad  Quad_Down             <=> (Frame_Selector.GetFirstChild("C_Down")	          as CMlQuad);
			declare CMlQuad  Quad_Line2            <=> (Frames_Button.GetFirstChild("Quad_Line2")	      as CMlQuad);
			Quad_Button.Size.X             = MaxLabelWidth+37.0;
			Quad_Right.RelativePosition_V3.X = MaxLabelWidth-2.9;
			Quad_Up.Size.X                = MaxLabelWidth+37.;
			Quad_Up.RelativePosition_V3.X    = MaxLabelWidth-2.7-(Quad_Up.Size.X/2.);
			Quad_Down.Size.X              = MaxLabelWidth+37.;
			Quad_Down.RelativePosition_V3.X  = MaxLabelWidth-2.7-(Quad_Down.Size.X/2.);
			Quad_Line2.Size.X             = MaxLabelWidth;
			//Frame_Selector

			Label_Button.Opacity         = 1.0;
			Label_Button.TextColor       = <1., 1., 1.>;
			Label_ButtonDetail.Opacity   = 1.0;
			Label_ButtonDetail.TextColor = <1., 1., 1.>;
			Quad_Arrow.ModulateColor = <1., 1., 1.>;
			Quad_Line1.BgColor = <1., 1., 1.>;
			Quad_Line2.BgColor = <1., 1., 1.>;
		
			
			if(G_IsCustomisable[I])
			{
				Frame_ButtonInfo.Show();
			}
			else
			{
				Quad_Button.Opacity = 0.05;
				Frame_ButtonInfo.Hide();
			}


			if(ButtonDetail.existskey(I))
			{
				Label_ButtonDetail.SetText(ButtonDetail[I]);
			}
			else
			{
				Label_ButtonDetail.SetText("");
			}
			
		}

		if(ButtonDetail[0] != "" && ButtonDetail[1] != "")
		{
			DesignManialinks_MainButton_Activate("MainAction");
		}
		else
		{
			DesignManialinks_MainButton_Deactivate("MainAction");
		}
	}

	Void ShowPage()
	{
		//GetInfosButtons();
		SendCustomEvent("SendInfosButtons", [""]);
		UpdateButtonInfos();
		EnableMenuNavigation(True,False,Null,1);
	}

	Void Init() {
		
		G_IsCustomisable = [True, True];
		for(I, 0, {{{Count_InstancesButtonY - 1}}})
		{
			declare CMlFrame Frames_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I^"0")	as CMlFrame);
			declare CMlQuad  Quad_Button         <=> (Frames_Button.GetFirstChild("Quad_Button")	as CMlQuad);
			declare CMlLabel Label_Button        <=> (Frames_Button.GetFirstChild("Label_Button")	as CMlLabel);
			declare Integer QuadId as Quad_ButtonId         for Quad_Button;
			Label_Button.SetText(C_ButtonName[I]);
			Quad_ButtonId         = I;
		}


	}

	main() {
		Init();
		ShowPage();
		while(True) {

			yield;
			if(! PageIsVisible) continue;
			DesignManialinks_Loop();
			
			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								SendCustomEvent("GotoPrevious", [""]);
							}
						}
					}
					case CMlEvent::Type::MouseClick: {
						declare EventId = Event.ControlId;
						if (EventId == "Quad_Button") {
							declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
							Frame_Selector.Hide();
							declare Integer QuadId for Event.Control;
							SendCustomEvent("ScriptEditor_Select"^QuadId, [""]);
						}
						else if (EventId == "MainAction")
						{
							SendCustomEvent("ScriptEditor_Launch", [""^G_Info_Script,""^G_Info_Map]);
						}
						else if (EventId == "SecondAction")
						{
							SendCustomEvent("ScriptEditor_Documentation", [""]);
						}
					}
					case CMlEvent::Type::MouseOver: {
						declare EventId = Event.ControlId;
						if (EventId == "Quad_Active") {

						}
						else if	(EventId == "Quad_Button") {
							declare Integer QuadId for Event.Control;
							declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
							Frame_Selector.Show();
						}
					}
					case CMlEvent::Type::MouseOut: {
						declare EventId = Event.ControlId;
						if (EventId == "Quad_Button") {
							declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
							Frame_Selector.Hide();
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch(Event.CustomEventType) {
							case "Show" : {
								ShowPage();
								//SendCustomEvent("UpdateBarreSection", ["DataCreation_ScriptEditor"]);
								SendCustomEvent("TaskBar_UpdateTitleAndLogo", [DataCreation_ScriptEditor::ToText(False)]);
							}
							case "Back" : {
								SendCustomEvent("GotoPrevious", Text[]); // TODO : Lié au hack constaté dans LocalPlayController
							}
							case "Hide" : {
								EnableMenuNavigation(False,False,Null,0);
								SendCustomEvent("DetachPage", ["DataCreation_ScriptEditor"]);
							}
							case "UpdateMap" : {
								declare Text MapPath = Event.CustomEventData[0];
								G_Info_Map = MapPath;
								UpdateButtonInfos();
							}
							case "UpdateScript" : {
								declare Text ScriptPath = Event.CustomEventData[0];
								G_Info_Script = ScriptPath;
								UpdateButtonInfos();
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>	""";
	
	return MLText;
}