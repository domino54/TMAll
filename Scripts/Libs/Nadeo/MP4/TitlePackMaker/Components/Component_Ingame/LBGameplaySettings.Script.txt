#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"									as Manialink

#Include "Libs/Nadeo/MP4/TitlePackMaker/Components/Component_Style/Lib_LBStyle.Script.txt"	as Lib_LBStyle
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"				as Font

#Const C_ContextualMenuPosition_Open	[-23.1, -44.]
#Const C_ContextualMenuPosition_Closed	[-23.1, -90.]

#Const C_ImgBase "file://Media/Images/TitlePackMaker/Campaign/"

#Const Count_InstancesY				5
#Const Count_InstancesX				1
#Const PosXFirstQuad				-10.8
#Const PosYFirstQuad				-39.1
#Const SizeXQuad					40.0
#Const SizeYQuad					19.6
#Const MarginY_Button				1.2
#Const MarginX_Button				4.0

#Const Count_InstancesSettingsY    3
#Const Count_InstancesSettingsX    1
#Const PosXFirstSettings           -10.8
#Const PosYFirstSettings           -11.1
#Const SizeXSettings               40.0
#Const SizeYSettings               19.6
#Const MarginY_Settings            1.2
#Const MarginX_Settings            4.0

#Const C_SizeSettings              <9., 6.>

#Const C_SliderSize    				<50., 5.6>
#Const C_SliderPos     				<42.9, 0.>
#Const C_SelectorLargeur			0.6

Text Build()
{

	declare Vec2 LogoSizeButton      = <16.5, 16.4>;
	declare Vec2 VideoSizeButton     = <9., 9.>;
	declare Vec2 MusicSizeButton     = <9., 9.>;
	declare Vec2 PreviewSizeButton   = <9., 9.>;
	declare Vec2 QuadColorChoose     = <20., SizeYQuad>;
	declare Vec2 SizeQuad            = <9., 6.>;

	declare Vec2 G_Position          = <0., 0.>;
	declare Real G_Scale             = 1.;
	
	declare Text MainFont				= Font::GetFontName("Main");
	declare Text SubFont				= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_GameplaySettings">
	<framemodel id="Frame_Settings">
		<quad id="Quad_Settings" halign="left" valign="center" size="{{{C_SizeSettings.X}}} {{{C_SizeSettings.Y}}}" pos="1 0" z-index="1" opacity="0." bgcolor="000" scriptevents="1"/>

			<frame hidden="1">
				<entry id="Entry_Settings" pos="-5.5 0" halign="left" valign="center" size="7 6" class="text-entry" scriptevents="1" default="1."/>
			</frame>
				<label id="Label_Settings" halign="right" valign="center" pos="14.5 0" textsize="3" textfont="{{{SubFont}}}" text="Media" textcolor="fff"/>
				<label id="Label_SettingsDetail" halign="right" valign="center" pos="66. 0" textsize="3" z-index="2" textfont="{{{SubFont}}}" text="100%" textcolor="fff"/>
		<frame id="Frame_Slider" pos="{{{C_SliderPos.X}}} {{{C_SliderPos.Y}}}">
			<quad id="Quad_Slider"   bgcolor="333" halign="center" valign="center" opacity="1.0" z-index="1"  pos="0. 0." size="{{{C_SliderSize.X}}} {{{C_SliderSize.Y}}}" scriptevents="1" />
			<frame id="Frame_SliderSelector" z-index="2" pos="0. 0.">
				<quad id="Quad_Line"      halign="center" valign="center" pos="0 0" size="{{{C_SelectorLargeur}}} {{{C_SliderSize.Y}}}" z-index="1" opacity="1.0" bgcolor="fff"/>
			</frame>
		</frame>
	</framemodel>



	<frame z-index="2">
		<frame pos="-40 25">
			<quad id="Quad_BG" halign="center" valign="top" size="140 100" pos="27 29" opacity="0.7" z-index="-5" bgcolor="333"/>
			<label halign="center" valign="center" pos="27 20" textsize="8" textprefix="$t" textfont="{{{SubFont}}}" text="Gameplay Settings" textcolor="fff"/>
			<frame pos="-27 -3" id="Frame_Logo">
				<frame id="Frame_Arrow" pos="22 4.5" hidden="1">
					<quad id="Quad_Head" halign="center" valign="top" size="5. 0.5" pos="0 1" opacity="1." bgcolor="fff"/>
					<quad id="Quad_Line" halign="center" valign="top" size="0.5 11.0" pos="2.3 1" opacity="1." bgcolor="fff" rot="-45"/>
				</frame>

				<frame id="Frame_Button" pos="13.5 24.4">
					<frame id="GameLogoHighlight" pos="0 0" z-index="1" hidden="1">
						<quad pos="8.3 -8.3" z-index="1"  halign="center" valign="center" size="{{{LogoSizeButton.X+6}}} {{{LogoSizeButton.Y+6}}}" bgcolor="FFFA" style="Bgs1" substyle="BgGlow2" opacity="0.2"/>
						<quad pos="8.3 -8.3" z-index="1"  halign="center" valign="center" size="{{{LogoSizeButton.X+12}}} {{{LogoSizeButton.Y+12}}}" style="Bgs1" substyle="BgButtonShadow" opacity="0.8" colorize="FFF"/>
					</frame>
				</frame>
			</frame>
			<frame>
				<frame pos="{{{PosXFirstSettings-29.}}} {{{PosYFirstSettings+5.}}}">
					<label halign="left" valign="center" pos="0. 5." textsize="4" textprefix="$t" textfont="{{{SubFont}}}" text="Settings" textcolor="fff"/>
					<quad z-index="1"  halign="left" valign="top" size="130. 0.4" bgcolor="FFF" opacity="1."/>
					<quad z-index="1"  halign="left" valign="bottom" size="16.5 0.4" bgcolor="FFF" opacity="1."/>
					<label id="Label_OpenEditor" halign="center" valign="center" style="CardButtonMedium" pos="66.5 15" z-index="2" text="Open Editor" scriptevents="1"/>
				</frame>

			""";
	for(I,0,Count_InstancesSettingsY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstSettings - IndexY*C_SizeSettings.Y - IndexY*MarginY_Settings*1.;
		for(J,0,Count_InstancesSettingsX-1)
		{
			declare Real IndexX = J*1.;
			//declare Real PosX = PosXFirstSettings + IndexX*C_SizeSettings.X + IndexX*MarginX_Settings*1.;
			declare Real PosX = PosXFirstSettings;
			MLText^="""
				<frameinstance modelid="Frame_Settings" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Settings{{{I}}}" hidden="0"/>
			""";
		}
	}
	MLText^="""
			</frame>
		</frame>

		<quad id="Background" pos="-160 90" size="320 180" z-index="-5" scriptevents="1" bgcolor="090" opacity="0."/>
	</frame>

	<script><!--
		#Include "TextLib" as TextLib
		#Include "MathLib" as MathLib
		{{{Manialink::GetIncludes()}}}

		{{{Manialink::Load()}}}

		declare Integer G_SliderSelect;
		declare Text    G_LastSliderValue;
		declare Vec2[]  G_SliderMaxMin;
		declare Text[Integer]  G_SliderValue;

		Void Init() {
			
			G_SliderSelect = -1;
			G_SliderMaxMin = [<0.,100.>, <0.,100.>, <20.,100.>];
			declare Text[] MediaValuesName = ["Acceleration Coef", "Control Coef", "Gravity Coef"];
			declare Real MaxLabelWidth;
			for(I, 0, MediaValuesName.count - 1)
			{
				declare CMlLabel Label  <=> (Page.MainFrame.GetFirstChild("Label_Settings")	as CMlLabel);
				declare Real LabelWidth = Label.ComputeWidth(MediaValuesName[I], True);
				if(MaxLabelWidth < LabelWidth)
				{
					MaxLabelWidth = LabelWidth;	
				}
			}


			for(I, 0, {{{Count_InstancesSettingsY - 1}}})
			{
				declare CMlFrame Frame_Settings <=> (Page.MainFrame.GetFirstChild("Frame_Settings"^I)	as CMlFrame);
				declare CMlEntry Entry_Settings <=> (Frame_Settings.GetFirstChild("Entry_Settings")		as CMlEntry);
				declare CMlLabel Label_Settings <=> (Frame_Settings.GetFirstChild("Label_Settings")		as CMlLabel);
				declare CMlQuad Quad_Slider     <=> (Frame_Settings.GetFirstChild("Quad_Slider")		as CMlQuad);
				Label_Settings.SetText(MediaValuesName[I]);
				declare Integer QuadId for Entry_Settings;
				declare Integer Quad_SliderId for Quad_Slider;
				Entry_Settings.RelativePosition.X = MaxLabelWidth-18.;
				QuadId        = I;
				Quad_SliderId = I;
			}
		}


		Text[] GetEntries()
		{
			declare Text[] Entries;
			for(I, 0, {{{Count_InstancesSettingsY - 1}}})
			{
				if(G_SliderValue.existskey(I)) Entries.add(G_SliderValue[I]);
				else                           Entries.add("1.");
			}
			return Entries;
		}

		Void SetSliderByValue(Integer _Index, Real _Value)
		{
			declare CMlFrame Frame_Settings       <=> (Page.MainFrame.GetFirstChild("Frame_Settings"^_Index)	as CMlFrame);
			declare CMlLabel Label_SettingsDetail <=> (Frame_Settings.GetFirstChild("Label_SettingsDetail")	as CMlLabel);
			declare CMlFrame Frame_SliderSelector <=> (Frame_Settings.GetFirstChild("Frame_SliderSelector")	as CMlFrame);

			declare Real Value = _Value*100.;
			Frame_SliderSelector.RelativePosition.X = _Value* {{{C_SliderSize.X}}} - {{{C_SliderSize.X/2.}}} ;
			G_SliderValue[_Index] = _Value^"";

			Label_SettingsDetail.SetText(MathLib::NearestInteger(Value)^"%");
		}

		Void SetSlider(Real _PosX)
		{
			if(G_SliderSelect <= -1) return;
			declare CMlFrame Frame_Settings       <=> (Page.MainFrame.GetFirstChild("Frame_Settings"^G_SliderSelect)	as CMlFrame);
			declare CMlLabel Label_SettingsDetail <=> (Frame_Settings.GetFirstChild("Label_SettingsDetail")	as CMlLabel);
			declare CMlFrame Frame_SliderSelector <=> (Frame_Settings.GetFirstChild("Frame_SliderSelector")	as CMlFrame);
			Frame_SliderSelector.RelativePosition.X = _PosX;
			
			declare Real Ecart = G_SliderMaxMin[G_SliderSelect].Y - G_SliderMaxMin[G_SliderSelect].X;
			declare Real ConvertToPourc = G_SliderMaxMin[G_SliderSelect].X + (_PosX + {{{C_SliderSize.X/2.}}})/{{{C_SliderSize.X}}}*Ecart;
			Label_SettingsDetail.SetText(MathLib::NearestInteger(ConvertToPourc)^"%");
			G_LastSliderValue = TextLib::FormatReal(ConvertToPourc/100., 2, False, False);
			G_SliderValue[G_SliderSelect] = G_LastSliderValue;
		}

		Void UpdateEntries() {
			declare Real Page_AccCoef for Page;
			declare Real Page_ConCoef for Page;
			declare Real Page_GraCoef for Page;

			declare Real[] Values = [Page_AccCoef, Page_ConCoef, Page_GraCoef];
			for(I, 0, {{{Count_InstancesSettingsY - 1}}})
			{
				declare CMlFrame Frame_Settings <=> (Page.MainFrame.GetFirstChild("Frame_Settings"^I)	as CMlFrame);
				//declare CMlEntry Entry_Settings     <=> (Frame_Settings.GetFirstChild("Entry_Settings")	as CMlEntry);
				//Entry_Settings.Value = Values[I]^"";
				SetSliderByValue(I, Values[I]);
			}
		}

		main() {
			Init();
			declare Boolean PrevClickOnSlider;
			declare Boolean ClickOnSlider;

			while(True) {
				yield;
				LibManialink_AnimLoop();
				if (!PageIsVisible) {
					continue;
				}

				if(!MouseLeftButton)
				{
					ClickOnSlider = False;
				}

				if(PrevClickOnSlider != ClickOnSlider)
				{
					if(!ClickOnSlider)
					{
						SendCustomEvent("SetEntryValue", ["" ^ G_SliderSelect, ""^G_LastSliderValue]);
						G_SliderSelect = -1;
					}
					PrevClickOnSlider = ClickOnSlider;
				}
			
				declare Real MousePosX  = MouseX - {{{C_SliderPos.X}}} + {{{C_SliderSize.X}}}+1.;
				declare Real ColorSizeX = {{{C_SliderSize.X/2.}}};
				declare Boolean IsMouseOnColorPosX = MousePosX < ColorSizeX && 
													 MousePosX > -ColorSizeX;
				if(ClickOnSlider && IsMouseOnColorPosX)
				{
					//log("MousePosX["^MousePosX^"]");
					//log("ColorSizeX["^ColorSizeX^"]");
					SetSlider(MousePosX);
				}
				else if(ClickOnSlider && MousePosX > ColorSizeX)
				{
					SetSlider(ColorSizeX);
				}
				else if(ClickOnSlider && MousePosX < - ColorSizeX)
				{
					SetSlider(-ColorSizeX);
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::EntrySubmit: {
							if (Event.ControlId == "Entry_Settings")
							{
								declare CMlEntry Result <=> (Event.Control as CMlEntry);
								declare Integer QuadId for Event.Control;
								if(Result != Null)
								{
									SendCustomEvent("SetEntryValue", ["" ^ QuadId, Result.Value]);
								}
							}
						}

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Cancel : {
									//SendCustomEvent("StyleMusicStop", Text[]);
									SendCustomEvent("GotoPrevious", [""]);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							declare EventId = Event.ControlId;
							if (EventId == "Entry_Settings") {
								//declare Integer QuadId for Event.Control;
							}
							else if	(EventId == "Label_OpenEditor") {
								SendCustomEvent("LaunchEditorGP", GetEntries());
							}

							if (Event.ControlId == "Quad_Slider")
							{
								declare Integer Quad_SliderId for Event.Control;
								G_SliderSelect = Quad_SliderId;
								ClickOnSlider = True;
							}
							else
							{
								ClickOnSlider = False;
							}
						}
						case CMlEvent::Type::MouseOver: {
							declare EventId = Event.ControlId;
							if(EventId == "Quad_ColorBtn")
							{

							}
						}
						case CMlEvent::Type::MouseOut: {
							declare EventId = Event.ControlId;
							
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.CustomEventType) {
								case "Back" : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case "Show" : {
									EnableMenuNavigation(True,False,Null,2);
									SendCustomEvent("GetEntryValue", ["GameplaySettings"]);
								}
								case "Hide" : {
									EnableMenuNavigation(True,False,Null,0);
									SendCustomEvent("DetachPage", ["GameplaySettings"]);
								}
								case "UpdateEntries" : {
									UpdateEntries();
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}