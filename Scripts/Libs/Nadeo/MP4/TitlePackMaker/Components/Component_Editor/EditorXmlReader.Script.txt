#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"			as Logger
#Include "TextLib"										as TextLib
#Include "Libs/Nadeo/MP4/Common/GlobalVariables.Script.txt"	as GlobalVariables

#Const C_BaseFileTM		"file://Media/MEDIABROWSER_HiddenResources/MakerTM/XML/EditorXMLs/BaseEditors.xml"
#Const C_BaseFileSM		"file://Media/MEDIABROWSER_HiddenResources/MakerSM/XML/EditorXMLs/BaseEditors.xml"

#Const C_IdsToNames [
"NewMap" => _("Map Editor"),
"EditReplay" => _("Replay Editor"),
"PaintCar" => _("Car Painter"),
"TitleTools" => _("Title Tools")]

declare Text		G_MapEditorScript;
declare Boolean		G_IsActive;
declare Text		G_Color;
declare Text[]		G_BaseIds;
declare Text[]		G_BaseTitleNames;
declare Text[]		G_BaseMakerNames;
declare Text[]		G_UGCAssets;
declare Boolean[]	G_IsVisibleInMaker;
declare Boolean[]	G_IsActivated;

Void ReadBase(Text _XML)
{
	G_BaseIds.clear();
	G_BaseTitleNames.clear();
	G_BaseMakerNames.clear();
	G_IsVisibleInMaker.clear();
	G_IsActivated.clear();
	G_UGCAssets.clear();
	if (_XML == "") {
		return;
	}
	declare Document				<=> Xml.Create(_XML);
	declare Editors					<=> Document.Root;
	foreach(Editor in Editors.Children) {
		if (Editor.GetAttributeBoolean("isdefault", False)) {
			declare Text AssetId = Editor.GetAttributeText("id", "");
			G_BaseIds.add(AssetId);
			G_BaseTitleNames.add(Editor.GetAttributeText("titlename", ""));
			if (C_IdsToNames.existskey(AssetId)) {
				G_BaseMakerNames.add(C_IdsToNames[AssetId]);
			} else {
				G_BaseMakerNames.add(Editor.GetAttributeText("makername", ""));
			}
			G_IsVisibleInMaker.add(Editor.GetAttributeBoolean("isvisibleinmaker", True));
			G_IsActivated.add(Editor.GetAttributeBoolean("isactivated", True));
		} else {
			G_UGCAssets.add(Editor.GetAttributeText("id", ""));
		}
	}
	Xml.Destroy(Document);
}

Void ReadBase()
{
	declare Text[Integer] BaseFiles = [GlobalVariables::LaunchContext_Maker() => C_BaseFileTM,
										GlobalVariables::LaunchContext_MakerSM() => C_BaseFileSM];
	declare Text BaseFile = BaseFiles[GlobalVariables::GetLaunchContext()];
	declare GetRequest				<=> Http.CreateGet(BaseFile);
	wait(GetRequest.IsCompleted);
	if (GetRequest.StatusCode != 200)
	{
		Logger::Warn("EditorXmlReader : le fichier n'a pas été trouvé");
		return;
	}
	ReadBase(GetRequest.Result);
	Http.Destroy(GetRequest);
}

Void AnalyzeXML(Text _XML)
{
	if (_XML == "")
	{
		return;
	}
	declare Document				<=> Xml.Create(_XML);
	declare Editor					<=> Document.Root;

	if (Editor == Null)
	{
		Logger::Warn("Texte mal formaté : balise Editor non trouvée");
		Xml.Destroy(Document);
		return;
	}
	G_Color				= Editor.GetAttributeText("color", "C39");
	G_IsActive			= Editor.GetAttributeBoolean("activated", True);
	G_MapEditorScript	= Editor.GetAttributeText("mapeditor", "");
	ReadBase(Document.TextContents);
	Xml.Destroy(Document);
}

Text GetColor()
{
	return G_Color;
}

Boolean IsActive()
{
	return G_IsActive;
}

Text[] GetBaseIds()
{
	return G_BaseIds;
}

Text[] GetBaseTitleNames()
{
	return G_BaseTitleNames;
}

Text[] GetBaseMakerNames()
{
	return G_BaseMakerNames;
}

Text[] GetUGCAssets()
{
	return G_UGCAssets;
}

Boolean[] GetIsVisibleInMaker()
{
	return G_IsVisibleInMaker;
}

Boolean[] GetIsActivated()
{
	return G_IsActivated;
}

Text GetMapEditorScript()
{
	return G_MapEditorScript;
}