#Include "TextLib"											as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/MP4/TitlePackMaker/Components/Component_Editor/EditorXmlReader.Script.txt"	as EditorXmlReader

#Const C_SizeMainButton              <79.5, 8.>
#Const C_SizeActivateButton          <8., 8.>
#Const C_SizeDefaultButton           <8., 8.>
#Const C_SelectorLargeur		0.4

//#Const Count_InstancesButtonY    4
//#Const Count_InstancesButtonX    1
#Const PosXFirstButton           -25.8
#Const PosYFirstButton           40.6
#Const SizeXButton               40.0
#Const SizeYButton               19.6
#Const MarginY_Button            0.7
#Const MarginX_Button            4.0
#Const C_Logo					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Editor.dds"

#Const C_IMG_Checkbox_Closed_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed_Over.dds"
#Const C_IMG_Checkbox_Closed	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed.dds"
#Const C_IMG_Checkbox_Open_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open_Over.dds"
#Const C_IMG_Checkbox_Open		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open.dds"

Text Build() {
	declare Text IMG_Arrow  = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/Arrow.dds";
	declare Text IMG_Delete = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/RemoveCrossOver.dds";
	declare Text SubFont    = Font::GetFontName("SubTitle");
	declare Text MainFont   = Font::GetFontName("Main");

	declare Integer Count_InstancesButtonY = 4;
	declare Text ProjectEnviro for LocalUser; // HACK
	if (ProjectEnviro == "Storm") {
		Count_InstancesButtonY = 3;
	}
	declare Integer Count_InstancesButtonX = 1;

	declare Text MLText = """
<manialink version="3" name="L_Editor">
	<framemodel id="Frame_Button">
		<frame id="Frame_MainButton">
			<label id="Label_Button" halign="left" valign="center" pos="-21.5 0" z-index="1" textsize="2.3" textfont="{{{SubFont}}}" text="" textcolor="fff"/>
			<quad id="Quad_Button" halign="left"   valign="center" size="{{{C_SizeMainButton.X}}} {{{C_SizeMainButton.Y}}}" pos="-24.7 -0.5" z-index="1" opacity="0.2" bgcolor="000" scriptevents="1"/>
			<frame id="Frame_ButtonInfo" >
				<quad id="Quad_Arrow" halign="left"   valign="center" size="3.5 3.5" pos="5.8 -0.5" z-index="1" opacity="0.5" image="{{{IMG_Arrow}}}" keepratio="Fit"/>
				<quad id="Quad_Line1" halign="center" valign="center" size="0.2 {{{C_SizeMainButton.Y-2.5}}}" pos="9.3 -0.5" z-index="1" opacity="0.5" bgcolor="fff"/>
				<quad id="Quad_Line2" halign="left" valign="center" size="42. 0.2" pos="11.0 -3.1" z-index="1" opacity="0.5" bgcolor="fff"/>
				<label id="Label_ButtonDetail" halign="left" valign="center" pos="11.5 -0.5" textsize="1.5" textfont="{{{SubFont}}}" text="Default" textcolor="fff" size="89."/>
				<quad id="Quad_Delete" halign="left"   valign="center" size="3.5 3.5" pos="90. -0.5" z-index="1" opacity="0.5" image="{{{IMG_Delete}}}" keepratio="Fit" scriptevents="1"/>
			</frame>

			<frame id="Frame_Selector" pos="15.0 -0.5" hidden="1">
				<quad id="C_Down"   halign="center" valign="center" pos="0 {{{-C_SizeMainButton.Y/2.}}}" size="{{{C_SizeMainButton.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				<quad id="C_Up"     halign="center" valign="center" pos="0 {{{C_SizeMainButton.Y/2.}}}"  size="{{{C_SizeMainButton.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				<quad id="C_Right"  halign="left" valign="center" pos="{{{C_SizeMainButton.X/2.-C_SelectorLargeur}}} 0"  size="{{{C_SelectorLargeur}}} {{{C_SizeMainButton.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				<quad id="C_Left"   halign="right" valign="center" pos="{{{-C_SizeMainButton.X/2.+C_SelectorLargeur}}} 0" size="{{{C_SelectorLargeur}}} {{{C_SizeMainButton.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			</frame>
		</frame>

		<frame id="Frame_ButtonActivate" pos="-5 0" z-index="2">
			<quad id="Quad_IsActivate"	halign="center" valign="center" size="{{{C_SizeMainButton.Y}}} {{{C_SizeMainButton.Y}}}" pos="-24.7 -0.5" z-index="2" image="{{{C_IMG_Checkbox_Closed}}}" imagefocus="{{{C_IMG_Checkbox_Closed_Over}}}" scriptevents="1"/>
			<quad id="Quad_ButtonActivate"	halign="center" valign="center" size="{{{C_SizeMainButton.Y}}} {{{C_SizeMainButton.Y}}}" pos="-24.7 -0.5" z-index="-1" bgcolor="000" opacity="0.1"/>
			
			<frame hidden="1">
				<quad id="Quad_ButtonActivate" halign="center"   valign="center" size="{{{C_SizeActivateButton.X}}} {{{C_SizeActivateButton.Y}}}" pos="-24.7 -0.5" z-index="1" opacity="0.2" bgcolor="000" scriptevents="1"/>
				<label id="Label_ButtonActivate" halign="left" valign="center" pos="-21.5 0" z-index="1" textsize="2.3" textfont="{{{SubFont}}}" text="" textcolor="fff"/>
				<quad id="Quad_IsActivate" halign="center" valign="center" size="{{{C_SizeActivateButton.X/2.}}} {{{C_SizeActivateButton.Y/2.}}}" pos="-24.7 -0.5" z-index="2" opacity="1.0" bgcolor="fff"/>
				<frame id="Frame_ContourActivate" pos="{{{-C_SizeActivateButton.X*3.-0.7}}} -0.5" hidden="0">
					<quad id="C_Down"   halign="center" valign="center" pos="0 {{{-C_SizeActivateButton.Y/2.}}}" size="{{{C_SizeActivateButton.X}}} {{{C_SelectorLargeur/2.}}}" z-index="1" bgcolor="fff" opacity="0.8"/>
					<quad id="C_Up"     halign="center" valign="center" pos="0 {{{C_SizeActivateButton.Y/2.}}}"  size="{{{C_SizeActivateButton.X}}} {{{C_SelectorLargeur/2.}}}" z-index="1" bgcolor="fff" opacity="0.8"/>
					<quad id="C_Right"  halign="left" valign="center" pos="{{{C_SizeActivateButton.X/2.-C_SelectorLargeur/2.}}} 0"  size="{{{C_SelectorLargeur/2.}}} {{{C_SizeActivateButton.Y}}}" z-index="1" bgcolor="fff" opacity="0.8"/>
					<quad id="C_Left"   halign="right" valign="center" pos="{{{-C_SizeActivateButton.X/2.+C_SelectorLargeur/2.}}} 0" size="{{{C_SelectorLargeur/2.}}} {{{C_SizeActivateButton.Y}}}" z-index="1" bgcolor="fff" opacity="0.8"/>
				</frame>
			</frame>

			<frame id="Frame_Selector" hidden="1">
				<quad halign="center" valign="center" size="{{{C_SizeActivateButton.X}}} {{{C_SizeActivateButton.Y}}}" pos="-24.7 -0.5" z-index="1" opacity="0.6" bgcolor="fff"/>
			</frame>
		</frame>
	</framemodel>
	

	<frame id="Frame_All">
		<quad id="Quad_BG" halign="center" valign="center" size="163.5 100.8" pos="-0.7 0.8" opacity="0.7" z-index="-5" bgcolor="333"/>
		<label id="Label_Button" halign="center" valign="center" pos="-60.5 45" z-index="1" textsize="2.3" textfont="{{{SubFont}}}" text="" textcolor="fff"/>
		<frame id="Frame_Title" pos="0 70">
			<quad id="Quad_Title" valign="center" halign="center" size="16 16" pos="-87 -1.5" z-index="3" keepratio="fit" colorize="{{{DesignManialinks::GetColorCode_Overall()}}}" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" image="{{{C_Logo}}}"/>
			<label id="Label_Title" valign="center" size="160 10" pos="-75 0" textfont="{{{MainFont}}}" z-index="2" textsize="9" textprefix="$t" text="{{{_("Editors")}}}" textcolor="{{{DesignManialinks::GetColorCode_Overall()}}}" halign="left"/>
			<quad id="Quad_Black" halign="center" valign="top" size="151.65 0.2" pos="0.825 -8" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
			<quad id="Quad_Black" halign="left" valign="bottom" size="32 0.8" pos="-75 -8" z-index="-1" bgcolor="{{{DesignManialinks::GetColorCode_Overall()}}}"/>
		</frame>
	""";
	for(I,0,Count_InstancesButtonY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstButton - IndexY*C_SizeMainButton.Y - IndexY*MarginY_Button*1.-2.5;
		for(J,0,Count_InstancesButtonX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosX = PosXFirstButton + IndexX*C_SizeMainButton.X + IndexX*MarginX_Button*1.-4.5;
			MLText^="""
				<frameinstance modelid="Frame_Button" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Button{{{I}}}{{{J}}}" hidden="0"/>
			""";
		}
	}
	MLText^="""
	</frame>

	<script><!--
	#Include "TextLib" as Editor_TextLib

	#Const C_ButtonName		["NewMap" => _("Map Editor"),
								"EditReplay" => _("Replay Editor"),
								"PaintCar" => _("Car Painter"),
								"TitleTools" => _("Title Tools")]

	declare Boolean[] G_IsCustomisable;

	Void GetInfosButtons()
	{

	}

	Void UpdateButtonInfos()
	{
		declare Text Logo				for LocalUser;
		declare Text TitleMusic			for LocalUser;
		declare Text BackgroundVideo	for LocalUser;
		declare Text BackgroundImage	for LocalUser;
		declare Text StationLogos		for LocalUser;
		declare Text StationImage		for LocalUser;
		declare Text[] Page_CustomName  for Page;
		declare Text[] Page_BaseName	for Page;
		declare Boolean[] Page_IsActivate  for Page;
		declare BgUrl = BackgroundVideo;
		if (BgUrl == "") {
			BgUrl = BackgroundImage;
		}
		
		for(I, 0, {{{Count_InstancesButtonY - 1}}})
		{
			declare CMlFrame Frames_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I^"0")	as CMlFrame);
			declare CMlLabel Label_Button        <=> (Frames_Button.GetFirstChild("Label_Button")	as CMlLabel);
			Label_Button.SetText(C_ButtonName[Page_BaseName[I]]);
		}

		//declare Text[] ButtonDetail = [""^G_GameLogo,""^BgUrl,""^G_TitleMusic];
		declare Real MaxLabelWidth = 75.4;
		for(I, 0, {{{Count_InstancesButtonY - 1}}})
		{
			declare CMlFrame Frames_Button         <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I^"0") as CMlFrame);
			declare CMlFrame Frame_Selector        <=> (Frames_Button.GetFirstChild("Frame_Selector")	  as CMlFrame);
			declare CMlFrame Frame_ContourActivate <=> (Frames_Button.GetFirstChild("Frame_ContourActivate")	  as CMlFrame);
			declare CMlLabel Label_ButtonDetail    <=> (Frames_Button.GetFirstChild("Label_ButtonDetail")	  as CMlLabel);
			declare CMlLabel Label_Button          <=> (Frames_Button.GetFirstChild("Label_Button")	  as CMlLabel);
			declare CMlQuad  Quad_Button           <=> (Frames_Button.GetFirstChild("Quad_Button")	      as CMlQuad);
			declare CMlQuad  Quad_Line1            <=> (Frames_Button.GetFirstChild("Quad_Line1")	      as CMlQuad);
			declare CMlQuad  Quad_Arrow            <=> (Frames_Button.GetFirstChild("Quad_Arrow")	      as CMlQuad);
			declare CMlFrame Frame_ButtonInfo      <=> (Frames_Button.GetFirstChild("Frame_ButtonInfo")	  as CMlFrame);
			declare CMlQuad  Quad_IsActivate       <=> (Frames_Button.GetFirstChild("Quad_IsActivate")	      as CMlQuad);
			declare CMlQuad  Quad_Delete           <=> (Frames_Button.GetFirstChild("Quad_Delete")	          as CMlQuad);
			declare CMlQuad  Quad_Right            <=> (Frame_Selector.GetFirstChild("C_Right")	          as CMlQuad);
			declare CMlQuad  Quad_Up               <=> (Frame_Selector.GetFirstChild("C_Up")	          as CMlQuad);
			declare CMlQuad  Quad_Down             <=> (Frame_Selector.GetFirstChild("C_Down")	          as CMlQuad);
			declare CMlQuad  Quad_Line2            <=> (Frames_Button.GetFirstChild("Quad_Line2")	      as CMlQuad);
			Quad_Button.Size.X             = MaxLabelWidth+37.0;
			Quad_Right.RelativePosition_V3.X = MaxLabelWidth-2.9;
			Quad_Up.Size.X                = MaxLabelWidth+37.;
			Quad_Up.RelativePosition_V3.X    = MaxLabelWidth-2.7-(Quad_Up.Size.X/2.);
			Quad_Down.Size.X              = MaxLabelWidth+37.;
			Quad_Down.RelativePosition_V3.X  = MaxLabelWidth-2.7-(Quad_Down.Size.X/2.);
			Quad_Line2.Size.X             = MaxLabelWidth;
			//Frame_Selector

			if(Page_IsActivate.existskey(I) && Page_IsActivate[I])
			{
				Label_Button.Opacity         = 1.0;
				Label_Button.TextColor       = <1., 1., 1.>;
				Label_ButtonDetail.Opacity   = 1.0;
				Label_ButtonDetail.TextColor = <1., 1., 1.>;
				Quad_Arrow.ModulateColor = <1., 1., 1.>;
				Quad_Line1.BgColor = <1., 1., 1.>;
				Quad_Line2.BgColor = <1., 1., 1.>;
				//Quad_IsActivate.Show();
				Frame_ContourActivate.Show();
				Quad_IsActivate.ChangeImageUrl({{{dump(C_IMG_Checkbox_Closed)}}});
				Quad_IsActivate.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Closed_Over)}}};
			}
			else
			{
				Label_Button.Opacity         = 0.6;
				Label_ButtonDetail.Opacity   = 0.6;
				Label_Button.TextColor       = <0.1, 0.1, 0.1>;
				Label_ButtonDetail.TextColor = <0.1, 0.1, 0.1>;
				Quad_Arrow.ModulateColor = <0.1, 0.1, 0.1>;
				Quad_Line1.BgColor = <0.1, 0.1, 0.1>;
				Quad_Line2.BgColor = <0.1, 0.1, 0.1>;
				//Quad_IsActivate.Hide();
				Frame_ContourActivate.Hide();
				Quad_IsActivate.ChangeImageUrl({{{dump(C_IMG_Checkbox_Open)}}});
				Quad_IsActivate.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Open_Over)}}};
			}
			
			if(G_IsCustomisable[I])
			{
				Frame_ButtonInfo.Show();
			}
			else
			{
				Quad_Button.Opacity = 0.05;
				Frame_ButtonInfo.Hide();
			}

			if(Page_CustomName.existskey(I) && Page_CustomName[I] != "")
			{
				Label_ButtonDetail.SetText(Page_CustomName[I]);
				if(Page_IsActivate.existskey(I) && Page_IsActivate[I])
				{
					Quad_Delete.Show();
				}
				else
				{
					Quad_Delete.Hide();
				}
			}
			else
			{
				Label_ButtonDetail.SetText("{{{_("Default")}}}");
				Quad_Delete.Hide();
			}
			
		}
	}

	Void ShowPage()
	{
		//GetInfosButtons();
		SendCustomEvent("SendInfosButtons", [""]);
		//UpdateButtonInfos();
		EnableMenuNavigation(True,False,Null,1);
	}

	Void Init() {
		
		G_IsCustomisable = [True, False,  False,  False];
		for(I, 0, {{{Count_InstancesButtonY - 1}}})
		{
			declare CMlFrame Frames_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I^"0")	as CMlFrame);
			declare CMlQuad  Quad_Button         <=> (Frames_Button.GetFirstChild("Quad_Button")	as CMlQuad);
			declare CMlQuad  Quad_IsActivate <=> (Frames_Button.GetFirstChild("Quad_IsActivate")	as CMlQuad);
			declare CMlQuad  Quad_Delete         <=> (Frames_Button.GetFirstChild("Quad_Delete")	as CMlQuad);
			declare Integer QuadId as Quad_ButtonId         for Quad_Button;
			declare Integer QuadId as Quad_IsActivateId for Quad_IsActivate;
			declare Integer QuadId as Quad_DeleteId         for Quad_Delete;
			Quad_ButtonId         = I;
			Quad_IsActivateId = I;
			Quad_DeleteId         = I;
		}


	}

	main() {
		Init();
		ShowPage();
		while(True) {

			yield;
			if(! PageIsVisible) continue;
			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::MenuNavigation: {
						switch(Event.MenuNavAction) {
							case CMlEvent::EMenuNavAction::Cancel : {
								SendCustomEvent("GotoPrevious", [""]);
							}
						}
					}
					case CMlEvent::Type::MouseClick: {
						declare EventId = Event.ControlId;
						if (EventId == "Quad_Button") {
							declare Integer QuadId for Event.Control;
							declare Boolean[] Page_IsActivate  for Page;
							if(!Page_IsActivate[QuadId]) continue;
							switch(QuadId)
							{
								case 0: SendCustomEvent("LaunchMapEditorBrowser", [""^QuadId]);
							}

							//UpdateButtonInfos();
						}
						else if	(EventId == "Quad_IsActivate") {
							declare Integer QuadId for Event.Control;
							declare Boolean[] Page_IsActivate  for Page;
							SendCustomEvent("SwitchActivate", [""^QuadId]);
						}
						else if	(EventId == "Quad_Delete") {
							declare Integer QuadId for Event.Control;
							SendCustomEvent("SetToDefault", [""^QuadId]);
							UpdateButtonInfos();
						}
					}
					case CMlEvent::Type::MouseOver: {
						declare EventId = Event.ControlId;
						if (EventId == "Quad_Active") {

						}
						else if	(EventId == "Quad_Button") {
							declare Integer QuadId for Event.Control;
							declare Boolean[] Page_IsActivate  for Page;
							if(!Page_IsActivate[QuadId] || !G_IsCustomisable[QuadId]) continue;
							declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
							Frame_Selector.Show();
						}
						else if	(EventId == "Quad_ButtonActivate") {
							declare Integer QuadId for Event.Control;
							declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
							Frame_Selector.Show();
						}
						else if	(EventId == "Quad_Delete") {
							declare CMlQuad Quad_Delete <=> (Event.Control.Parent.GetFirstChild("Quad_Delete")	as CMlQuad);
							Quad_Delete.Opacity = 1.0;
						}
					}
					case CMlEvent::Type::MouseOut: {
						declare EventId = Event.ControlId;
						if (EventId == "Quad_Button" || EventId == "Quad_ButtonActivate") {
							declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
							Frame_Selector.Hide();
						}
						else if	(EventId == "Quad_Delete") {
							declare CMlQuad Quad_Delete <=> (Event.Control.Parent.GetFirstChild("Quad_Delete")	as CMlQuad);
							Quad_Delete.Opacity = 0.5;
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						switch(Event.CustomEventType) {
							case "Show" : {
								ShowPage();
								SendCustomEvent("UpdateBarreSection", ["Editor"]);
								SendCustomEvent("TaskBar_UpdateTitleAndLogo", [Editor_TextLib::ToText(False)]);
							}
							case "Back" : {
								SendCustomEvent("GotoPrevious", Text[]); // TODO : Lié au hack constaté dans LocalPlayController
							}
							case "Hide" : {
								EnableMenuNavigation(False,False,Null,0);
								SendCustomEvent("DetachPage", ["Editor"]);
							}
							case "UpdateAllInfos" : {
								UpdateButtonInfos();
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>	""";
	
	return MLText;
}