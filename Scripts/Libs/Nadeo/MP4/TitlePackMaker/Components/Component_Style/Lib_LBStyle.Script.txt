#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/Common/ManialinkTools/Lib_ColorPicker.Script.txt"		as Lib_ColorPicker
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font

#Const C_ContextualMenuPosition_Open	[3.6, -30.8]
#Const C_ContextualMenuPosition_Closed	[3.6, -72.8]

#Const C_ImgBase "file://Media/Images/TitlePackMaker/Campaign/"

#Const Count_InstancesY         5
#Const Count_InstancesX         1
#Const PosXFirstQuad            15.8
#Const PosYFirstQuad            -62.1
#Const SizeXQuad                40.0
#Const SizeYQuad                19.6
#Const MarginY_Button           0.5
#Const MarginX_Button           4.0

#Const Count_InstancesMediaY    3
#Const Count_InstancesMediaX    1
#Const PosXFirstMedia           15.8
#Const PosYFirstMedia           -19.6
#Const SizeXMedia               40.0
#Const SizeYMedia               19.6
#Const MarginY_Media            0.5
#Const MarginX_Media            4.0

#Const Count_InstancesStationMediaY    2
#Const Count_InstancesStationMediaX    1
#Const PosXFirstStationMedia           15.8
#Const PosYFirstStationMedia           -120.
#Const SizeXStationMedia               40.0
#Const SizeYStationMedia               19.6
#Const MarginY_StationMedia            0.5
#Const MarginX_StationMedia            4.0

#Const C_SizeMedia              <79.5, 8.>
#Const C_SelectorLargeur		0.4

Text Inject_Manialink()
{
	DesignManialinks::Init();

	declare Vec2 LogoSizeButton      = <16.5, 16.4>;
	declare Vec2 VideoSizeButton     = <9., 9.>;
	declare Vec2 MusicSizeButton     = <9., 9.>;
	declare Vec2 PreviewSizeButton   = <9., 9.>;
	declare Vec2 QuadColorChoose     = <20., SizeYQuad>;
	declare Vec2 SizeQuad            = <57., 8.>;
	
	declare Text IMG_Arrow           = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/Arrow.dds";

	declare Text MainFont				= Font::GetFontName("Main");
	declare Text SubFont				= Font::GetFontName("SubTitle");
	declare Text MLText = """
	<framemodel id="Frame_Media">
		<quad id="Quad_Media" halign="left"   valign="center" size="{{{C_SizeMedia.X}}} {{{C_SizeMedia.Y}}}" pos="-24.7 -0.5" z-index="1" opacity="0.2" bgcolor="000" scriptevents="1"/>
		<quad id="Quad_Arrow" halign="left"   valign="center" size="3.5 3.5" pos="5.8 -0.5" z-index="1" opacity="0.5" image="{{{IMG_Arrow}}}" keepratio="Fit"/>
		<quad id="Quad_Line1" halign="center" valign="center" size="0.2 {{{C_SizeMedia.Y-2.5}}}" pos="9.3 -0.5" z-index="1" opacity="0.5" bgcolor="fff"/>
		<quad id="Quad_Line2" halign="left" valign="center" size="42. 0.2" pos="11.0 -3.1" z-index="1" opacity="0.5" bgcolor="fff"/>
		<label id="Label_Media" halign="left" valign="center" size="27 0" pos="-21.5 0" z-index="1" textsize="2.3" textfont="{{{SubFont}}}" text="Media" textcolor="fff"/>
		<label id="Label_MediaDetail" halign="left" valign="center" pos="11.5 -0.5" textsize="1.5" textfont="{{{SubFont}}}" text="MyMedia.dds" textcolor="fff" size="89."/>

		<frame id="Frame_Selector" pos="15.0 -0.5" hidden="1">
			<quad id="C_Down"         halign="center" valign="center" pos="0 {{{-C_SizeMedia.Y/2.}}}" size="{{{C_SizeMedia.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Up"           halign="center" valign="center" pos="0 {{{C_SizeMedia.Y/2.}}}"  size="{{{C_SizeMedia.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Right"        halign="left" valign="center" pos="{{{C_SizeMedia.X/2.-C_SelectorLargeur}}} 0"  size="{{{C_SelectorLargeur}}} {{{C_SizeMedia.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Left"         halign="right" valign="center" pos="{{{-C_SizeMedia.X/2.+C_SelectorLargeur}}} 0" size="{{{C_SelectorLargeur}}} {{{C_SizeMedia.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
		</frame>
	</framemodel>
	<framemodel id="Frame_Color">
		<quad  id="Quad_ColorBtn"  halign="left"   valign="center" size="{{{SizeQuad.X}}} {{{SizeQuad.Y}}}" pos="-24.7 -0.5" z-index="1" opacity="0.2" bgcolor="000" scriptevents="1"/>
		<quad  id="Quad_Arrow"     halign="left"   valign="center" size="3.5 3.5" pos="5.8 -0.5" z-index="1" opacity="0.5" image="{{{IMG_Arrow}}}" keepratio="Fit"/>
		<quad  id="Quad_Line1"     halign="center" valign="center" size="0.2 {{{C_SizeMedia.Y-2.5}}}" pos="9.3 -0.5" z-index="1" opacity="0.5" bgcolor="fff"/>
		<quad  id="Quad_ColorPrev" halign="left"   valign="center" size="19.6 {{{SizeQuad.Y-2.8}}}" z-index="3" pos="10.8 -0.5"  opacity="1.0" bgcolor="0F5"/>
		<label id="Label_Color" halign="left" valign="center" size="27 0" pos="-21.5 0" z-index="1" textsize="2.3" textfont="{{{SubFont}}}" text="Color" textcolor="fff"/>
	
		<frame id="Frame_Selector" pos="3.8 -0.5" hidden="1" z-index="4">
			<quad id="C_Down"         halign="center" valign="center" pos="0 {{{-SizeQuad.Y/2.}}}" size="{{{SizeQuad.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Up"           halign="center" valign="center" pos="0 {{{SizeQuad.Y/2.}}}"  size="{{{SizeQuad.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Right"        halign="left" valign="center" pos="{{{SizeQuad.X/2.-C_SelectorLargeur}}} 0"  size="{{{C_SelectorLargeur}}} {{{SizeQuad.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Left"         halign="right" valign="center" pos="{{{-SizeQuad.X/2.+C_SelectorLargeur}}} 0" size="{{{C_SelectorLargeur}}} {{{SizeQuad.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
		</frame>
	</framemodel>

<frame z-index="0">
	<frame id="Frame_ColorPicker" hidden="0">
		{{{Lib_ColorPicker::Inject_Manialink(<-25.8, -11.0>, 0.61)}}}
	</frame>
	<frame pos="-110 69">
		<quad id="Quad_BG" halign="center" valign="center" size="133.5 140.8" pos="47.7 -70.8" opacity="0.7" z-index="-5" bgcolor="333"/>
		<frame pos="-27 -3" id="Frame_Logo">
			<frame id="Frame_Arrow" pos="22 4.5" hidden="1">
				<quad id="Quad_Head" halign="center" valign="top" size="5. 0.5" pos="0 1" opacity="1." bgcolor="fff"/>
				<quad id="Quad_Line" halign="center" valign="top" size="0.5 11.0" pos="2.3 1" opacity="1." bgcolor="fff" rot="-45"/>
			</frame>

			<frame id="Frame_Button" pos="13.5 24.4">
				<frame id="GameLogoHighlight" pos="0 0" z-index="1" hidden="1">
					<quad pos="8.3 -8.3" z-index="1"  halign="center" valign="center" size="{{{LogoSizeButton.X+6}}} {{{LogoSizeButton.Y+6}}}" bgcolor="FFFA" style="Bgs1" substyle="BgGlow2" opacity="0.2"/>
					<quad pos="8.3 -8.3" z-index="1"  halign="center" valign="center" size="{{{LogoSizeButton.X+12}}} {{{LogoSizeButton.Y+12}}}" style="Bgs1" substyle="BgButtonShadow" opacity="0.8" colorize="FFF"/>
				</frame>
			</frame>
		</frame>
		<frame>
			<frame pos="{{{PosXFirstMedia-29.}}} {{{PosYFirstMedia+5.}}}">
				<label halign="left" valign="center" pos="0. 6." textsize="6.5" textprefix="$t" textfont="{{{MainFont}}}" text="{{{//L16N Noun, plural, designates the assets that will be used in the game menu (background music is one of them, for instance)
			_("Media")
			}}}" textcolor="fff"/>
				<quad z-index="1"  halign="right" valign="top"    pos="122. 0." size="122. 0.3" bgcolor="FFF" opacity="1."/>
				<quad z-index="1"  halign="right" valign="bottom" pos="122. 0." size="16.5 0.3" bgcolor="FFF" opacity="1."/>
			</frame>

			""";
	for(I,0,Count_InstancesMediaY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstMedia - IndexY*C_SizeMedia.Y - IndexY*MarginY_Media*1.-2.5;
		for(J,0,Count_InstancesMediaX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosX = PosXFirstMedia + IndexX*C_SizeMedia.X + IndexX*MarginX_Media*1.-4.5;
			MLText^="""
				<frameinstance modelid="Frame_Media" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Media{{{I}}}{{{J}}}" hidden="0"/>
			""";
		}
	}
	MLText^="""
		</frame>
		<frame pos="0 0" id="Frame_Colors">
			<frame pos="{{{PosXFirstQuad}}} {{{PosYFirstQuad+5.}}}">
				<label halign="left" valign="center" pos="-28.2 6." textsize="6.5" textprefix="$t" textfont="{{{MainFont}}}" text="{{{//L16N Noun, plural, designates the colors that will be shown in the game menu
			_("Colors")
			}}}" textcolor="fff"/>
				<quad z-index="1"  halign="right" valign="top"    pos="93.8 0." size="122. 0.3" bgcolor="FFF" opacity="1."/>
				<quad z-index="1"  halign="right" valign="bottom" pos="93.8 0." size="16.5 0.3" bgcolor="FFF" opacity="1."/>
			</frame>
			<frame pos="0 0" scale="1.0">
			""";
	for(I,0,Count_InstancesY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstQuad - IndexY*SizeQuad.Y - IndexY*MarginY_Button*1.-4.0;
		for(J,0,Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosX = PosXFirstQuad + IndexX*SizeQuad.X + IndexX*MarginX_Button*1.-4.5;
			MLText^="""
				<frameinstance modelid="Frame_Color" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Instance{{{I}}}{{{J}}}" hidden="0"/>
			""";
		}
	}
	MLText^="""

			</frame>

			<frame id="Frame_Arrow" pos="-37.0 0" hidden="1">
				<quad id="Quad_Head" halign="right" valign="center" size="5. 0.5" pos="0 1" opacity="1." bgcolor="fff"/>
				<quad id="Quad_Line" halign="center" valign="top" size="0.5 11.0" pos="-0.3 1" opacity="1." bgcolor="fff" rot="-45"/>
				<label id="Label_Helper" textfont="{{{SubFont}}}" text="Sections Color"	size="27 7" textcolor="FFF" halign="left" pos="10 -4.5"/>
			</frame>


		</frame>

		<frame>
			<frame pos="{{{PosXFirstStationMedia-29.}}} {{{PosYFirstStationMedia+5.}}}">
				<label halign="left" valign="center" pos="0. 6." textsize="6.5" textprefix="$t" textfont="{{{MainFont}}}" text="{{{//L16N Noun, the way the game is displayed in the station, opposite of "unboxing"
			_("Packaging")
			}}}" textcolor="fff"/>
				<quad z-index="1"  halign="right" valign="top"    pos="122. 0." size="122. 0.3" bgcolor="FFF" opacity="1."/>
				<quad z-index="1"  halign="right" valign="bottom" pos="122. 0." size="16.5 0.3" bgcolor="FFF" opacity="1."/>
			</frame>

			""";
	for(I,0,Count_InstancesStationMediaY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosY = PosYFirstStationMedia - IndexY*C_SizeMedia.Y - IndexY*MarginY_StationMedia*1.-2.5;
		for(J,0,Count_InstancesStationMediaX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosX = PosXFirstStationMedia + IndexX*C_SizeMedia.X + IndexX*MarginX_StationMedia*1.-4.5;
			MLText^="""
				<frameinstance modelid="Frame_Media" pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_StationMedia{{{I}}}{{{J}}}" hidden="0"/>
			""";
		}
	}
	MLText^="""
		</frame>
		
		<frame pos="221.2 -93.5" id="Frame_EntryNews">
			<frame id="Frame_Arrow" pos="-37.0 0" hidden="1">
				<quad id="Quad_Head" halign="right" valign="center" size="5. 0.5" pos="0 1" opacity="1." bgcolor="fff"/>
				<quad id="Quad_Line" halign="center" valign="top" size="0.5 11.0" pos="-0.3 1" opacity="1." bgcolor="fff" rot="-45"/>
				<label id="Label_Helper" textfont="{{{SubFont}}}" text="News Color"	size="27 7" textcolor="FFF" halign="left" pos="10 -4.5"/>
			</frame>
		</frame>

		<frame pos="0 -10" id="Frame_Title">
			<frame id="Frame_Arrow" pos="44 13.5" hidden="1">
				<quad id="Quad_Head" halign="center" valign="top" size="5. 0.5" pos="0 1" opacity="1." bgcolor="fff"/>
				<quad id="Quad_Line" halign="center" valign="top" size="0.5 11.0" pos="2.3 1" opacity="1." bgcolor="fff" rot="-45"/>
			</frame>
		</frame>

	</frame>
</frame>
<quad id="Background" pos="-160 90" size="320 180" z-index="-5" scriptevents="1" bgcolor="090" opacity="0."/>
	""";
	return MLText;
}


Text Inject_Includes()
{
	declare Text MLText = """

		{{{DesignManialinks::Includes()}}}
		{{{Lib_ColorPicker::Inject_Includes()}}}
	""";
	return MLText;
}

Text Inject_Declare()
{
	declare Text MLText = """

		{{{DesignManialinks::Declares()}}}
		{{{Lib_ColorPicker::Inject_Declare()}}}

		declare Text    G_ProjectDescription;
		declare Text    G_GameLogo;
		declare Text    G_TitleMusic;
		declare Text	G_StationLogos;
		declare Text	G_StationImage;
		declare Text    G_FocusedPart;
		declare Integer G_ColorEntrySelect;
		declare Integer G_ActiveFocus;
		declare Integer G_ActiveTimeToUnfocus;
		declare Boolean G_IsPreviewMode;
		declare Integer G_QuadId;
	""";
	return MLText;
}

Text Inject_Functions()
{
	declare Text MLText = """
	//<script>
		{{{Lib_ColorPicker::Inject_Functions()}}}

		Void MoveActiveQuad(Integer _Index, Real _PosX)
		{
			declare CMlFrame Frame_Active <=> (Page.MainFrame.GetFirstChild("Frame_Color"^_Index)	as CMlFrame);
			if(Frame_Active == Null) return;
		}

		Void AddMedia(Text _FocusedPart)
		{
			if (_FocusedPart == "") {
				log(Now ^ ") ATTENTION, BOUTON BROWSE CLIQUE SANS OBJET SELECTIONNE");
				return;
			}
			switch(_FocusedPart) {
				case "GameLogo" : {
					SendCustomEvent("AddImage", Text[]);
				}
				case "BgVideo" : {
					SendCustomEvent("AddVideo", Text[]);
				}
				case "TitleMusic" : {
					SendCustomEvent("AddSound", Text[]);
				}
				case "StationLogos" : {
					SendCustomEvent("AddStationLogos", Text[]);
				}
				case "StationImage" : {
					SendCustomEvent("AddStationImage", Text[]);
				}
				case "AddButton2" : {
					SendCustomEvent("AddSound", Text[]);
				}
			}
		}

		Void PreviewMedia(Text _FocusedPart)
		{
			if (_FocusedPart == "") {
				log(Now ^ ") ATTENTION, BOUTON PREVIEW CLIQUE SANS OBJET SELECTIONNE");
				return;
			}
			switch(_FocusedPart) {
				case "GameLogo" : {
					SendCustomEvent("PreviewImage", Text[]);
				}
				case "BgVideo" : {
					SendCustomEvent("PreviewVideo", Text[]);
				}
				case "TitleMusic" : {
					SendCustomEvent("PreviewSound", Text[]);
				}
			}
		}

		Void DisplayHighlightsAndButtons()
		{
			Page.GetFirstChild("GameLogoHighlight").Visible = False;
			//Page.GetFirstChild("BgVideoHighlight").Visible = False;
			//Page.GetFirstChild("TitleMusicHighlight").Visible = False;
			if (G_FocusedPart != "" && G_FocusedPart != "Quad_Active")
			{
				declare FocusedPartHighlight = Page.GetFirstChild(G_FocusedPart ^ "Highlight");//.Visible = True;
				if(FocusedPartHighlight != Null) FocusedPartHighlight.Visible = True;
				declare Text TitleName;
				switch(G_FocusedPart) {
					case "GameLogo": {
						TitleName = G_GameLogo;
					}
					case "BgVideo": {
						TitleName = G_BgVideoUrl;
						if (TitleName == "") {
							TitleName = G_BgImageUrl;
						}
					}
					case "TitleMusic": {
						TitleName = G_TitleMusic;
					}
				}
				declare Text[] Paths = TextLib::Split("/", TitleName);
				if (Paths.count != 0) {
					TitleName = Paths[Paths.count - 1];
					TitleName = TextLib::Split(".", TitleName)[0];
				}
				declare Text[] SplitElements = TextLib::Split(" ", TitleName);
				declare Integer CurrentPointer = 0;
				foreach(SplitElement in SplitElements) {
					declare WordLength = TextLib::Length(SplitElement);
					if (WordLength > 15) {
						TitleName = TextLib::SubString(TitleName, 0, CurrentPointer + 15) ^ " " ^ TextLib::SubString(TitleName, CurrentPointer + 15, 30);
					}
					CurrentPointer += WordLength;
				}
				if (TextLib::Length(TitleName) > 40) {
					TitleName = TextLib::SubString(TitleName, 0, 40) ^ "...";
				}
				(Page.GetFirstChild("StyleTitle") as CMlLabel).Value = TitleName;
			}
		}

		Void UpdateMediaInfos()
		{
			declare Text Logo				for LocalUser;
			declare Text TitleMusic			for LocalUser;
			declare Text BackgroundVideo	for LocalUser;
			declare Text BackgroundImage	for LocalUser;
			declare Text StationLogos		for LocalUser;
			declare Text StationImage		for LocalUser;
			declare BgUrl = BackgroundVideo;
			if (BgUrl == "") {
				BgUrl = BackgroundImage;
			}
			declare Text[] MediaDetail = [""^G_GameLogo,""^BgUrl,""^G_TitleMusic];
			declare Real MaxLabelWidth = 85.4;
			for(I, 0, {{{Count_InstancesMediaY - 1}}})
			{
				declare CMlFrame Frames_Media      <=> (Page.MainFrame.GetFirstChild("Frame_Media"^I^"0") as CMlFrame);
				declare CMlFrame Frame_Selector    <=> (Frames_Media.GetFirstChild("Frame_Selector")	  as CMlFrame);
				declare CMlLabel Label_MediaDetail <=> (Frames_Media.GetFirstChild("Label_MediaDetail")	  as CMlLabel);
				declare CMlQuad  Quad_Media        <=> (Frames_Media.GetFirstChild("Quad_Media")	      as CMlQuad);
				declare CMlQuad  Quad_Right        <=> (Frame_Selector.GetFirstChild("C_Right")	          as CMlQuad);
				declare CMlQuad  Quad_Up           <=> (Frame_Selector.GetFirstChild("C_Up")	          as CMlQuad);
				declare CMlQuad  Quad_Down         <=> (Frame_Selector.GetFirstChild("C_Down")	          as CMlQuad);
				declare CMlQuad  Quad_Line2        <=> (Frames_Media.GetFirstChild("Quad_Line2")	      as CMlQuad);
				Label_MediaDetail.SetText(MediaDetail[I]);
				Quad_Media.Size.X             = MaxLabelWidth+37.0;
				Quad_Right.RelativePosition_V3.X = MaxLabelWidth-2.9;
				Quad_Up.Size.X                = MaxLabelWidth+37.;
				Quad_Up.RelativePosition_V3.X    = MaxLabelWidth-2.7-(Quad_Up.Size.X/2.);
				Quad_Down.Size.X              = MaxLabelWidth+37.;
				Quad_Down.RelativePosition_V3.X  = MaxLabelWidth-2.7-(Quad_Down.Size.X/2.);
				Quad_Line2.Size.X             = MaxLabelWidth;
				//Frame_Selector
				
			}

			declare Text[] MediaStationDetail = [G_StationLogos, G_StationImage];
			declare Real MaxLabelStationWidth = 85.4;

			for(I, 0, {{{Count_InstancesStationMediaY - 1}}})
			{
				declare CMlFrame Frames_StationMedia      <=> (Page.MainFrame.GetFirstChild("Frame_StationMedia"^I^"0") as CMlFrame);
				declare CMlFrame Frame_Selector    <=> (Frames_StationMedia.GetFirstChild("Frame_Selector")	  as CMlFrame);
				declare CMlLabel Label_MediaDetail <=> (Frames_StationMedia.GetFirstChild("Label_MediaDetail")	  as CMlLabel);
				declare CMlQuad  Quad_Media        <=> (Frames_StationMedia.GetFirstChild("Quad_Media")	      as CMlQuad);
				declare CMlQuad  Quad_Right        <=> (Frame_Selector.GetFirstChild("C_Right")	          as CMlQuad);
				declare CMlQuad  Quad_Up           <=> (Frame_Selector.GetFirstChild("C_Up")	          as CMlQuad);
				declare CMlQuad  Quad_Down         <=> (Frame_Selector.GetFirstChild("C_Down")	          as CMlQuad);
				declare CMlQuad  Quad_Line2        <=> (Frames_StationMedia.GetFirstChild("Quad_Line2")	      as CMlQuad);
				Label_MediaDetail.SetText(MediaStationDetail[I]);
				Quad_Media.Size.X             = MaxLabelStationWidth+37.0;
				Quad_Right.RelativePosition_V3.X = MaxLabelStationWidth-2.9;
				Quad_Up.Size.X                = MaxLabelStationWidth+37.;
				Quad_Up.RelativePosition_V3.X    = MaxLabelStationWidth-2.7-(Quad_Up.Size.X/2.);
				Quad_Down.Size.X              = MaxLabelStationWidth+37.;
				Quad_Down.RelativePosition_V3.X  = MaxLabelStationWidth-2.7-(Quad_Down.Size.X/2.);
				Quad_Line2.Size.X             = MaxLabelStationWidth;
				//Frame_Selector
				
			}
			

		}

		Void DisplayAssets(Boolean _RefreshVideo)
		{
			//declare GameLogo			<=> (Page.GetFirstChild("GameLogo") as CMlQuad);
			//GameLogo.ChangeImageUrl(G_GameLogo);
			declare BgVideoQuad			<=> (Page.GetFirstChild("BgVideo") as CMlQuad);
			if (_RefreshVideo) {
				if (G_BgVideo != Null) {
					Video.DestroyVideo(G_BgVideo);
					G_BgVideo = Null;
				}
				if (G_BgVideoUrl != "") {
					G_BgVideo = Video.CreateVideo(G_BgVideoUrl, True, True);
					BgVideoQuad.Image = G_BgVideo.Image;
				}
			} else if (G_BgVideo != Null) {
				G_BgVideo.Stop();
			}
			if (G_BgVideo != Null) {
				G_BgVideo.Play();
			}
			declare TitleMusic			<=> (Page.GetFirstChild("TitleMusic") as CMlLabel);
			declare Text[] MusicPaths = TextLib::Split("/", G_TitleMusic);
			declare Text MusicPath = "";
			if (MusicPaths.count != 0) {
				MusicPath = MusicPaths[MusicPaths.count - 1];
				MusicPath = TextLib::Split(".", MusicPath)[0];
			}
			declare Text[] SplitElements = TextLib::Split(" ", MusicPath);
			declare Integer CurrentPointer = 0;
			foreach(SplitElement in SplitElements) {
				declare WordLength = TextLib::Length(SplitElement);
				if (WordLength > 15) {
					MusicPath = TextLib::SubString(MusicPath, 0, CurrentPointer + 15) ^ " " ^ TextLib::SubString(MusicPath, CurrentPointer + 15, 30);
				}
				CurrentPointer += WordLength;
			}
			if (TextLib::Length(MusicPath) > 40) {
				MusicPath = TextLib::SubString(MusicPath, 0, 40) ^ "...";
			}
			//TitleMusic.Value = MusicPath;
			DisplayHighlightsAndButtons();
			UpdateMediaInfos();
		}

		Void PickMedia(Text _PickedPart)
		{
			//SetNewsPositionY(20.);
			if (G_FocusedPart == _PickedPart)
			{
				AddMedia(_PickedPart);
				G_FocusedPart = "";
			} else {
				G_FocusedPart = _PickedPart;
				DisplayHighlightsAndButtons();
			}
		}

		Void SetHelpersOpacity(Real _Opacity)
		{
			declare Text[] Frame_Helper = ["Frame_Logo",
										"Frame_Colors",
										"Frame_Title",
										"Frame_EntryNews"];
			declare Integer Time = 400;
			for(I, 0, Frame_Helper.count-1)
			{
				declare CMlFrame MyFrame      <=> (Page.MainFrame.GetFirstChild(Frame_Helper[I])	as CMlFrame);
				declare CMlQuad Quad_Head     <=> (MyFrame.GetFirstChild("Quad_Head")	as CMlQuad);
				declare CMlQuad Quad_Line     <=> (MyFrame.GetFirstChild("Quad_Line")	as CMlQuad);
				//declare CMlLabel Label_Helper <=> (MyFrame.GetFirstChild("Label_Helper")	as CMlLabel);
				if(Quad_Head != Null)
				{
					LibManialink_SetTargetOpacity(Quad_Head, _Opacity);
					LibManialink_PresetAnim(Quad_Head, Time, "EaseOutCubic");
				}
				if(Quad_Line != Null)
				{
					LibManialink_SetTargetOpacity(Quad_Line, _Opacity);
					LibManialink_PresetAnim(Quad_Line, Time, "EaseOutCubic");
				}
				/*
				if(Label_Helper != Null)
				{
					LibManialink_SetTargetOpacity(Label_Helper, _Opacity);
					LibManialink_PresetAnim(Label_Helper, Time, "EaseOutCubic");
				}
				*/
			}

			declare CMlQuad BgVideo    <=> (Page.MainFrame.GetFirstChild("BgVideo")	as CMlQuad);
			declare CMlQuad TitleMusic <=> (Page.MainFrame.GetFirstChild("TitleMusic")	as CMlQuad);
			LibManialink_SetTargetOpacity(BgVideo, _Opacity);
			LibManialink_PresetAnim(BgVideo, Time, "EaseOutCubic");
			LibManialink_SetTargetOpacity(TitleMusic, _Opacity);
			LibManialink_PresetAnim(TitleMusic, Time, "EaseOutCubic");
			
			declare CMlEntry Entry_News   <=> (Page.MainFrame.GetFirstChild("Entry_News")	as CMlEntry);
			if(_Opacity == 1.)
			{
				Entry_News.Show();
			}
			else
			{
				Entry_News.Hide();
			}

			
		}

		Void UpdateSectionColors(Integer _Index)
		{
			declare Vec3[]    Page_Section_Colors for Page;
			declare Integer[] Page_ActiveSections for Page;
			declare Integer FinalIndex = Page_ActiveSections[_Index];
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^_Index^"0")	as CMlFrame);
			declare CMlQuad Quad_ColorPrev   <=> (Frames_Instance.GetFirstChild("Quad_ColorPrev")	as CMlQuad);
			Quad_ColorPrev.BgColor = Page_Section_Colors[FinalIndex];
		}

		Void UpdateNewsColors()
		{
			declare Vec3 Page_News_Color	 for Page;
			declare Integer[] Page_ActiveSections for Page;
			declare Integer Index = Page_ActiveSections.count;
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^Index^"0")	as CMlFrame);
			declare CMlQuad Quad_ColorPrev   <=> (Frames_Instance.GetFirstChild("Quad_ColorPrev")	as CMlQuad);
			Quad_ColorPrev.BgColor = Page_News_Color;
		}

		Void ShowColorPicker()
		{	
			declare CMlFrame Frame_ColorPicker <=> (Page.MainFrame.GetFirstChild("Frame_ColorPicker")	as CMlFrame);
			declare CMlQuad Quad_ColorPicker_FG <=> (Frame_ColorPicker.GetFirstChild("Quad_ColorPicker_FG")	as CMlQuad);
			Quad_ColorPicker_FG.Hide();
			SetColorPicker_ContourVisible(True);
		}

		Void HideColorPicker()
		{	
			declare CMlFrame Frame_ColorPicker <=> (Page.MainFrame.GetFirstChild("Frame_ColorPicker")	as CMlFrame);
			declare CMlQuad Quad_ColorPicker_FG <=> (Frame_ColorPicker.GetFirstChild("Quad_ColorPicker_FG")	as CMlQuad);
			Quad_ColorPicker_FG.Show();
			SetColorPicker_ContourVisible(False);
		}

		Void Init() {
			G_ProjectDescription = "";
			G_GameLogo = "";
			G_BgVideoUrl = "";
			G_BgImageUrl = "";
			G_BgVideo = Null;
			G_TitleMusic = "";
			G_StationLogos = "";
			G_StationImage = "";
			G_FocusedPart = "";
			HideColorPicker();

			//PosQuadButtons
			declare Text[] MediaName = [
				//L16N Is in the Style menu, logo of the title to be made
				_("Logo"), 
				//L16N Is in the Style menu, background of the title to be made
			_("Background"), 
			_("Music")];
			declare Text[] MediaStationName = ["Logos", "Background"];
			declare Real MaxLabelWidth;
			for(I, 0, MediaName.count - 1)
			{
				declare CMlLabel Label  <=> (Page.MainFrame.GetFirstChild("Label_Media")	as CMlLabel);
				declare Real LabelWidth = Label.ComputeWidth(MediaName[I], True);
				if(MaxLabelWidth < LabelWidth)
				{
					MaxLabelWidth = LabelWidth;	
				}
			}
			declare Text[] SectionName = ["Solo", "Online Play", "Local Play", "Editors", "News"];
			declare Text[] Sections_Name         for Page;
			declare Integer[] Page_ActiveSections for Page;
			for(I, 0, Page_ActiveSections.count - 1)
			{
				declare CMlLabel Label  <=> (Page.MainFrame.GetFirstChild("Label_Media")	as CMlLabel);
				declare Integer FinalIndex = 0;
				if(Page_ActiveSections.existskey(I)) FinalIndex = Page_ActiveSections[I];
				declare Real LabelWidth = Label.ComputeWidth(SectionName[FinalIndex], True);
				if(MaxLabelWidth < LabelWidth)
				{
					MaxLabelWidth = LabelWidth;	
				}
			}

			//MEDIA
			UpdateMediaInfos();
			for(I, 0, {{{Count_InstancesMediaY - 1}}})
			{
				declare CMlFrame Frames_Media      <=> (Page.MainFrame.GetFirstChild("Frame_Media"^I^"0")	as CMlFrame);
				declare CMlQuad  Quad_Media        <=> (Frames_Media.GetFirstChild("Quad_Media")	as CMlQuad);
				declare CMlLabel Label_Media       <=> (Frames_Media.GetFirstChild("Label_Media")	as CMlLabel);
				declare Integer  QuadId for Quad_Media;
				Label_Media.SetText(MediaName[I]);
				QuadId = I;
			}

			//SECTION COLOR
			for(I, 0, Page_ActiveSections.count)
			{
				declare CMlFrame Frame_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlQuad  Quad_ColorBtn   <=> (Frame_Instance.GetFirstChild("Quad_ColorBtn")	as CMlQuad);
				declare Integer  QuadId for Quad_ColorBtn;
				QuadId = I;
			}

			//STATION MEDIA
			for(I, 0, {{{Count_InstancesStationMediaY - 1}}})
			{
				declare CMlFrame Frames_StationMedia      <=> (Page.MainFrame.GetFirstChild("Frame_StationMedia"^I^"0")	as CMlFrame);
				declare CMlQuad  Quad_Media        <=> (Frames_StationMedia.GetFirstChild("Quad_Media")	as CMlQuad);
				declare CMlLabel Label_Media       <=> (Frames_StationMedia.GetFirstChild("Label_Media")	as CMlLabel);
				declare Integer  QuadId for Quad_Media;
				Label_Media.SetText(MediaStationName[I]);
				QuadId = {{{Count_InstancesMediaY}}} + I;
			}

		}


		Void Style_SetSection()
		{
			Init();
			declare Text[]    Sections_Name       for Page;
			declare Vec3[]    Page_Section_Colors for Page;
			declare Integer[] Page_ActiveSections for Page;
			declare Boolean IsNewsDisplay = False;
			for(I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance"^I^"0")	as CMlFrame);
				declare CMlLabel Label_Color  <=> (Frames_Instance.GetFirstChild("Label_Color")	as CMlLabel);

				if(Page_ActiveSections.existskey(I))
				{
					declare ActiveIndex = Page_ActiveSections[I];
					Frames_Instance.Show();
					Label_Color.SetText(C_SectionLocalizedNames[Sections_Name[Page_ActiveSections[I]]]);
					UpdateSectionColors(I);
				}
				else if(!IsNewsDisplay)
				{
					Frames_Instance.Show();
					IsNewsDisplay = True;
					Label_Color.SetText(_("Flashes"));
					UpdateNewsColors();
				}
				else
				{
					Frames_Instance.Hide();
				}
			}

			if(Page_ActiveSections.count > 0)
			{
				declare CMlFrame Frame_Colors <=> (Page.MainFrame.GetFirstChild("Frame_Colors")	as CMlFrame);
				declare CMlFrame Frame_Arrow <=> (Frame_Colors.GetFirstChild("Frame_Arrow")	as CMlFrame);
				declare CMlFrame Habillage_Menu_Down <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Down")	as CMlFrame);

				//Frame_Arrow.RelativePosition_V3.Y = 22.-16.*(Page_ActiveSections.count/2.);
				Frame_Arrow.RelativePosition_V3.Y = 18.-16.*Page_ActiveSections.count;
			}
		}
		

	""";
	return MLText;
}

Text Inject_Main()
{
	declare Text MLText = """
			Init();
			{{{Lib_ColorPicker::Inject_Main()}}}
			declare Text ProjectDescription for LocalUser;
			declare Text TitleMusic			for LocalUser;
			G_ActiveTimeToUnfocus = -1;
	""";
	return MLText;
}

Text Inject_While()
{
	declare Text MLText = """
	DesignManialinks_Loop();
	{{{Lib_ColorPicker::Inject_While()}}}


	if(G_ActiveTimeToUnfocus < Now && G_ActiveTimeToUnfocus != -1)
	{
		MoveActiveQuad(G_ActiveFocus, 5.);
		G_ActiveFocus = 0;
		G_ActiveTimeToUnfocus = -1;
	}


	if (G_BgVideoUrl != BackgroundVideo || G_BgImageUrl != BackgroundImage)
	{
		G_BgVideoUrl = BackgroundVideo;
		G_BgImageUrl = BackgroundImage;

		DisplayAssets(True);
	}
	if (	(G_ProjectDescription != ProjectDescription)
			||	(G_GameLogo != Logo)
			||	(G_TitleMusic != TitleMusic)
			||	(G_StationLogos != StationLogos)
			||	(G_StationImage != StationImage))
	{
		G_ProjectDescription = ProjectDescription;
		G_GameLogo = Logo;
		G_TitleMusic = TitleMusic;
		G_StationLogos = StationLogos;
		G_StationImage = StationImage;
		DisplayAssets(False);
	}

	foreach(Event in PendingEvents) {
		switch(Event.Type) {
			case CMlEvent::Type::EntrySubmit: {
				if (Event.ControlId == "DescriptionEntry")
				{
					declare Result <=> (Event.Control as CMlTextEdit);
					ProjectDescription = Result.Value;
				}
			}

			case CMlEvent::Type::MenuNavigation: {
				switch(Event.MenuNavAction) {
					case CMlEvent::EMenuNavAction::Action2 : {
						//SetHelpersOpacity(0.);
						//declare CMlQuad Quad_Background  <=> (Page.MainFrame.GetFirstChild("Quad_Background")	as CMlQuad);
						//Quad_Background.Hide();
						//Quad_Background.Show();
					}
					case CMlEvent::EMenuNavAction::Action1 : {
						//SetHelpersOpacity(1.);
					}
					case CMlEvent::EMenuNavAction::Cancel : {
						//SendCustomEvent("StyleMusicStop", Text[]);
						//SendCustomEvent("GotoPrevious", [""]);
					}
				}
			}
			case CMlEvent::Type::MouseClick: {
				declare EventId = Event.ControlId;
				if (EventId == "AddButton") {
					AddMedia(G_FocusedPart);
					HideColorPicker();
				}
				else if	(EventId == "Quad_Media") {
					declare Integer QuadId for Event.Control;
					switch(QuadId)
					{
						case 0: AddMedia("GameLogo");
						case 1: AddMedia("BgVideo");
						case 2: AddMedia("TitleMusic");
						case 3: AddMedia("StationLogos");
						case 4: AddMedia("StationImage");
					}
					HideColorPicker();
					declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
					Frame_Selector.Hide();
				}
				else if	(EventId == "Quad_ColorBtn") {
					declare Integer QuadId for Event.Control;
					G_QuadId = QuadId;
					declare Integer[] Page_ActiveSections for Page;
					declare Vec3[]    Page_Section_Colors for Page;
					declare Vec3      Page_News_Color   for Page;
					declare Text ColorToText;
					if(Page_ActiveSections.existskey(QuadId))
					{
						declare ActiveIndex = Page_ActiveSections[QuadId];
						ColorToText = TextLib::ColorToText(Page_Section_Colors[ActiveIndex]);
					}
					else
					{
						ColorToText = TextLib::ColorToText(Page_News_Color);
					}
					
					SetColorToPicker(ColorToText);
					ShowColorPicker();
				}
				else if	(EventId == "AddButton2") {
					SendCustomEvent("AddBackgroundImage", Text[]);
				}
				else if	(EventId == "PlayButton") {
					PreviewMedia(G_FocusedPart);
				}
				else if	(EventId == "Background") {
					G_FocusedPart = "";
					DisplayHighlightsAndButtons();
					HideColorPicker();
				} 
				else if	(EventId == "Quad_Background") {
					Event.Control.Focus();
				}
				else if (EventId == "Quad_ColorBtn")
				{
					//declare Integer QuadId for Event.Control;
				}
				else if (EventId == "TitleMusic" || EventId == "GameLogo")
				{
					if(G_IsPreviewMode) continue;
					declare CMlFrame Buttons_Choose      <=> (Page.MainFrame.GetFirstChild("Buttons_Choose")	as CMlFrame);
					declare CMlFrame Buttons_Background <=> (Page.MainFrame.GetFirstChild("Buttons_Background")	as CMlFrame);
					Buttons_Choose.Show();
					Buttons_Background.Hide();
					PickMedia(EventId);
				}
				else if (EventId == "BgVideo")
				{
					if(G_IsPreviewMode) continue;
					declare CMlFrame Buttons_Choose      <=> (Page.MainFrame.GetFirstChild("Buttons_Choose")	as CMlFrame);
					declare CMlFrame Buttons_Background <=> (Page.MainFrame.GetFirstChild("Buttons_Background")	as CMlFrame);
					Buttons_Choose.Hide();
					Buttons_Background.Show();
					PickMedia(EventId);
				}
				else if	(EventId == "Quad_Preview0"){
					declare CMlQuad Quad_Preview0     <=> (Page.MainFrame.GetFirstChild("Quad_Preview0")	as CMlQuad);
					declare CMlQuad Quad_Preview1     <=> (Page.MainFrame.GetFirstChild("Quad_Preview1")	as CMlQuad);
					Quad_Preview0.Hide();
					Quad_Preview1.Show();
					G_IsPreviewMode = True;
					//SetHelpersOpacity(0.);
					G_ActiveTimeToUnfocus = 0;

				}
				else if	(EventId == "Quad_Preview1"){
					declare CMlQuad Quad_Preview0     <=> (Page.MainFrame.GetFirstChild("Quad_Preview0")	as CMlQuad);
					declare CMlQuad Quad_Preview1     <=> (Page.MainFrame.GetFirstChild("Quad_Preview1")	as CMlQuad);
					Quad_Preview0.Show();
					Quad_Preview1.Hide();
					G_IsPreviewMode = False;
					//SetHelpersOpacity(1.);
				}
			}
			case CMlEvent::Type::MouseOver: {
				declare EventId = Event.ControlId;
				if (EventId == "Quad_Active") {
					if(G_IsPreviewMode) continue;
					G_ActiveTimeToUnfocus = -1;

				}
				else if	(EventId == "Quad_Media" || EventId == "Quad_ColorBtn") {
					declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
					Frame_Selector.Show();
				}
				/*
				else if(EventId == "Quad_ColorBtn")
				{
					if(G_IsPreviewMode) continue;
					declare Integer QuadId for Event.Control;
					if(G_ActiveFocus != QuadId) MoveActiveQuad(G_ActiveFocus, 5.);
					G_ActiveFocus = QuadId;
					//MoveActiveQuad(QuadId, 28.5);
					G_ActiveTimeToUnfocus = -1;
				}
				*/
				else if (EventId == "Background") {

					G_ActiveTimeToUnfocus = 1000 + Now;
				}
				else if (EventId == "BgVideo" ||EventId == "Quad_Preview0" ||EventId == "Quad_Preview1" ||EventId == "TitleMusic") {
					if(G_IsPreviewMode && EventId != "Quad_Preview1") continue;
					/*
					declare CMlLabel Label_Helper     <=> (Event.Control.Parent.GetFirstChild("Label_Helper")	as CMlLabel);
					LibManialink_AnimStop(Label_Helper);
					LibManialink_SetTargetOpacity(Label_Helper, 1.);
					LibManialink_PresetAnim(Label_Helper, 500, "EaseOutSine");
					LibManialink_SetTargetPosition(Label_Helper, <Label_Helper.RelativePosition_V3.X, -5.>);
					LibManialink_PresetAnim(Label_Helper, 700, "EaseOutQuint");
					*/
				}
				else if (EventId != "Background") {
					//if(G_IsPreviewMode) continue;
					declare Over <=> Page.GetFirstChild(EventId ^ "Over");
					if (Over != Null) {
						Over.Visible = True;
					}
				}
			}
			case CMlEvent::Type::MouseOut: {
				declare EventId = Event.ControlId;
				if (EventId == "BgVideo" || EventId == "Quad_Preview0" || EventId == "Quad_Preview1" ||EventId == "TitleMusic") {
					/*
					declare CMlLabel Label_Helper     <=> (Event.Control.Parent.GetFirstChild("Label_Helper")	as CMlLabel);
					LibManialink_AnimStop(Label_Helper);
					LibManialink_SetTargetOpacity(Label_Helper, 0.);
					LibManialink_PresetAnim(Label_Helper, 200, "EaseOutSine");
					LibManialink_SetTargetPosition(Label_Helper, <Label_Helper.RelativePosition_V3.X, -8.>);
					LibManialink_PresetAnim(Label_Helper, 600, "EaseOutQuint");
					*/
				}
				else if	(EventId == "Quad_Media" || EventId == "Quad_ColorBtn") {
					declare CMlFrame Frame_Selector <=> (Event.Control.Parent.GetFirstChild("Frame_Selector")	as CMlFrame);
					Frame_Selector.Hide();
				}
				else if (EventId != "Background") {
					declare Over <=> Page.GetFirstChild(EventId ^ "Over");
					if (Over != Null) {
						Over.Visible = False;
					}
				}
			}
			case CMlEvent::Type::PluginCustomEvent: {
				
				switch(Event.CustomEventType) {
					case "Show" : {
						SendCustomEvent("TaskBar_Show", Text[]);
						DisplayHighlightsAndButtons(); // TODO : Peut-être pas nécessaire de mettre cette ligne, safety first
						DesignManialinks_Show();
						
						if(G_IsPreviewMode)
						{
							declare CMlQuad Quad_Preview0     <=> (Page.MainFrame.GetFirstChild("Quad_Preview0")	as CMlQuad);
							declare CMlQuad Quad_Preview1     <=> (Page.MainFrame.GetFirstChild("Quad_Preview1")	as CMlQuad);
							Quad_Preview0.Show();
							Quad_Preview1.Hide();
							G_IsPreviewMode = False;
							SetHelpersOpacity(1.);
						}
					}
					case "Hide" : {
						EnableMenuNavigation(True,False,Null,0);
						G_FocusedPart = "";
						DisplayHighlightsAndButtons();
					}
					case "UpdateSectionColors" : {
						declare Integer Index = TL::ToInteger(Event.CustomEventData[0]);
						UpdateSectionColors(Index);

					}
					case "UpdateNewsColors" : {
						UpdateNewsColors();
					}
				}
			}
		}
	}
	""";
	return MLText;
}