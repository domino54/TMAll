#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt"				as Colors
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "TextLib" 											as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font
#Include "Libs/Nadeo/MP4/Common/Prompt.Script.txt"				as Prompt


#Const C_ContextualMenuPosition_Open	<0., 0.>
#Const C_ContextualMenuPosition_Closed	<80.7, 32.1>
#Const C_ContextualMenuScale_Closed	    0.398
#Const C_ContextualMenuScale_Open	    1.0

#Const C_ContextualStationPosition_Open	<0., 0.>
#Const C_ContextualStationPosition_Closed <66.5, -43.4>
#Const C_ContextualStationScale_Closed	0.31
#Const C_ContextualStationScale_Open	1.0
/*#Const C_ContextualStationSize_Closed	<60., 33.75>
#Const C_ContextualStationSize_Open	    <320., 180.>*/

#Const C_ImgBase				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"
#Const C_ImgMedal				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Medal-picto.dds"
#Const C_ImgMedalBG				"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Medal-picto-bg.dds"
#Const C_LogoImgBase			"file://Media/MEDIABROWSER_HiddenResources/Maker/Images/SectionsSelector/"
#Const C_LabelRankDecalY		7.
#Const C_SizeProfil				<25., 6.5>
#Const C_SizeManiaCredit		<31., 6.5>

#Const GlobalUISizeXQuad                 4.4
#Const GlobalUISizeYQuad                 4.4
#Const GlobalUIMarginY_Button            4.0
#Const GlobalUIMarginX_Button            0.5
#Const GlobalUISizeXQuadIcon             15.
#Const GlobalUISizeYQuadIcon             15.

#Const IMGGlobal_Home                    "Global_Home.dds"
#Const IMGGlobal_Back                    "Global_Back.dds"

#Const Count_InstancesY                  4
#Const Count_InstancesX                  1
#Const PosXFirstQuad                     -64.8
#Const PosYFirstQuad                     28.1
#Const SizeXQuad                         83.2
#Const SizeYQuad                         19.6
#Const MarginY_Button                    0.4
#Const MarginX_Button                    4.0

#Const Count_InstancesNewY               3
#Const Count_InstancesNewX               1
#Const PosXFirstNew                      160.0
#Const PosYFirstNew                      -12.8
#Const SizeXNew                          74.0
#Const SizeXNewImg                       19.5
#Const SizeYNew                          15.7
#Const MarginY_New                       0.4
#Const MarginX_New                       4.0

#Const BgContour                        4.0

#Const EnlargeButtonSize                <4.0, 1.2>

#Const C_NotFixedLogoSections	["Solo", "Multiplayer"]
#Const C_SectionLocalizedNames	["Solo" =>
							//L16N Name for the main menu button, designates the one-player campaign
							_("Solo"),
							"Multiplayer" =>
							//L16N Name for the main menu button, is related to the multiplayer servers online
							_("Online play"),
							"LocalPlay" =>
							//L16N Name for the main menu button, means playing with one computer
							_("Local play"),
							"Editors" =>
							//L16N Name for the main menu button, designates the editors of Maniaplanet
							_("Editors")]

Text Inject_Manialink()
{
	DesignManialinks::Init();
	declare Text Logo for LocalUser;

	declare Text    IMGLogo_Profil           = C_ImgBase ^ "Logo_Profil.dds";

	declare Text ColorTextYellow       = TextLib::ColorToText(Colors::GetColor("Yellow"));
	declare Text ColorTextWhite        = TextLib::ColorToText(Colors::GetColor("White"));

	declare Text BgImg = C_ImgBase ^ "ToDelete/UI Lagoon 1C.jpg";
	declare Text RemoveCross = C_ImgBase ^ "RemoveCross.dds";
	declare Text RemoveCrossOver = C_ImgBase ^ "RemoveCrossOver.dds";

	declare Text MainFont				= Font::GetFontName("Main");
	declare Text SubFont				= Font::GetFontName("SubTitle");
	declare Text MLText = """
	<framemodel id="TitleLogoPng-Model">
		<frame pos="0 0" size="55.75 23.5">
			<quad class="Style-AddLogosPng" size="64 32"/>
		</frame>
	</framemodel>

	<framemodel id="TitleCollectionPng-Model">
		<frame size="32 7.6" pos="0 -24">
			<quad class="Style-AddLogosPng" size="64 32" pos="0 24"/>
		</frame>
	</framemodel>

	<framemodel id="TitleAuthorPng-Model">
		<frame size="32 7.6" pos="32.25 -24">
			<quad class="Style-AddLogosPng" size="64 32" pos="-32.25 24"/>
		</frame>
	</framemodel>

	<framemodel id="Pack-Model">
		<quad size="90 125" z-index="-2" bgcolor="333"/>
		<frame pos="0 -40" size="90 67.5" z-index="-1">
			<quad size="120 67.5" z-index="-1" bgcolor="F00" class="Style-AddPackImage" pos="-15 0"/>
		</frame>
		<frameinstance modelid="TitleLogoPng-Model" pos="17.125 -20"/>
		<frameinstance modelid="TitleCollectionPng-Model" pos="29 20"/>
		<frameinstance modelid="TitleAuthorPng-Model" pos="18 -87"/>
	</framemodel>

	<framemodel id="Station-Model">
		<quad size="160 90" pos="0 0" z-index="-1" bgcolor="333" class="Style-AddPackImage"/>
		<frameinstance modelid="TitleLogoPng-Model" pos="52.125 -60"/>
		<frame pos="120 -40">
			<frameinstance modelid="TitleCollectionPng-Model" pos="0 0"/>
			<frameinstance modelid="TitleAuthorPng-Model" pos="-32 -8.75"/>
		</frame>
	</framemodel>

	<framemodel id="Frame_Quart_EnlargeButton">
		<quad halign="right" valign="bottom" size="{{{EnlargeButtonSize.X}}} {{{EnlargeButtonSize.Y}}}"  pos="0 0" z-index="1" opacity="1.0" bgcolor="fff"/>
		<quad halign="right" valign="top" size="{{{EnlargeButtonSize.Y}}} {{{EnlargeButtonSize.X}}}"     pos="0 {{{EnlargeButtonSize.Y}}}" z-index="1" opacity="1.0" bgcolor="fff"/>
	</framemodel>

	<framemodel id="Frame_Button">
		<quad id="Quad_Section"         halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="30 0" z-index="1" opacity="0.7" bgcolor="000" scriptevents="1" />
		<quad id="Quad_ColorPrev"		halign="left"   valign="center" size="1.8 {{{SizeYQuad}}}"  pos="{{{30+SizeXQuad/2.}}} 0" z-index="1" opacity="0.9" bgcolor="090" scriptevents="1" />
		<quad id="Quad_SectionImg"      halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="2" keepratio="Fit"/>
		<quad id="Quad_SectionImg2"     halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="3" keepratio="Fit" image="{{{C_ImgMedal}}}" hidden="1"/>
		<label id="Label_Echelon"       halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="3" text="" textfont="{{{MainFont}}}" textsize="9" />
		<label id="Label_SectionImg"	halign="center"	valign="center" size="15 15"  pos="1.5 1" z-index="3" text="0" textsize="10" textfont="{{{MainFont}}}" opacity="0"/>
		<label id="Label_Section"		halign="right"	valign="center" size="50 10" pos="67 0.8" textprefix="$t" textfont="{{{MainFont}}}" z-index="2" textsize="8" textcolor="fff"/>

		<label id="Label_Ranking"	    halign="right"	valign="top"    size="55 2" textfont="{{{SubFont}}}" text="" pos="68 -3.2" z-index="2" textsize="1.5" textcolor="fff" opacity="0"/>
		<label id="Label_Remaining"	    halign="right"	valign="center" size="55 2" textfont="{{{SubFont}}}" text="65 medals remaining" pos="13 5.4" z-index="2" textsize="2" textcolor="fff" opacity="0"/>
	</framemodel>

{{{Prompt::ManialinkFrameModels(""" halign="right" valign="center" size="51.5 2" pos="23.2 -0.9" textsize="1.14" textprefix="$t"  textfont="{{{SubFont}}}" """)}}}

	<framemodel id="Frame_New">
		<quad id="Quad_News"      halign="right" valign="center" size="{{{SizeXNew}}} {{{SizeYNew}}}"     pos="0 0" z-index="1" opacity="0.6" bgcolor="900" scriptevents="1" />
		<quad id="Quad_NewsImg"   halign="left"  valign="center" size="{{{SizeXNewImg}}} {{{SizeYNew}}}"  pos="{{{-SizeXNew}}} 0" z-index="2" opacity="1." bgcolor="000" />
		<quad id="Quad_NewImg"    halign="center" valign="center" size="15 15"  pos="1.5 0" z-index="2" opacity="1.0" bgcolor="009" style="Icons128x128_1"/>
		<label id="Label_New"     halign="left"   valign="center" textfont="{{{SubFont}}}" pos="-51.4 0.2" z-index="2" textsize="2" autonewline="1" maxline="3" size="42" textcolor="fff" text="TOURNOI01 DE ZERATOR"/>
	</framemodel>


<frame id="Frame_All" z-index="10">
	<frame id="MainScreen" scale="{{{C_ContextualMenuScale_Closed}}}" pos="{{{C_ContextualMenuPosition_Closed.X}}} {{{C_ContextualMenuPosition_Closed.Y}}}">

		<frame pos="-60.0 63.6" hidden="1">
			<quad halign="left" valign="center" size="11 0.2" pos="0 -5.17" opacity="1." bgcolor="fff"/>
			<quad halign="left" valign="center" size="1  0.4"  pos="0 -5.07" opacity="1." bgcolor="fff"/>
		</frame>

		<frame pos="-132 75">
			<quad id="Quad_Lagoon" halign="left" valign="top" size="75. 20."  pos="-22 10" z-index="2" image="{{{Logo}}}" keepratio="Fit" opacity="1."/>
			<quad id="Quad_SectionLogo" halign="center" valign="center" size="17 17"  pos="72 -5" z-index="3" opacity="1.0"/>
		</frame>

		<frame id="Frame_Home" pos="-101.3 63.6" hidden="1">
			<quad id="Quad_Home" halign="center" valign="center" size="22 5.2"  pos="8 0" opacity="0." bgcolor="000" scriptevents="1"/>
			<quad id="Quad_HomeIcon" halign="center" valign="center" size="{{{GlobalUISizeXQuad}}} {{{GlobalUISizeYQuad}}}" image="{{{C_ImgBase^IMGGlobal_Home}}}"/>
			<label halign="left"   valign="center" text="{{{//L16N Main screen
				_("Home")}}}" style="TextTitle2" textprefix="$t" pos="5 0" z-index="2" textsize="2" textcolor="fff"/>

			<quad halign="right" valign="center" size="40 0.2" pos="38.6 -5.17" opacity="1." bgcolor="fff"/>
			<quad halign="right" valign="center" size="1  0.4"  pos="38.6 -5.07" opacity="1." bgcolor="fff"/>
		</frame>

		<frame id="Frame_Back" pos="-125.9 63.6" hidden="1">
			<quad id="Quad_Back" halign="center" valign="center" size="22 5.2"  pos="8 0" opacity="0." bgcolor="000" scriptevents="1"/>
			<quad id="Quad_BackIcon" halign="center" valign="center" size="{{{GlobalUISizeXQuad}}} {{{GlobalUISizeYQuad}}}"  pos="0 0" opacity="1." image="{{{C_ImgBase^IMGGlobal_Back}}}"/>
			<label halign="left"   valign="center" text="{{{_("Back")}}}" style="TextTitle2" textprefix="$t" pos="5 0" z-index="2" textsize="2" textcolor="fff" opacity="1."/>

			<quad halign="center" valign="center" size="21 0.2" pos="8.1 -5.2" opacity="1." bgcolor="fff"/>
			<quad halign="center" valign="center" size="3 0.4"  pos="17.1 -5.1" opacity="1." bgcolor="fff"/>

			<quad halign="center" valign="center" size="{{{GlobalUISizeXQuadIcon}}} {{{GlobalUISizeYQuadIcon}}}" z-index="1" opacity="0." bgcolor="000" style="Icons128x128_1" substyle="Back"/>
		</frame>

		<frame id="Frame_Menu">
			<frame id="Frame_Header" pos="-109 35" hidden="1">
				<quad id="Quad_HeaderImg" halign="center" valign="center" size="23.0 23.0"  pos="-35 40" z-index="3" opacity="1.0" bgcolor="009" style="Icons128x128_1" substyle="Vehicles"/>
				<label id="Label_HeaderTitle"  halign="left" valign="center" style="TextTitle1" pos="-19 42" z-index="2" textsize="13" textcolor="fff" opacity="1."/>
				<label id="Label_HeaderSubTitle"  halign="left" valign="center" style="TextTitle1" pos="-24 36" z-index="2" textsize="2" textcolor="fff" opacity="0."/>
			</frame>

			<frame id="Frame_Profile" pos="143 82.0" z-index="1">
				<quad id="Quad_LogoProfil" halign="center" valign="center" pos="-8.2 0" size="{{{C_SizeProfil.Y/1.4}}} {{{C_SizeProfil.Y/1.4}}}" z-index="1"  opacity="1.0" image="{{{IMGLogo_Profil}}}" hidden="0"/>
				<quad id="Quad_Profile"   halign="center" valign="center" size="{{{C_SizeProfil.X}}} {{{C_SizeProfil.Y}}}" opacity="0." bgcolor="000" scriptevents="1"/>
				<label id="Label_Profile" halign="center" valign="center" pos="2.2 0" textfont="{{{SubFont}}}" z-index="1" textsize="2" textcolor="fff" textprefix="$t" text="{{{//L16N Noun, on the main menu, designates the options to modify the player's description
			_("Profile")
			}}}"/>
				<frame id="Frame_MouseOver" z-index="2" hidden="1">
					<quad id="Quad_Up"		halign="center"	valign="top"	size="{{{C_SizeProfil.X}}} 0.4" pos="0 {{{C_SizeProfil.Y/2.}}}"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Down"	halign="center"	valign="bottom"	size="{{{C_SizeProfil.X}}} 0.4" pos="0 -{{{C_SizeProfil.Y/2.}}}"	opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Left"	halign="left"	valign="center"	size="0.4 {{{C_SizeProfil.Y}}}" pos="-{{{C_SizeProfil.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Right"	halign="right"	valign="center"	size="0.4 {{{C_SizeProfil.Y}}}" pos="{{{C_SizeProfil.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>
				</frame>
				<frame pos="{{{C_SizeProfil.X/2.}}} {{{-C_SizeProfil.Y/2.-1.8}}}">
					<quad halign="right" valign="top"    size="{{{C_SizeProfil.X}}} 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="3  0.2" pos="0 0"              opacity="1." bgcolor="fff"/>
				</frame>
			</frame>

			<frame id="Frame_ManiaCredit" pos="139.3 -79.3" z-index="1" hidden="1">
				<quad id="Quad_ManiaCredit"   halign="center" valign="center" size="{{{C_SizeManiaCredit.X}}} {{{C_SizeManiaCredit.Y}}}" opacity="0.7" bgcolor="000" scriptevents="1" />
				<label id="Label_ManiaCredit" halign="center" valign="center" textfont="{{{SubFont}}}" z-index="1" textsize="2" textcolor="fff" textprefix="$t" text="{{{//L16N Noun, on the main menu, specific term for the staff roll
			_("Maniacredits")
			}}}"/>
				<frame id="Frame_MouseOver" z-index="2" hidden="1">
					<quad id="Quad_Up"		halign="center"	valign="top"	size="{{{C_SizeManiaCredit.X}}} 0.4" pos="0 {{{C_SizeManiaCredit.Y/2.}}}"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Down"	halign="center"	valign="bottom"	size="{{{C_SizeManiaCredit.X}}} 0.4" pos="0 -{{{C_SizeManiaCredit.Y/2.}}}"	opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Left"	halign="left"	valign="center"	size="0.4 {{{C_SizeManiaCredit.Y}}}" pos="-{{{C_SizeManiaCredit.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>
					<quad id="Quad_Right"	halign="right"	valign="center"	size="0.4 {{{C_SizeManiaCredit.Y}}}" pos="{{{C_SizeManiaCredit.X/2.}}} 0"		opacity="0.8" bgcolor="fff"/>

				</frame>
				<frame pos="{{{C_SizeManiaCredit.X/2.}}} {{{-C_SizeManiaCredit.Y/2.-1.8}}}">
					<quad halign="right" valign="top"    size="{{{C_SizeManiaCredit.X}}} 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="3  0.2" pos="0 0"              opacity="1." bgcolor="fff"/>
				</frame>
			</frame>

	""";
	for(I,0,Count_InstancesY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstQuad - IndexY*SizeYQuad - IndexY*MarginY_Button*1.;
		for(J,0,Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstQuad + IndexX*SizeXQuad + IndexX*MarginX_Button*1.;
			MLText^="""
			<frame id="Frame_ButtonAnim{{{I}}}">
				<frameinstance modelid="Frame_Button" pos="{{{PosnX}}} {{{PosnY}}}" z-index="5" id="Frame_Instance2{{{I}}}{{{J}}}" hidden="1"/>

				<frame id="Frame_Rank{{{I}}}" pos="{{{PosnX + 44.}}} {{{PosnY - 11.8}}}" z-index="6">
					{{{Prompt::ManialinkMainBody("Rank" ^ I)}}}
				</frame>
				
			</frame>
			""";
		}
	}
	MLText^="""
			<frame id="Frame_Habillage">
				<frame id="Habillage_Menu_Up" pos="-77  38.5">
					<quad halign="right" valign="center" size="2.2 0.7" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="0.7 2.2" opacity="1." bgcolor="fff"/>
				</frame>
				<frame id="Habillage_Menu_Down" pos="8.5  -43.79">
					<quad halign="right" valign="top" size="85 0.2" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="6  0.2" pos="0 0" opacity="1." bgcolor="fff"/>
				</frame>
			</frame>

			<frame id="Frame_News" pos="0 0">
				<frame id="Frame_Title" pos="{{{PosXFirstNew - SizeXNew}}} 13.7">
					<quad halign="center" valign="top" size="1.2  13.2" pos="-3.9 0.2" opacity="1." bgcolor="fff"/>
					<label id="Label_Title"  halign="left"   valign="top" textprefix="$t" text="{{{//L16N Noun, in the main menu, designates all the articles written by players and makers of the game to give info about updates and competitions, over "Community"
						_("Flash")}}}" textfont="{{{MainFont}}}"       pos="0 2"  z-index="5" textsize="12" textcolor="fff" textemboss="1"/>
					<label id="Label_Title2" halign="left"   valign="top" textprefix="$t" text="{{{//L16N Noun, in the main menu, represents all the players contributing to this game, under "News"
						_("Community")}}}" textfont="{{{MainFont}}}" pos="0 -9" z-index="5" textsize="7" textcolor="fff" textemboss="1"/>
					<quad halign="right" valign="top"    size="73.8 0.2" pos="{{{SizeXNew}}} -67.9" opacity="1." bgcolor="fff"/>
					<quad halign="right" valign="bottom" size="7  0.2"   pos="{{{SizeXNew}}} -67.9" opacity="1." bgcolor="fff"/>
				</frame>
	""";
	for(I,0,Count_InstancesNewY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstNew - IndexY*SizeYNew - IndexY*MarginY_New*1.;
		for(J,0,Count_InstancesNewX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstNew + IndexX*SizeXNew + IndexX*MarginX_New*1.;
			MLText^="""
				<frame id="Frame_NewAnim{{{I}}}">
					<frameinstance modelid="Frame_New" pos="{{{PosnX}}} {{{PosnY}}}" z-index="5" id="Frame_New{{{I}}}" hidden="0"/>
				</frame>
			""";
		}
	}
	MLText^="""
			</frame>
		</frame>
		<frame id="Frame_Close" pos="160 -90" hidden="1">
			<quad id="Quad_Close" halign="right" valign="bottom" size="65 13.1" opacity="1." bgcolor="333" scriptevents="1"/>
			<label id="Label_Preview" textprefix="$t" text="{{{//L16N |Verb, infinitive| On the style menu, the option to stop the preview
			_("Close")
			}}}" textcolor="fff" textfont="{{{MainFont}}}" textsize="10." size="40 4" pos="-3 1" z-index="2" halign="right" valign="bottom"/>
			<quad id="Quad_CloseIMG" image="{{{RemoveCross}}}" halign="right" valign="bottom" size="8 8" pos="-55 2.6" z-index="3" colorize="ddd"/>
		</frame>
		<quad id="FG" pos="-160 90" size="320 180" scriptevents="1" z-index="20"/>
		<quad id="BgQuad" pos="-160 90" size="320 180" scriptevents="1" bgcolor="EEE"/>
		<quad id="SecondBgQuad" pos="-160 90" size="320 180" z-index="-1" scriptevents="1" bgcolor="000" opacity="0.6"/>
		<quad id="BgBg" pos="{{{-160-(BgContour/2.)}}} {{{90+(BgContour/2.)}}}" size="{{{320+BgContour}}} {{{180+BgContour}}}" bgcolor="333" scriptevents="1"/>
		<quad id="Quad_Preview" halign="right" valign="top" size="65 13.1" pos="{{{160+(BgContour/2.)}}} {{{-90-(BgContour/2.)}}}" opacity="1." bgcolor="333" scriptevents="1"/>
		<label id="Label_Preview" textprefix="$t" text="{{{//L16N On the style menu, the option to have a first view of the menu before it is made
			_("|Noun|Preview")
			}}}" textcolor="fff" textfont="{{{MainFont}}}" textsize="10." size="40" pos="157 -96.5" z-index="2" halign="right" valign="center"/>

		<frame id="Frame_EnlargeButton" pos="113.7  -93.8" z-index="1">
			<frame id="TopRight" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="0 0"        z-index="0" id="Frame_TopRight" rot="0"/>
			</frame>
			<frame id="BotRight" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="-1.3 -8.3"  z-index="0" id="Frame_BotRight" rot="90"/>
			</frame>
			<frame id="BotLeft" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="-12.3 -7.3" z-index="0" id="Frame_BotLeft" rot="180"/>
			</frame>
			<frame id="TopLeft" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="-11 1.0"    z-index="0" id="Frame_TopLeft" rot="270"/>
			</frame>
		</frame>
		<frame rot="180" pos="-161.5 -103.6">
			<quad halign="right" valign="bottom" size="{{{EnlargeButtonSize.X}}} {{{EnlargeButtonSize.Y}}}"  pos="0 0" z-index="1" opacity="1.0" bgcolor="333"/>
			<quad halign="right" valign="top" size="{{{EnlargeButtonSize.Y}}} {{{EnlargeButtonSize.X}}}"     pos="0 {{{EnlargeButtonSize.Y}}}" z-index="1" opacity="1.0" bgcolor="333"/>
		</frame>

	</frame>
	<frame id="StationScreen" pos="{{{C_ContextualStationPosition_Closed.X}}} {{{C_ContextualStationPosition_Closed.Y}}}" scale="{{{C_ContextualStationScale_Closed}}}">
		<frame id="Frame_GlobalUIAll" z-index="20" hidden="0">

			<frameinstance modelid="Station-Model" pos="-150 45"/>
			<frameinstance modelid="Pack-Model" pos="40 60"/>
			<frame pos="-60.0 63.6" hidden="1">
				<quad halign="left" valign="center" size="11 0.2" pos="0 -5.17" opacity="1." bgcolor="fff"/>
				<quad halign="left" valign="center" size="1  0.4"  pos="0 -5.07" opacity="1." bgcolor="fff"/>
			</frame>
		</frame>

		<frame id="Frame_Close" pos="160 -90" hidden="1">
			<quad id="Quad_Close" halign="right" valign="bottom" size="65 13.1" opacity="1." bgcolor="333" scriptevents="1"/>
			<label id="Label_Preview" textprefix="$t" text="{{{//L16N |Verb, infinitive| On the style menu, the option to stop the preview
			_("Close")
			}}}" textcolor="fff" textfont="{{{MainFont}}}" textsize="10." size="40 4" pos="-3 1" z-index="2" halign="right" valign="bottom"/>
			<quad id="Quad_CloseIMG" image="{{{RemoveCross}}}" halign="right" valign="bottom" size="8 8" pos="-55 2.6" z-index="3" colorize="ddd"/>
		</frame>
		<quad id="FG" pos="-160 90" size="320 180" scriptevents="1" z-index="20"/>
		<quad id="BgQuad" pos="-160 90" size="320 180" scriptevents="1" bgcolor="BBB"/>
		<quad id="SecondBgQuad" pos="-160 90" size="320 180" z-index="-1" scriptevents="1" bgcolor="000" opacity="0.6"/>
		<quad id="BgBg" pos="{{{-160-(BgContour/2.)}}} {{{90+(BgContour/2.)}}}" size="{{{320+BgContour}}} {{{180+BgContour}}}" bgcolor="333" scriptevents="1"/>
		<quad id="Quad_Preview" halign="right" valign="top" size="65 13.1" pos="{{{160+(BgContour/2.)}}} {{{-90-(BgContour/2.)}}}" opacity="1." bgcolor="333" scriptevents="1"/>
		<label id="Label_Preview" textprefix="$t" text="{{{//L16N Noun, the way the game is displayed in the station, opposite of "unboxing"
			_("Packaging")
			}}}" textcolor="fff" textfont="{{{MainFont}}}" textsize="10." size="40" pos="157 -96.5" z-index="2" halign="right" valign="center"/>

		<frame id="Frame_EnlargeButton" pos="113.7  -93.8" z-index="1">
			<frame id="TopRight" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="0 0"        z-index="0" id="Frame_TopRight" rot="0"/>
			</frame>
			<frame id="BotRight" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="-1.3 -8.3"  z-index="0" id="Frame_BotRight" rot="90"/>
			</frame>
			<frame id="BotLeft" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="-12.3 -7.3" z-index="0" id="Frame_BotLeft" rot="180"/>
			</frame>
			<frame id="TopLeft" pos="0 0">
				<frameinstance modelid="Frame_Quart_EnlargeButton" pos="-11 1.0"    z-index="0" id="Frame_TopLeft" rot="270"/>
			</frame>
		</frame>
	</frame>
	<quad id="ShadowBg" bgcolor="000" opacity="0.0" z-index="-1" pos="-160 90" size="320 180" scriptevents="1" hidden="1"/>
</frame>
	""";

	return MLText;
}


Text Inject_Includes()
{
	declare Text[Text] IMGLogos
		= ["Solo"			=> C_LogoImgBase ^ "Logo_Solo.dds",
			"Multiplayer"	=> C_LogoImgBase ^ "Logo_Online.dds",
			"LocalPlay"		=> "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_LocalPlay.dds",
			"Editors"		=> "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Logo_Editor.dds"];
	declare Text MLText = """
		#Include "MathLib" as StylePreview_MathLib
{{{Prompt::Includes()}}}
		#Const C_NotFixedLogoSections	{{{dump(C_NotFixedLogoSections)}}}
		#Const C_SectionLocalizedNames	{{{dump(C_SectionLocalizedNames)}}}
		#Const C_IMGLogos				{{{dump(IMGLogos)}}}
		#Const C_ColorMedals			["Author" => {{{Colors::GetColor("GreenMaster")}}} , "Gold" =>  {{{Colors::GetColor("GoldShiny")}}} , "Silver" =>  {{{Colors::GetColor("SilverShiny")}}},
										"Bronze" =>  {{{Colors::GetColor("BronzeShiny")}}} , "NoMedal" => <0., 0., 0.>]

		#Const ShadowBgOpacityMax 0.9
		#Const ShadowBgOpacityMin 0.
	""";
	return MLText;
}

Text Inject_Declare()
{
	declare Text MLText = """
	{{{Prompt::Declares()}}}
		declare Integer G_SectionFocus;
		declare CVideo G_BgVideo;
		declare Text G_BgVideoUrl;
		declare Text G_BgImageUrl;
		declare Text G_TitleLogoUrl;
		declare Text G_StationsLogosPng;
		declare Text G_StationPackImageJpg;
		declare Boolean G_IsInBigMode;
		declare Boolean G_IsInTransition;
		declare Boolean G_IsOverMiniThumbnail;
		declare Text	G_FocusedBigScreen;
		declare Vec3    G_Private_MenuButtons_SectionColor;


	""";
	return MLText;
}

Text Inject_Functions()
{
	declare Text    IMGEchelonBase           = "file://Media/Manialinks/Common/Echelons/echelon";
	declare Text MLText = """
	//<script>
		Void RefreshPage(Boolean _RefreshVideo)
		{
			declare BgQuad <=> (Page.GetFirstChild("BgQuad") as CMlQuad);
			if (_RefreshVideo) {
				if (G_BgVideo != Null) {
					Video.DestroyVideo(G_BgVideo);
					G_BgVideo = Null;
					BgQuad.Image = Null;
				}
				if (G_BgVideoUrl != "") {
					G_BgVideo = Video.CreateVideo(G_BgVideoUrl, True, True);
					BgQuad.Image = G_BgVideo.Image;
				}
				if (G_BgImageUrl != "") {
					BgQuad.ChangeImageUrl(G_BgImageUrl);
				}
			} else if (G_BgVideo != Null) {
				G_BgVideo.Stop();
			}
			if (G_BgVideo != Null) {
				G_BgVideo.Play();
			}
			Page.GetClassChildren("Style-AddLogosPng", Page.MainFrame, True);
			foreach(ImageAsControl in Page.GetClassChildren_Result) {
				declare Image <=> (ImageAsControl as CMlQuad);
				Image.ChangeImageUrl(G_StationsLogosPng);
			}
			Page.GetClassChildren("Style-AddPackImage", Page.MainFrame, True);
			foreach(ImageAsControl in Page.GetClassChildren_Result) {
				declare Image <=> (ImageAsControl as CMlQuad);
				Image.ChangeImageUrl(G_StationPackImageJpg);
			}
			(Page.GetFirstChild("Quad_Lagoon") as CMlQuad).ChangeImageUrl(G_TitleLogoUrl);

		}

		Void ShowPagePreview()
		{
			SendCustomEvent("GetSectionsHack", ["LBStyle"]);
			RefreshPage(True);
			Page.GetFirstChild("Frame_All").Visible = True;
		}

		Void SetNewsPositionY(Real _PosY)
		{
			declare CMlFrame Frame_News <=> (Page.MainFrame.GetFirstChild("Frame_News")	as CMlFrame);
			LibManialink_SetTargetPosition(Frame_News, <Frame_News.RelativePosition.X, _PosY>);
			LibManialink_PresetAnim(Frame_News, 600, "EaseOutCubic");
		}

		Void UpdateFocusLight(Text _FrameId)
		{
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild(_FrameId)	as CMlFrame);
			if (Frames_Instance == Null) {
				return;
			}
			declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
		
			declare Real Pourcentage = (ML::Sin(Now * 0.01) * 0.5 +0.5);
			if(G_Private_MenuButtons_SectionColor.X > 0.8 && G_Private_MenuButtons_SectionColor.Y > 0.8 && G_Private_MenuButtons_SectionColor.Z > 0.8)
			{
				G_Private_MenuButtons_SectionColor.X -= 0.3;
				G_Private_MenuButtons_SectionColor.Y -= 0.3;
				G_Private_MenuButtons_SectionColor.Z -= 0.3;
			}
			declare Real LabelColor_X       = 1.0 - Pourcentage * (1. - G_Private_MenuButtons_SectionColor.X);
			declare Real LabelColor_Y       = 1.0 - Pourcentage * (1. - G_Private_MenuButtons_SectionColor.Y);
			declare Real LabelColor_Z       = 1.0 - Pourcentage * (1. - G_Private_MenuButtons_SectionColor.Z);
			Label_Section.TextColor = <LabelColor_X, LabelColor_Y, LabelColor_Z>;

			//LibManialink_Anim(Label_Section, "<label scale=\"1.05\"/> ", 50, "EaseLinear");
		}

		Void UpdateFocusLight()
		{
			UpdateFocusLight("Frame_Instance2"^G_SectionFocus^"0");
		}

		Void UnlightFocus()
		{
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance2"^G_SectionFocus^"0")	as CMlFrame);
			if (Frames_Instance == Null) {
				return;
			}
			declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
			Label_Section.TextColor = <1., 1., 1.>;
			//Label_Section.Hide();
			//LibManialink_Anim(Label_Section, "<label scale=\"1.0\"/> ", 50, "EaseLinear");
		}
		
		Void Enlarge(Text _FocusedBigScreen)
		{
			if (G_IsInBigMode || G_IsInTransition) {
				log(Now ^ ") Warning : Already in big mode");
			}
			if (G_BgVideo != Null) {
				G_BgVideo.Pause();
			}

			declare MainScreen <=> (Page.GetFirstChild(_FocusedBigScreen) as CMlFrame);
			if (_FocusedBigScreen == "MainScreen") {
				Page.GetFirstChild("StationScreen").Hide();
			} else {
				Page.GetFirstChild("MainScreen").Hide();
			}
			declare CMlFrame Frame_Close <=> (MainScreen.GetFirstChild("Frame_Close")	as CMlFrame);
			Frame_Close.Show();
			declare ShadowBg   <=> (Page.GetFirstChild("ShadowBg") as CMlQuad);
			declare Integer TimeTransition = 500;
			LibManialink_SetTargetOpacity(ShadowBg, ShadowBgOpacityMax);
			LibManialink_PresetAnim(ShadowBg, TimeTransition, "EaseOutCubic");
			LibManialink_SetTargetScale(MainScreen, {{{C_ContextualMenuScale_Open}}});
			LibManialink_SetTargetPosition(MainScreen, <0.,0.>);
			LibManialink_PresetAnim(MainScreen, TimeTransition, "EaseOutCubic");

			//MainScreen.RelativeScale       = 0.8;
			//MainScreen.RelativePosition_V3 = <0., 0.>;
			G_IsInTransition = True;
			G_FocusedBigScreen = _FocusedBigScreen;
		}

		Void Shrink()
		{
			if (!G_IsInBigMode || G_IsInTransition) {
				log(Now ^ ") Warning : Already in small mode");
			}
			declare MainScreen <=> (Page.GetFirstChild(G_FocusedBigScreen) as CMlFrame);
			declare ShadowBg   <=> (Page.GetFirstChild("ShadowBg") as CMlQuad);
			declare CMlFrame Frame_Close <=> (MainScreen.GetFirstChild("Frame_Close")	as CMlFrame);
			Frame_Close.Hide();
			declare Integer TimeTransition = 500;
			LibManialink_SetTargetOpacity(ShadowBg, ShadowBgOpacityMin);
			LibManialink_PresetAnim(ShadowBg, TimeTransition, "EaseOutCubic");
			if (G_FocusedBigScreen == "StationScreen") {
				LibManialink_SetTargetScale(MainScreen,  {{{C_ContextualStationScale_Closed}}});
				LibManialink_SetTargetPosition(MainScreen,  <{{{C_ContextualStationPosition_Closed.X}}}, {{{C_ContextualStationPosition_Closed.Y}}}>);
			} else {
				LibManialink_SetTargetScale(MainScreen,  {{{C_ContextualMenuScale_Closed}}});
				LibManialink_SetTargetPosition(MainScreen,  <{{{C_ContextualMenuPosition_Closed.X}}}, {{{C_ContextualMenuPosition_Closed.Y}}}>);
			}

			LibManialink_PresetAnim(MainScreen, TimeTransition, "EaseOutCubic");

			G_IsInTransition = True;
			SendCustomEvent("StyleMusicStop", Text[]);

			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_New <=> (Page.MainFrame.GetFirstChild("Frame_New"^I)	as CMlFrame);
				declare CMlQuad  Quad_News  <=> (Frame_New.GetFirstChild("Quad_News")	as CMlQuad);
				Quad_News.Opacity = 0.6;
			}
			UnlightFocus();
			G_SectionFocus = -1;
			//UpdateFocusLight("Frame_Instance2"^G_SectionFocus^"0");
		}

		Void AnimColor()
		{
			/*
			declare CMlQuad Quad_Color0     <=> (Page.MainFrame.GetFirstChild("Quad_Color0")	as CMlQuad);
			Quad_Color0.BgColor= <1.,1.,0.>;
			Quad_Color0.Size = <1.,0.>;
			LibManialink_SetTargetSize(Quad_Color0, <1., 17.>);
			LibManialink_PresetAnim(Quad_Color0, 500, "EaseOutCubic");
			*/
		}
		
		Void SetNewsColor(Text _Color, Boolean _IsAnim)
		{
			declare CMlFrame Frame_News <=> (Page.MainFrame.GetFirstChild("Frame_News")	as CMlFrame);
			declare Vec3 TextToColor = TextLib::ToColor(_Color);
			declare Integer DecaleTime;
			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_New <=> (Page.MainFrame.GetFirstChild("Frame_New"^I)	as CMlFrame);
				declare CMlQuad  Quad_News  <=> (Frame_New.GetFirstChild("Quad_News")	as CMlQuad);
				//Quad_News.BgColor = TextToColor;
				if(_IsAnim)
				{
					LibManialink_SetTargetBgColor(Quad_News, TextToColor);
					LibManialink_PresetAnimInsert(Quad_News, DecaleTime, 400, "EaseOutSine");
				}
				else
				{
					Quad_News.BgColor = TextToColor;
				}
				DecaleTime += 25;
				
			}
			declare Vec3      Page_News_Color   for Page;
			Page_News_Color = TextToColor;
			SendCustomEvent("SetNewsColor", [_Color]);
		}

		Void SetNewsColor(Text _Color)
		{
			SetNewsColor(_Color, True);

		}

		Void SetSectionColor(Integer _Index, Vec3 _Color, Text _TextColor, Boolean IsAnim)
		{
			declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance2"^_Index^"0")	as CMlFrame);
			if(Frames_Instance == Null) return;
			declare CMlQuad  Quad_ColorPrev  <=> (Frames_Instance.GetFirstChild("Quad_ColorPrev")	as CMlQuad);
			
			declare Vec3 TextToColor = TextLib::ToColor(_TextColor);

			if(IsAnim)
			{
				LibManialink_AnimStop(Quad_ColorPrev);
				LibManialink_SetTargetBgColor(Quad_ColorPrev, TextToColor);
				LibManialink_PresetAnim(Quad_ColorPrev, 400, "EaseOutSine");
			}
			else
			{
				Quad_ColorPrev.BgColor = _Color;
			}

			declare Vec3[] Page_Section_Colors	 for Page;
			declare Integer[] Page_ActiveSections for Page;
			declare Integer FinalIndex = Page_ActiveSections[_Index];
			Page_Section_Colors[FinalIndex] = TextToColor;
			G_Private_MenuButtons_SectionColor = TextToColor;
			
			SendCustomEvent("SetSectionColor", [_Index^"", _TextColor]);
		}
		
		Void SetSectionColor(Integer _Index, Vec3 _Color, Boolean IsAnim)
		{
			declare Text ColorToText = TextLib::ColorToText(_Color);
			SetSectionColor(_Index, _Color, ColorToText, IsAnim);

		}


		Void SetSectionColor(Integer _Index, Text _TextColor, Boolean IsAnim)
		{
			declare Vec3 Color = TextLib::ToColor(_TextColor);
			SetSectionColor(_Index, Color, _TextColor, IsAnim);
		}


		Void HidePagePreview()
		{
			Page.GetFirstChild("Frame_All").Visible = False;
		}

		Void EnlargeButton_Over(CMlControl _Control)
		{
			//Frame_TopRight
			declare Text[] Vertical = ["Top", "Bot"];
			declare Text[] Horizon = ["Right", "Left"];
			for(I, 0, Vertical.count -1)
			{
				for(J, 0, Horizon.count -1)
				{
					//log("Frame_"^Vertical[I]^Horizon[J]);
					declare CMlFrame Frames_Instance <=> (_Control.Parent.GetFirstChild(Vertical[I]^Horizon[J])	as CMlFrame);
					declare Real PosY = 0.5;
					declare Real PosX = 0.5;
					if(I == 1) PosY *= -1.;
					if(J == 1) PosX *= -1.;
					LibManialink_SetTargetPosition(Frames_Instance, <PosX, PosY>);
					LibManialink_PresetAnim(Frames_Instance, 60, "EaseLinear");
				}
			}
		}

		Void EnlargeButton_Out(CMlControl _Control)
		{
			declare Text[] Vertical = ["Top", "Bot"];
			declare Text[] Horizon = ["Right", "Left"];
			for(I, 0, Vertical.count -1)
			{
				for(J, 0, Horizon.count -1)
				{
					declare CMlFrame Frames_Instance <=> (_Control.Parent.GetFirstChild(Vertical[I]^Horizon[J])	as CMlFrame);
					declare Real PosX = 0.;
					declare Real PosY = 0.;
					LibManialink_SetTargetPosition(Frames_Instance, <PosX, PosY>);
					LibManialink_PresetAnim(Frames_Instance, 50, "EaseLinear");
				}
			}

		}

		Text[] FakeRanking()
		{
			declare Text[] Result;
			declare Text[] PlayerZones	= TextLib::Split("|", LocalUser.ZonePath);
			declare Integer MaxRank		= StylePreview_MathLib::Rand(15000, 100000);
			declare Integer PrevMaxRank	= MaxRank;
			declare Integer PlayerRank	= StylePreview_MathLib::Rand(1, MaxRank);
			declare Integer PrevPlayRank = PlayerRank;
			if (PlayerZones.count == 0) {
				for(I, 1, 4) {
					Result.add(TextLib::GetTranslatedText("Zones") ^ " " ^ I ^ " > " ^ PlayerRank ^ " / " ^ MaxRank);
					MaxRank		= StylePreview_MathLib::Rand(1, MaxRank);
					// PlayerRank	= StylePreview_MathLib::Rand(, PlayerRank);
					PlayerRank	= StylePreview_MathLib::Rand(1, PlayerRank);
				}
			} else {
				foreach(Zone in PlayerZones) {
					Result.add(Zone ^ " > " ^ PlayerRank ^ " / " ^ MaxRank);
					MaxRank		= StylePreview_MathLib::Rand(1, MaxRank);
					// PlayerRank	= StylePreview_MathLib::Rand(MaxRank - PrevMaxRank + PlayerRank, PlayerRank);
					PlayerRank	= StylePreview_MathLib::Rand(1, PlayerRank);
					if (PlayerRank < MaxRank - PrevMaxRank + PrevPlayRank)
						PlayerRank = MaxRank - PrevMaxRank + PrevPlayRank;
				}
			}
			return Result;
		}

		Text RandomMedal()
		{
			declare Text[] AllMedals = ["NoMedal", "Bronze", "Silver", "Gold"];
			return AllMedals[StylePreview_MathLib::Rand(0, AllMedals.count - 1)];
		}

		Text RandomScore()
		{
			declare Text[] AllScores;
			for(I, 0, 9)
				AllScores.add(TextLib::ToText(I));
			return AllScores[StylePreview_MathLib::Rand(0, AllScores.count - 1)];
		}

		CMlFrame FrameInstanceForRanking(Text _RankingName)
		{
			declare Text[] Sections_Name           for Page;
			declare Integer[] Page_ActiveSections for Page;

			for(I, 0, Sections_Name.count - 1)
			{
				if (!Page_ActiveSections.existskey(I)) {
					continue;
				}
				if (Sections_Name[Page_ActiveSections[I]] == _RankingName) {
					return (Page.GetFirstChild("Frame_Instance2"^Page_ActiveSections[I]^"0") as CMlFrame);
				}
			}
			return Null;
		}

		Void StylePreview_SetSection()
		{
			declare Text[] Sections_Name         for Page;
			declare Text[] Sections_QuadSubstyle for Page;
			declare Text[Text] LabelPolices      for Page;
			declare Vec3[] Page_Section_Colors	 for Page;
			declare Integer[] Page_ActiveSections for Page;
			declare Vec3	Page_News_Color		for Page;

			for (I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance2"^I^"0")	as CMlFrame);
				declare Multiplayer_Label_Echelon		<=> (Frames_Instance.GetFirstChild("Label_Echelon") as CMlLabel);
				Multiplayer_Label_Echelon.Opacity = 0.;
				if(Page_ActiveSections.existskey(I))
				{
					declare Integer ActiveIndex = Page_ActiveSections[I];
					Frames_Instance.Show();
					declare CMlQuad  Quad_ColorPrev  <=> (Frames_Instance.GetFirstChild("Quad_ColorPrev")	as CMlQuad);
					declare CMlLabel Label_Section     <=> (Frames_Instance.GetFirstChild("Label_Section")	as CMlLabel);
					Frames_Instance.Show();
					Label_Section.SetText(C_SectionLocalizedNames[Sections_Name[ActiveIndex]]);

					if (C_NotFixedLogoSections.exists(Sections_Name[ActiveIndex])) {
						Prompt_Update("Rank" ^ ActiveIndex, FakeRanking());
					} else {
						Prompt_Hide("Rank" ^ I);
					}

					declare CMlQuad Quad_SectionImg  <=> (Frames_Instance.GetFirstChild("Quad_SectionImg")	as CMlQuad);
					Quad_SectionImg.ChangeImageUrl(C_IMGLogos[Sections_Name[ActiveIndex]]);
					Label_Section.Style = LabelPolices["SectionsPolice"];
					Quad_SectionImg.Colorize = <0.9, 0.9, 0.9>;

					Quad_ColorPrev.BgColor = Page_Section_Colors[ActiveIndex];
				}
				else Frames_Instance.Hide();
			}

			declare Solo_FrameInstance			<=> FrameInstanceForRanking("Solo");
			if (Solo_FrameInstance != Null) {
				declare Solo_Medal_Ranking				<=> (Solo_FrameInstance.GetFirstChild("Quad_SectionImg") as CMlQuad);
				declare Solo_Medal_Ranking2				<=> (Solo_FrameInstance.GetFirstChild("Quad_SectionImg2") as CMlQuad);

				declare Ranking_PromotionMedal = RandomMedal();
				Solo_Medal_Ranking.ChangeImageUrl({{{dump(C_ImgMedalBG)}}});
				if (Ranking_PromotionMedal != "NoMedal") {
					Solo_Medal_Ranking2.Colorize = C_ColorMedals[Ranking_PromotionMedal];
				}
				Solo_Medal_Ranking2.Show();
				Solo_Medal_Ranking2.Opacity = 0.8;
			} else {
				declare Solo_Medal_Ranking2				<=> (Page.GetFirstChild("Quad_SectionImg2") as CMlQuad);
				Solo_Medal_Ranking2.Hide();
			}
			declare Multiplayer_FrameInstance	<=> FrameInstanceForRanking("Multiplayer");
			if (Multiplayer_FrameInstance != Null) {
				declare ZoneScore = RandomScore();
				declare Multiplayer_Medal_Ranking		<=> (Multiplayer_FrameInstance.GetFirstChild("Quad_SectionImg") as CMlQuad);
				declare Multiplayer_Label_Echelon		<=> (Multiplayer_FrameInstance.GetFirstChild("Label_Echelon") as CMlLabel);
				Multiplayer_Medal_Ranking.ChangeImageUrl("{{{IMGEchelonBase}}}" ^ ZoneScore ^ ".dds");
				Multiplayer_Label_Echelon.Opacity = 1.;
				Multiplayer_Label_Echelon.SetText(""^ZoneScore);
				Multiplayer_Medal_Ranking.Colorize = <0., 0., 0.>;
				Multiplayer_Medal_Ranking.ModulateColor = <1., 1., 1.>;
			}

			SetNewsColor(TextLib::ColorToText(Page_News_Color), False);

			declare CMlFrame Habillage_Menu_Down <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Down")	as CMlFrame);
			declare CMlFrame Habillage_Menu_Up <=> (Page.MainFrame.GetFirstChild("Habillage_Menu_Up")	as CMlFrame);
			if(Page_ActiveSections.count > 0)
			{
				Habillage_Menu_Down.Show();
				Habillage_Menu_Up.Show();
				Habillage_Menu_Down.RelativePosition.Y = 36.4 - Page_ActiveSections.count * ({{{SizeYQuad}}} + {{{MarginY_Button}}});
			}
			else
			{
				Habillage_Menu_Down.Hide();
				Habillage_Menu_Up.Hide();
			}
		}
		



		Void UpdatePreviewFocusLight()
		{
			declare CMlLabel Label_Section     <=> (Page.GetFirstChild("Label_Preview")	as CMlLabel);

			declare Real ButtonSelectedSinVar_L  = StylePreview_MathLib::Sin(Now * 0.01) * 0.3 + 0.7;
			declare Real ButtonSelected_L        = 0.0 + ButtonSelectedSinVar_L * 1.;
			Label_Section.TextColor = <ButtonSelectedSinVar_L, ButtonSelectedSinVar_L, ButtonSelectedSinVar_L>;
		}


		Void UnlightPreviewFocus()
		{
			declare CMlLabel Label_Section     <=> (Page.GetFirstChild("Label_Preview")	as CMlLabel);

			Label_Section.TextColor = <1., 1., 1.>;
		}

		Void InitPreview()
		{
			G_BgVideoUrl = "";
			G_BgImageUrl = "";
			G_BgVideo = Null;
			G_TitleLogoUrl = "";
			G_IsInTransition = False;
			G_IsInBigMode = False;
			G_FocusedBigScreen = "";
			G_IsOverMiniThumbnail = False;
			declare Text[]  SectionStyle             = ["Icons128x128_1", "Icons128x128_1", "Icons128x128_1", "Icons128x128_1", "Icons128x128_1"];
			declare Text[]  SectionSubstyle          = ["Solo", "Multiplayer", "Hotseat", "Editor", "Profile"];

			G_SectionFocus = -1;
			for(I, 0, {{{Count_InstancesY - 1}}})
			{
				declare CMlFrame Frames_Instance <=> (Page.MainFrame.GetFirstChild("Frame_Instance2"^I^"0")	as CMlFrame);
				declare CMlQuad Quad_Section     <=> (Frames_Instance.GetFirstChild("Quad_Section")	as CMlQuad);
				declare CMlQuad Quad_SectionImg  <=> (Frames_Instance.GetFirstChild("Quad_SectionImg")	as CMlQuad);
				declare Integer QuadId for Quad_Section;
				QuadId = I;

				if(SectionStyle.existskey(I))
				{
					Quad_SectionImg.Style    = SectionStyle[I];
					Quad_SectionImg.Substyle = SectionSubstyle[I];
				}
			}

			for(I, 0, {{{Count_InstancesNewY - 1}}})
			{
				declare CMlFrame Frame_New <=> (Page.MainFrame.GetFirstChild("Frame_New"^I)	as CMlFrame);
				declare CMlLabel Label_New  <=> (Frame_New.GetFirstChild("Label_New")	as CMlLabel);
				Label_New.SetText(TextLib::Compose("%1 %2", _("Flash"), "0"^(I+1)));

			}

			declare Text[Text] LabelPolices      for Page;
			declare CMlQuad  Quad_HeaderImg       <=> (Page.GetFirstChild("Quad_HeaderImg")	        as CMlQuad);
			Quad_HeaderImg.Substyle = "Vehicles";
		}

	""";
	return MLText;
}

Text Inject_Main()
{
	declare Text MLText = """
		InitPreview();
		Prompt_Init();
		declare Text Logo				for LocalUser;
		declare Text BackgroundVideo	for LocalUser;
		declare Text BackgroundImage	for LocalUser;
		declare Text StationLogos		for LocalUser;
		declare Text StationImage		for LocalUser;
		declare ShadowBg				<=> (Page.GetFirstChild("ShadowBg") as CMlQuad);

	""";
	return MLText;
}

Text Inject_While()
{
	declare Text RemoveCross = C_ImgBase ^ "RemoveCross.dds";
	declare Text RemoveCrossOver = C_ImgBase ^ "RemoveCrossOver.dds";
	declare Text MLText = """
			Prompt_Loop();
			if (ShadowBg.Opacity <= ShadowBgOpacityMin && G_IsInTransition && G_IsInBigMode) {
				declare Screen					<=> (Page.GetFirstChild(G_FocusedBigScreen) as CMlFrame);
				declare FG						<=> (Screen.GetFirstChild("FG") as CMlQuad);
				ShadowBg.Visible = False;
				FG.Show();
				G_IsInBigMode = False;
				G_IsInTransition = False;
				if (G_FocusedBigScreen == "StationScreen") {
					Page.GetFirstChild("MainScreen").Show();
				} else {
					Page.GetFirstChild("StationScreen").Show();
				}
			}
			if (ShadowBg.Opacity >= ShadowBgOpacityMax && G_IsInTransition && !G_IsInBigMode) {
				declare Screen					<=> (Page.GetFirstChild(G_FocusedBigScreen) as CMlFrame);
				declare FG						<=> (Screen.GetFirstChild("FG") as CMlQuad);
				if (G_FocusedBigScreen == "MainScreen") {
					RefreshPage(True);
					SendCustomEvent("StyleMusicStart", Text[]);
				}
				FG.Hide();
				G_IsInBigMode = True;
				G_IsInTransition = False;
			}
			if ((G_BgVideoUrl != BackgroundVideo || G_BgImageUrl != BackgroundImage))
			{
				G_BgVideoUrl = BackgroundVideo;
				G_BgImageUrl = BackgroundImage;
				RefreshPage(True);
			} else if (G_TitleLogoUrl != Logo || 
						G_StationsLogosPng != StationLogos ||
						G_StationPackImageJpg != StationImage ) {
				G_TitleLogoUrl = Logo;
				G_StationsLogosPng = StationLogos;
				G_StationPackImageJpg = StationImage;
				RefreshPage(False);
			}
			
			if(G_SectionFocus != -1)
			{
				UpdateFocusLight();
			}

			if (G_IsOverMiniThumbnail) {
				UpdatePreviewFocusLight();
			}

			if (G_IsInTransition) {
				continue;
			}

			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::EntrySubmit: {
						if (Event.ControlId == "Entry_Color")
						{
							declare Result = (Event.Control as CMlEntry);
							SetSectionColor(G_ActiveFocus, Result.Value, True);
						}
						if (Event.ControlId == "Entry_News")
						{
							declare Result = (Event.Control as CMlEntry);
							SetNewsColor(Result.Value);
						}
					}
					case CMlEvent::Type::MouseOver: {
						if (Event.ControlId == "Quad_Section")
						{
							declare Integer[] Page_ActiveSections for Page;
							declare CMlQuad Quad_Button     <=> (Event.Control	as CMlQuad);
							declare Integer QuadId for Event.Control;
							G_SectionFocus = QuadId;
							declare Vec3[] Page_Section_Colors	 for Page;
							G_Private_MenuButtons_SectionColor = Page_Section_Colors[Page_ActiveSections[G_SectionFocus]];
						} else if (Event.ControlId == "Quad_Close") {
							declare Quad_CloseIMG <=> (Event.Control.Parent.GetFirstChild("Quad_CloseIMG") as CMlQuad);
							Quad_CloseIMG.ChangeImageUrl("{{{RemoveCrossOver}}}");
						}
						else if (Event.ControlId == "Quad_News")
						{
							declare Quad <=> (Event.Control as CMlQuad);
							Quad.Opacity = 1.0;
						}
						else if (Event.ControlId == "FG" || Event.ControlId == "Quad_Preview")
						{
							EnlargeButton_Over(Event.Control);
						}
					}
					case CMlEvent::Type::MouseOut: {
						if (Event.ControlId == "Quad_Section")
						{
							declare CMlQuad Quad_Button <=> (Event.Control	as CMlQuad);
							UnlightFocus();
							G_SectionFocus = -1;
						} else if (Event.ControlId == "Quad_Close") {
							declare Quad_CloseIMG <=> (Event.Control.Parent.GetFirstChild("Quad_CloseIMG") as CMlQuad);
							Quad_CloseIMG.ChangeImageUrl("{{{RemoveCross}}}");
						}
						else if (Event.ControlId == "Quad_News")
						{
							declare Quad <=> (Event.Control as CMlQuad);
							Quad.Opacity = 0.6;
						}
						else if (Event.ControlId == "FG" || Event.ControlId == "Quad_Preview")
						{
							EnlargeButton_Out(Event.Control);
						}
					}
					case CMlEvent::Type::MouseClick: {
						if (Event.ControlId == "FG" || Event.ControlId == "Quad_Preview")
						{
							//G_IsPreviewMode = !G_IsPreviewMode;
							switch(!G_IsInBigMode)
							{
								case True:
								{
									Enlarge(Event.Control.Parent.ControlId);
								}
								case False:
								{
								}

							}
						}
						else if (Event.ControlId == "ShadowBg" ||Event.ControlId == "Quad_Close" && G_IsInBigMode)
						{
							if (Event.ControlId == "Quad_Close") {
								declare Quad_CloseIMG <=> (Event.Control.Parent.GetFirstChild("Quad_CloseIMG") as CMlQuad);
								Quad_CloseIMG.ChangeImageUrl("{{{RemoveCross}}}");
							}

							Shrink();
						}
					}
					case CMlEvent::Type::PluginCustomEvent: {
						
						switch(Event.CustomEventType) {
							case "Show" : {
								ShowPagePreview();
							}
							
							case "Hide" : {
								HidePagePreview();
							}
						}
					}
				}
			}
	""";
	return MLText;
}
