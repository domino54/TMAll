// FormDisplayer.Script.txt

#Include "MathLib"											as MathLib
#Include "Libs/Nadeo/MP4/Common/DesignManialinks.Script.txt"	as DesignManialinks
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"		as Manialink
#Include "Libs/Nadeo/Common/ManiascriptTools/Dump.Script.txt"			as DumpTools

#Include "Libs/Nadeo/MP4/Common/GlobalVariables.Script.txt"		as GlobalVariables
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt"			as Font


#Const C_MaxSettings			9
#Const C_PosYFirstQuad			25.
#Const C_SizeXQuad				77.
#Const C_SizeYQuad				7.
#Const C_Integer_Size			<25.8, 7.02>
#Const C_Default_QuadMargin		1.2
#Const C_IMG_Checkbox_Open		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open.dds"
#Const C_IMG_Checkbox_Closed	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed.dds"
#Const C_IMG_ContainerSearch	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Container_Search.dds"
#Const C_Default_FormPosition	<0., 0.>
#Const C_Default_FormSize		<160., 110.>
#Const C_Setting_Visible		1
#Const C_Setting_Hidden			0
#Const C_Setting_Unassigned		-1

declare Vec2						G_FormPosition;
declare Vec2						G_FormSize;
declare Text						G_TitleName;
declare Text						G_TitleName2;
declare Text						G_ButtonName;
declare Text						G_EventName;
declare Text[]						G_SettingTypes;
declare Text[]						G_SettingNames;
declare Integer[Integer]			G_SettingsHide; //Les Settings qui seront cachés tant qu'on n'aura pas activé le switch/bouton correspondant
declare Integer						G_SecondColumnStart; 
declare Integer[]					G_IndexWhichOpenList; 
declare Boolean						G_SecondColumnStartVisibility; 
declare Text[Integer]				G_DefaultValue; 
declare Real[Text]					G_PositionSettingType; 
declare Real						G_TextSize; 
declare Real						G_BackgroundOpacity;
declare Real						G_QuadMargin; 
declare Text[]						G_TitlesName;
declare Vec2[]						G_TitlesPos;
declare Real[]						G_TitlesSize;
declare Real[Integer]				G_SettingsSpacingY;
declare Boolean						G_IsLine; 

declare Text						G_MainFont;
declare Text						G_SubFont;

Integer Setting_Visible()
{
	return C_Setting_Visible;
}

Integer Setting_Hidden()
{
	return C_Setting_Hidden;
}

Integer Setting_Unassigned()
{
	return C_Setting_Unassigned;
}

Void SetDefault(Text[Integer] _DefaultValue)
{
	G_DefaultValue = _DefaultValue;
}

Void Init(Text _TitleName, Text _ButtonName, Text _EventName, Text[] _SettingTypes, Text[] _SettingNames, Vec2 _FormPosition, Vec2 _FormSize)
{
	G_MainFont				= Font::GetFontName("Main");
	G_SubFont				= Font::GetFontName("SubTitle");
	DesignManialinks::Init();
	G_FormPosition                = _FormPosition;
	G_FormSize                    = _FormSize;
	G_TitleName                   = _TitleName;
	G_ButtonName                  = _ButtonName;
	G_EventName                   = _EventName;
	G_SettingTypes                = _SettingTypes;
	G_SettingNames                = _SettingNames;
	G_QuadMargin                  = C_Default_QuadMargin;
	G_DefaultValue                = [-1 => "-1"];
	G_TitleName2                  = "";
	G_SecondColumnStartVisibility = False;
	G_BackgroundOpacity           = 0.5;
	if (GlobalVariables::GetLaunchContext() == GlobalVariables::LaunchContext_Maker()) {
		G_BackgroundOpacity = 0.3;
	}
	G_SettingsSpacingY.clear();
	G_PositionSettingType["Switch"]       = 0.;
	G_PositionSettingType["Entry"]        = 0.;
	G_PositionSettingType["Password"]     = 0.;
	G_PositionSettingType["Label"]        = 0.;
	G_PositionSettingType["Comment"]      = 0.;
	G_PositionSettingType["Integer"]      = 0.;
	G_PositionSettingType["Event"]        = 0.;
	G_PositionSettingType["ButtonSwitch"] = 0.;
	G_PositionSettingType["Button"]       = 0.;
	G_PositionSettingType["Stats"]        = 0.;
	G_TextSize = 2.;
	G_TitlesName.clear();
	G_TitlesPos.clear();
	G_TitlesSize.clear();
	G_IsLine = False;
}

Void Init(Text _TitleName, Text _ButtonName, Text _EventName, Text[] _SettingTypes, Text[] _SettingNames)
{
	Init(_TitleName, _ButtonName, _EventName, _SettingTypes, _SettingNames, C_Default_FormPosition, C_Default_FormSize);
}

Void SetQuadMargin(Real _QuadMargin)
{
	G_QuadMargin = _QuadMargin;
}

Real GetSpacingAdd(Integer Index)
{
	declare Real SpacingAdd;
	declare Real aaa;
	foreach(SpaceIndex => Spacing in G_SettingsSpacingY)
	{
		//G_SettingsSpacingY
		if(SpaceIndex <= Index)
		{
			SpacingAdd -= Spacing;
		}
	}
	return SpacingAdd;
}

Void SetSettingsSpacingY(Real[Integer] _SettingsSpacingY)
{
	G_SettingsSpacingY = _SettingsSpacingY;
}

Void SetHideSettings(Integer[Integer] _SettingsHide)
{
	G_SettingsHide = _SettingsHide;
}

Void SetSecondColumStartVisibility(Boolean _SecondColumnStartVisibility)
{
	G_SecondColumnStartVisibility = _SecondColumnStartVisibility;
}

Void SetSecondColumnStart(Integer _Index)
{
	G_SecondColumnStart = _Index;
}
Void SetIndexWhichOpenList(Integer[] _IndexWhichOpenList)
{
	G_IndexWhichOpenList = _IndexWhichOpenList;
}

Void SetSecondColumnTitle(Text _TitleName2)
{
	G_TitleName2 = _TitleName2;
}

Void SetPositionSettingType(Real[Text] _PositionSettingType)
{
	G_PositionSettingType = _PositionSettingType;
}

Void SetSettingsTextSize(Real _TextSize)
{
	G_TextSize = _TextSize;
}

Void SetSettingsTitle(Text[] _TitleName, Vec2[] _TitlePos, Real[] _TitleSize, Boolean _IsLine)
{
	G_TitlesName = _TitleName;
	G_TitlesPos  = _TitlePos;
	G_TitlesSize = _TitleSize;
	G_IsLine     = _IsLine;
}

Text ManialinkFrameModels() {
	declare Real EntryPosX		= G_FormSize.X / 8. + 5.;
	declare Real EntrySizeMax	= MathLib::Min(46.8, G_FormSize.X / 4. + 6.8);
	declare Real ButtonSize		= MathLib::Min(30., G_FormSize.X / 4. - 10.);
	declare Real IntegerEntryPosX = EntryPosX - (EntrySizeMax - C_Integer_Size.X) / 2.;
	return """
	<framemodel id="Frame_Entry">
		{{{DesignManialinks::ManialinkQuadEntry(<EntryPosX, 0.>, <EntrySizeMax, C_SizeYQuad>, "", "", "", "Entry")}}}
		<label id="Label_Setting" textprefix="$t" halign="left" valign="center"  size="{{{EntrySizeMax}}}" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Label">
		<label id="Label_Setting" textprefix="$t" halign="left"  valign="center"  size="{{{EntrySizeMax}}}" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
		<label id="Label_Value"   textprefix="$t" halign="right" valign="center"  size="{{{EntrySizeMax+9.}}}" textfont="{{{G_SubFont}}}" pos="{{{55}}} 0.5" z-index="2" textsize="2" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Stats">
		<label id="Label_Setting"  textprefix="$t" halign="left"  valign="center"  size="{{{EntrySizeMax}}}" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
		<label id="Label_Value0"   textprefix="$t" halign="left" valign="center"  size="{{{EntrySizeMax}}}" textfont="{{{G_SubFont}}}" pos="3 0.5" z-index="2" textsize="2" text="" textcolor="fff" opacity="1."/>
		<label id="Label_Value1"   textprefix="$t" halign="left" valign="center"  size="{{{EntrySizeMax}}}" textfont="{{{G_SubFont}}}" pos="26 0.5" z-index="2" textsize="2" text="" textcolor="fff" opacity="1."/>
		<label id="Label_Value2"   textprefix="$t" halign="left" valign="center"  size="{{{EntrySizeMax}}}" textfont="{{{G_SubFont}}}" pos="49 0.5" z-index="2" textsize="2" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Comment">
		{{{DesignManialinks::ManialinkTextEdit(<EntryPosX, - C_SizeYQuad/2. - 4.>, <EntrySizeMax, C_SizeYQuad*3.>, "", "", "", "", "Entry")}}}
		<label id="Label_Setting" textprefix="$t" halign="left" valign="center" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Switch">
		<quad halign="center" valign="center" size="6 5" pos="{{{EntryPosX+G_PositionSettingType["Switch"]}}} 0" id="Quad_Switch"  scriptevents="1" opacity="0."/>
		<quad halign="center" valign="center" size="5 5" pos="{{{EntryPosX+G_PositionSettingType["Switch"]}}} 0" id="IMG_Switch" image="{{{C_IMG_Checkbox_Open}}}"/>
		<label id="Label_Setting" textprefix="$t" halign="left" valign="center" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Integer">
		{{{DesignManialinks::ManialinkQuadEntry(<IntegerEntryPosX, 0.>, C_Integer_Size, "", "", "", "Entry")}}}
		<label id="Label_Setting" textprefix="$t" halign="left" valign="center" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Event">
		<quad  halign="center" valign="center" z-index="3" size="{{{EntrySizeMax}}} 7.02" pos="{{{EntryPosX}}} 0" opacity="1." id="SecondaryButton" scriptevents="1"/>
		{{{DesignManialinks::ManialinkQuadEntry(<EntryPosX, 0.>, <EntrySizeMax, C_SizeYQuad>, "", "", "", "Entry")}}}
		<label id="Label_Setting" textprefix="$t" halign="left" valign="center" textfont="{{{G_SubFont}}}" pos="-39 0.5" z-index="2" textsize="{{{G_TextSize}}}" text="" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_ButtonSwitch">
		<quad halign="center" valign="center" z-index="1" size="{{{EntrySizeMax/1.5}}} {{{C_SizeYQuad}}}" pos="{{{EntryPosX}}} 0" opacity="1." image="{{{C_IMG_ContainerSearch}}}" id="Quad_ButtonSwitch" scriptevents="1"/>
		<quad halign="center" valign="center" z-index="1" size="{{{EntrySizeMax/1.5}}} {{{C_SizeYQuad}}}" pos="{{{EntryPosX}}} 0" opacity="1." id="Quad_ButtonSwitchBG" bgcolor="fff"/>
		<label id="Label_Setting" textprefix="$t" halign="center" valign="center" textfont="{{{G_SubFont}}}" pos="{{{EntryPosX}}} 0" z-index="2" textsize="{{{G_TextSize}}}" text="ButtonSwitch" textcolor="fff" opacity="1."/>
	</framemodel>

	<framemodel id="Frame_Button">
		<quad halign="center" valign="center" z-index="1" size="{{{EntrySizeMax/1.5}}} {{{C_SizeYQuad}}}" pos="{{{EntryPosX + G_PositionSettingType["Button"]}}} 0" opacity="1." image="{{{C_IMG_ContainerSearch}}}" id="Quad_Button" scriptevents="1"/>
		<quad halign="center" valign="center" z-index="1" size="{{{EntrySizeMax/1.5}}} {{{C_SizeYQuad}}}" pos="{{{EntryPosX + G_PositionSettingType["Button"]}}} 0" opacity="1." id="Quad_ButtonBG" bgcolor="fff"/>
		<label id="Label_Value" textprefix="$t" halign="center" valign="center" textfont="{{{G_SubFont}}}" pos="{{{EntryPosX + G_PositionSettingType["Button"]}}} 0" size="{{{EntrySizeMax/1.5}}}" z-index="2" textsize="1" text="Value" textcolor="fff" opacity="1."/>
		<label id="Label_Setting" textprefix="$t" halign="left" valign="center" textfont="{{{G_SubFont}}}" pos="-39 0" z-index="2" textsize="{{{G_TextSize}}}" text="Button" textcolor="fff" opacity="1."/>
	</framemodel>


""";
}

Text ManialinkMainBody() {
	declare Text MLText = """
	<frame id="Frame_Menu" pos="{{{G_FormPosition.X}}} {{{G_FormPosition.Y}}}">
		<label id="Label_Title" halign="left" valign="bottom" textfont="{{{G_MainFont}}}" pos="-46. 32." z-index="2" textsize="10" textprefix="$t" text="{{{G_TitleName}}}" textcolor="fff"/>
		<label id="Label_Title2" halign="left" valign="bottom" textfont="{{{G_MainFont}}}" pos="60. 32." z-index="2" textsize="5" textprefix="$t" text="{{{G_TitleName2}}}" textcolor="fff"/>
		<quad id="Quad_Black" halign="left" valign="top" size="{{{G_FormSize.X}}} {{{G_FormSize.Y}}}" pos="-51. 32." z-index="-1" opacity="{{{G_BackgroundOpacity}}}" bgcolor="000"/>
""";
	declare Real DecaleComment = 0.;
	declare Text Line = "";
	if(G_IsLine) Line = """<quad id="Quad_TitleLine0" halign="left" valign="top" size="{{{G_FormSize.X*0.4}}} 0.2" pos="{{{G_FormSize.X*0.}}} 0" z-index="0" opacity="0.8" bgcolor="fff"/> """;
	foreach(TitleIndex => TitleName in G_TitlesName)
	{
		MLText ^= """ <frame pos="{{{G_TitlesPos[TitleIndex].X}}} {{{G_TitlesPos[TitleIndex].Y}}}">
			<label id="Label_Title" halign="left" valign="bottom" textfont="{{{G_MainFont}}}" z-index="2" textsize="{{{G_TitlesSize}}}" textprefix="$t" text="{{{TitleName}}}" textcolor="fff" />
			{{{Line}}}
		</frame>
""";
	}

	foreach(SettingIndex => SettingType in G_SettingTypes)
	{
		declare Real PosX = 0.;
		declare PosYAdd = GetSpacingAdd(SettingIndex);
		declare Real PosY = C_PosYFirstQuad - SettingIndex * (C_SizeYQuad + (G_QuadMargin+0.3)) - DecaleComment + PosYAdd;
		if(G_SecondColumnStart != 0 && G_SecondColumnStart <= SettingIndex)
		{
			if((SettingIndex - G_SecondColumnStart) == 0.) DecaleComment = 0.;
			PosX = 100.;
			PosY = C_PosYFirstQuad - (SettingIndex - G_SecondColumnStart) * (C_SizeYQuad + G_QuadMargin) - DecaleComment;
		}
		switch(SettingType)
		{
			case "Switch": {
				MLText ^= """		<frameinstance modelid="Frame_Switch"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Entry": {
				MLText ^= """		<frameinstance modelid="Frame_Entry"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Password": {
				MLText ^= """		<frameinstance modelid="Frame_Entry"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Label": {
				MLText ^= """		<frameinstance modelid="Frame_Label"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Comment": {
				MLText ^= """		<frameinstance modelid="Frame_Comment"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
				DecaleComment += C_SizeYQuad*2.;
			}
			case "Integer": {
				MLText ^= """		<frameinstance modelid="Frame_Integer"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Event": {
				MLText ^= """		<frameinstance modelid="Frame_Event"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "ButtonSwitch": {
				MLText ^= """		<frameinstance modelid="Frame_ButtonSwitch"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Button": {
				MLText ^= """		<frameinstance modelid="Frame_Button"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			case "Stats": {
				MLText ^= """		<frameinstance modelid="Frame_Stats"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
			default: {
				MLText ^= """		<frameinstance modelid="Frame_Entry"	pos="{{{PosX}}} {{{PosY}}}" z-index="5" id="Frame_Setting{{{SettingIndex}}}"/>
""";
			}
		}
	}
	if (G_ButtonName != "") {
		MLText ^= DesignManialinks::ManialinkMainButtonLarge(<G_FormSize.X / 2.+10., -G_FormSize.Y/2.-10.>, <37., 11.>, G_ButtonName, "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/StartLogo.dds", "", "MainButton");
	}

	MLText ^= """	</frame>""";
	return MLText;
}

Text Includes() {

	declare Text Dump_SettingsHide       = """[-1=>-1]""";
	declare Text Dump_IndexWhichOpenList       = """[-1]""";
	if(dump(G_SettingsHide) != "[]") Dump_SettingsHide = dump(G_SettingsHide);
	if(dump(G_IndexWhichOpenList) != "[]") Dump_IndexWhichOpenList = dump(G_IndexWhichOpenList);

	return """#Include "TextLib" as FormDisplayer_TextLib

#Const C_FormDisplayer_ButtonName				{{{dump(G_ButtonName)}}}
#Const C_FormDisplayer_DefaultValue				{{{dump(G_DefaultValue)}}}
#Const C_FormDisplayer_SettingsHide				{{{Dump_SettingsHide}}}
#Const C_FormDisplayer_IndexWhichOpenList		{{{Dump_IndexWhichOpenList}}}
{{{DesignManialinks::Includes()}}}
{{{Manialink::GetIncludes()}}}
""";
}

Text Declares() {
	return """
{{{DesignManialinks::Declares()}}}
{{{Manialink::Load()}}}
	declare Text[]		G_FormDisplayer_SettingTypes;
	declare Text[]		G_FormDisplayer_SettingNames;
	declare Integer[]	G_IsSettingVisible;
	declare	CMlFrame[]	G_Frames_Setting;
	declare Text[]		G_SettingContents;
	declare Boolean		G_IsOpenList;

	Void FormDisplayer_ChangeVisibleSettings(Integer[] _IsSettingVisible)
	{
		G_IsSettingVisible = _IsSettingVisible;
	}

	Void FormDisplayer_SwitchVisibleSettings(Integer _Index)
	{
		if(G_IsSettingVisible[_Index] == 0) G_IsSettingVisible[_Index] = 1;
		else                                G_IsSettingVisible[_Index] = 0;
	}

	Void Private_FormDisplayer_DisplayFromData()
	{
		foreach(SettingIndex => SettingType in G_FormDisplayer_SettingTypes)
		{
			declare Integer IsSettingVisible	= G_IsSettingVisible[SettingIndex];
			declare CMlFrame Frame_Setting		<=> G_Frames_Setting[SettingIndex];
			if (IsSettingVisible == {{{C_Setting_Visible}}}) {
				Frame_Setting.Show();
			} else if (IsSettingVisible == {{{C_Setting_Hidden}}}){
				Frame_Setting.Hide();
			}
			declare Text SettingContent = G_SettingContents[SettingIndex];
			switch(SettingType)
			{
				case "Switch": {
					declare CMlQuad IMG_Switch  <=> (Frame_Setting.GetFirstChild("IMG_Switch") as CMlQuad);
					declare Text[Text] ImageFromData = ["no" => "{{{C_IMG_Checkbox_Open}}}", "yes" => "{{{C_IMG_Checkbox_Closed}}}"];
					declare Text ImageUrl = ImageFromData[SettingContent];
					IMG_Switch.ChangeImageUrl(ImageUrl);
				}
				case "ButtonSwitch": {
					declare CMlQuad Quad_ButtonSwitchBG  <=> (Frame_Setting.GetFirstChild("Quad_ButtonSwitchBG") as CMlQuad);
					declare CMlLabel Label_Setting  <=> (Frame_Setting.GetFirstChild("Label_Setting") as CMlLabel);
					declare Real[Text] OpacityFromData = ["no" => 0., "yes" => 1.0];
					declare Vec3[Text] TextColorFromData = ["no" => <1., 1., 1.>, "yes" => <0., 0., 0.>];
					Quad_ButtonSwitchBG.Opacity = OpacityFromData[SettingContent];
					Label_Setting.TextColor = TextColorFromData[SettingContent];
				}
				case "Button": {
					declare CMlQuad Quad_ButtonBG  <=> (Frame_Setting.GetFirstChild("Quad_ButtonBG") as CMlQuad);
					declare CMlLabel Label_Setting  <=> (Frame_Setting.GetFirstChild("Label_Setting") as CMlLabel);
					declare CMlLabel Label_Value  <=> (Frame_Setting.GetFirstChild("Label_Value") as CMlLabel);
					if (G_SettingContents[SettingIndex] != "") Label_Value.SetText(G_SettingContents[SettingIndex]);
					Quad_ButtonBG.Opacity = 0.;
					Label_Setting.TextColor = <1., 1., 1.>;
				}
				case "Entry": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")    as CMlEntry);
					Entry.SetText(SettingContent, False);
				}
				case "Label": {
					declare CMlLabel Label_Value <=> (Frame_Setting.GetFirstChild("Label_Value")	as CMlLabel);
					Label_Value.SetText(SettingContent);
				}
				case "Comment": {
					//declare CMlTextEdit Entry_TextEdit <=> (Frame_Setting.GetFirstChild("Entry_TextEdit")    as CMlTextEdit);
					//Entry_TextEdit.Value = SettingContent; // TODO : ?????
				}
				case "Integer": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")    as CMlEntry);
					declare Integer Value = FormDisplayer_TextLib::ToInteger(SettingContent);
					/*if(Value < 0) Value = 0;
					else if(Value > 1000000) Value = 1000000;*/ // TODO : Voir si c'est pertinent à intégrer
					G_SettingContents[SettingIndex] = FormDisplayer_TextLib::ToText(Value);
					Entry.SetText(G_SettingContents[SettingIndex], False);
				}
				case "Stats": {
					declare CMlLabel Label_Value0 <=> (Frame_Setting.GetFirstChild("Label_Value0")	as CMlLabel);
					declare CMlLabel Label_Value1 <=> (Frame_Setting.GetFirstChild("Label_Value1")	as CMlLabel);
					declare CMlLabel Label_Value2 <=> (Frame_Setting.GetFirstChild("Label_Value2")	as CMlLabel);
					declare Text[] Split = FormDisplayer_TextLib::Split("|", SettingContent);
					if(Split.existskey(0)) Label_Value0.SetText(Split[0]);
					if(Split.existskey(1)) Label_Value1.SetText(Split[1]);
					if(Split.existskey(2)) Label_Value2.SetText(Split[2]);
				}
				case "Event": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")    as CMlEntry);
					Entry.SetText(SettingContent, False);
				}
			}
		}
	}

	Void Input_Select() {
		declare Text[] Page_SettingContents for Page;
		Page_SettingContents = G_SettingContents;
		if (G_SettingContents.count > 4) {
			SendCustomEvent({{{dump(G_EventName)}}}, Text[]);
		} else {
			SendCustomEvent({{{dump(G_EventName)}}}, G_SettingContents); // TODO : Blindage à enlever
		}
	}

	Void Private_FormDisplayer_ChangeSettings(Integer _SettingIndex, Text _NewData)
	{
		if (!G_SettingContents.existskey(_SettingIndex)) {
			log(Now ^ ") ATTENTION: Lib FormDisplayer, Private_FormDisplayer_ChangeSettings appelé avec un _SettingIndex invalide");
			return;
		}
		G_SettingContents[_SettingIndex] = _NewData;
		Private_FormDisplayer_DisplayFromData();
		if (C_FormDisplayer_ButtonName == "") {
			Input_Select();
		}
	}

	Void Private_FormDisplayer_ClickOnQuad(Integer _SettingIndex) {
		declare Text SettingContent = G_SettingContents[_SettingIndex];
		if (SettingContent == "yes") {
			Private_FormDisplayer_ChangeSettings(_SettingIndex, "no");
		} else {
			Private_FormDisplayer_ChangeSettings(_SettingIndex, "yes");
		}
	}

	Void Private_FormDisplayer_ValidateEntry(Integer _QuadId) {
		declare Integer SettingIndex = _QuadId;
		if (!G_Frames_Setting.existskey(SettingIndex)) {
			log(Now ^ ") ATTENTION: Lib FormDisplayer, Private_FormDisplayer_ValidateEntry appelé sans être en entrée de texte");
			return;
		}
		declare CMlFrame Frame_Setting <=> G_Frames_Setting[SettingIndex];
		declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")    as CMlEntry);
		if (Entry == Null) {
			declare CMlTextEdit Entry_TextEdit <=> (Frame_Setting.GetFirstChild("Entry_TextEdit") as CMlTextEdit);
			Private_FormDisplayer_ChangeSettings(SettingIndex, Entry_TextEdit.Value);
		} else {
			Private_FormDisplayer_ChangeSettings(SettingIndex, Entry.Value);
		}
	}

	Void Private_FormDisplayer_ClickOnEvent(Integer _SettingIndex) {
		SendCustomEvent("FormDisplayer_Event", [FormDisplayer_TextLib::ToText(_SettingIndex)]);
	}

	Void SetOpenList(Boolean _IsOpenList)
	{
		G_IsOpenList = _IsOpenList;
		declare CMlFrame Frame_Menu  <=> (Page.MainFrame.GetFirstChild("Frame_Menu")       as CMlFrame);
		declare CMlLabel Label_Title <=> (Frame_Menu.GetFirstChild("Label_Title")          as CMlLabel);
		declare CMlFrame MainButton  <=> (Page.MainFrame.GetFirstChild("MainButton_Frame") as CMlFrame);
		declare CMlQuad Quad_Black   <=> (Frame_Menu.GetFirstChild("Quad_Black")           as CMlQuad);
		declare Real Target_FrameMenu_PosX  = {{{G_FormPosition.X/2.}}};
		declare Real Target_QuadBlack_SizeX = {{{G_FormSize.X/2.+10.}}};
		declare Real Target_LabelTitle_PosX = -43.;
		declare Real Target_MainButton_PosX = 20.;
		if(_IsOpenList)
		{
			Target_FrameMenu_PosX  = {{{G_FormPosition.X}}};
			Target_QuadBlack_SizeX = {{{G_FormSize.X}}};
			Target_LabelTitle_PosX =  -46.;
			Target_MainButton_PosX = {{{G_FormSize.X / 2.+10.}}};
		}

		if(Frame_Menu != Null)
		{
			LibManialink_AnimStop(Frame_Menu);
			LibManialink_SetTargetPosition(Frame_Menu, <Target_FrameMenu_PosX, Frame_Menu.RelativePosition.Y>);
			LibManialink_PresetAnim(Frame_Menu, 320, "EaseOutQuad");
		}

		if(Label_Title != Null)
		{
			LibManialink_AnimStop(Label_Title);
			LibManialink_SetTargetPosition(Label_Title, <Target_LabelTitle_PosX, Label_Title.RelativePosition.Y>);
			LibManialink_PresetAnim(Label_Title, 320, "EaseOutQuad");
		}
		
		if(MainButton != Null)
		{
			LibManialink_AnimStop(MainButton);
			LibManialink_SetTargetPosition(MainButton, <Target_MainButton_PosX, MainButton.RelativePosition.Y>);
			LibManialink_PresetAnim(MainButton, 150, "EaseOutQuad");
		}
		
		if(Quad_Black != Null)
		{
			LibManialink_AnimStop(Quad_Black);
			LibManialink_SetTargetSize(Quad_Black, <Target_QuadBlack_SizeX, Quad_Black.Size.Y>);
			LibManialink_PresetAnim(Quad_Black, 120, "EaseOutQuad");
		}
	}

	Void SwitchHiddenSettings(Integer _Id)
	{
		if(C_FormDisplayer_IndexWhichOpenList.exists(_Id)) SetOpenList(!G_IsOpenList);
		
		foreach(Index => SettingsHide in C_FormDisplayer_SettingsHide)
		{
			if(SettingsHide == _Id)
			{
				if(C_FormDisplayer_SettingsHide.exists(Index) && G_SettingContents[Index] == "yes")
				{
					SwitchHiddenSettings(Index);
				}
				FormDisplayer_SwitchVisibleSettings(Index);
			}
		}
	}

	Void FormDisplayer_Init()
	{
		G_FormDisplayer_SettingTypes = {{{DumpTools::CustomDump(G_SettingTypes)}}};
		G_FormDisplayer_SettingNames = {{{DumpTools::CustomDump(G_SettingNames)}}};
		foreach(SettingIndex => SettingType in G_FormDisplayer_SettingTypes)
		{
			declare CMlFrame Frame_Setting <=> (Page.MainFrame.GetFirstChild("Frame_Setting" ^ SettingIndex)	as CMlFrame);
			declare CMlLabel Label_Setting <=> (Frame_Setting.GetFirstChild("Label_Setting")					as CMlLabel);
			Label_Setting.SetText(G_FormDisplayer_SettingNames[SettingIndex]);
			switch(SettingType)
			{
				case "Switch": {
					declare CMlQuad Quad_Switch  <=> (Frame_Setting.GetFirstChild("Quad_Switch") as CMlQuad);
					declare Integer QuadId for Quad_Switch;
					QuadId = SettingIndex;
					G_SettingContents.add("no");
				}
				case "ButtonSwitch": {
					declare CMlQuad Quad_ButtonSwitch  <=> (Frame_Setting.GetFirstChild("Quad_ButtonSwitch") as CMlQuad);
					declare Integer QuadId for Quad_ButtonSwitch;
					QuadId = SettingIndex;
					G_SettingContents.add("no");
				}
				case "Button": {
					declare CMlQuad Quad_Button  <=> (Frame_Setting.GetFirstChild("Quad_Button") as CMlQuad);
					declare Integer QuadId for Quad_Button;
					QuadId = SettingIndex;
					declare Text SettingContent = "";
					if(C_FormDisplayer_DefaultValue.existskey(SettingIndex)) SettingContent = C_FormDisplayer_DefaultValue[SettingIndex];
					G_SettingContents.add(SettingContent);
				}
				case "Entry": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")	as CMlEntry);
					Entry.TextFormat = CMlEntry::ETextFormat::Basic;
					declare Integer QuadId for Entry;
					QuadId = SettingIndex;
					declare Text SettingContent = "";
					if(C_FormDisplayer_DefaultValue.existskey(SettingIndex)) SettingContent = C_FormDisplayer_DefaultValue[SettingIndex];
					G_SettingContents.add(SettingContent);
				}
				case "Label": {
					//declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")	as CMlEntry);
					//Entry.TextFormat = CMlEntry::ETextFormat::Basic;
					//declare Integer QuadId for Entry;
					//QuadId = SettingIndex;
					declare Text SettingContent = "";
					if(C_FormDisplayer_DefaultValue.existskey(SettingIndex)) SettingContent = C_FormDisplayer_DefaultValue[SettingIndex];
					G_SettingContents.add(SettingContent);
				}
				case "Comment": {
					declare CMlTextEdit Entry_TextEdit <=> (Frame_Setting.GetFirstChild("Entry_TextEdit")	as CMlTextEdit);
					declare Integer QuadId for Entry_TextEdit;
					QuadId = SettingIndex;
					G_SettingContents.add("");
				}
				case "Integer": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")	as CMlEntry);
					Entry.TextFormat = CMlEntry::ETextFormat::Basic;
					declare Integer QuadId for Entry;
					QuadId = SettingIndex;
					declare Text SettingContent = "0";
					if(C_FormDisplayer_DefaultValue.existskey(SettingIndex)) SettingContent = C_FormDisplayer_DefaultValue[SettingIndex];
					G_SettingContents.add(SettingContent);
				}
				case "Password": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")	as CMlEntry);
					Entry.TextFormat = CMlEntry::ETextFormat::Password;
					declare Integer QuadId for Entry;
					QuadId = SettingIndex;
					G_SettingContents.add("");
				}
				case "Event": {
					declare CMlQuad Quad_Event   <=> (Frame_Setting.GetFirstChild("SecondaryButton") as CMlQuad);
					declare Integer QuadId for Quad_Event;
					QuadId = SettingIndex;
					G_SettingContents.add("");
				}
				case "Stats": {
					declare Text SettingContent = "";
					if(C_FormDisplayer_DefaultValue.existskey(SettingIndex)) SettingContent = C_FormDisplayer_DefaultValue[SettingIndex];
					G_SettingContents.add(SettingContent);
				}
			}

			if(C_FormDisplayer_SettingsHide.existskey(SettingIndex))
			{
				G_IsSettingVisible.add({{{C_Setting_Hidden}}});
			}
			else
			{
				G_IsSettingVisible.add({{{C_Setting_Visible}}});
			}
			
			G_Frames_Setting.add(Frame_Setting);
		}

		G_IsOpenList = {{{G_SecondColumnStartVisibility}}};
		SetOpenList(G_IsOpenList);
		Private_FormDisplayer_DisplayFromData();
	}

	Void UpdateSettingsValues()
	{
		declare Text[Integer] Net_FormDisplayer_ValueToChange for Page;

		foreach(Index => Value in Net_FormDisplayer_ValueToChange)
		{
			declare CMlFrame Frame_Setting <=> (Page.MainFrame.GetFirstChild("Frame_Setting" ^ Index)	as CMlFrame);
			
			if(!G_FormDisplayer_SettingTypes.existskey(Index)) continue;
			declare Text SettingType = G_FormDisplayer_SettingTypes[Index];
			G_SettingContents[Index] = Value;
			switch(SettingType)
			{
				case "Label": {
					declare CMlLabel Label_Value <=> (Frame_Setting.GetFirstChild("Label_Value")	as CMlLabel);
					Label_Value.SetText(Value);
				}
				case "Stats": {
					declare CMlLabel Label_Value0 <=> (Frame_Setting.GetFirstChild("Label_Value0")	as CMlLabel);
					declare CMlLabel Label_Value1 <=> (Frame_Setting.GetFirstChild("Label_Value1")	as CMlLabel);
					declare CMlLabel Label_Value2 <=> (Frame_Setting.GetFirstChild("Label_Value2")	as CMlLabel);
					declare Text[] Split = FormDisplayer_TextLib::Split("|", Value);
					if(Split.existskey(0)) Label_Value0.SetText(Split[0]);
					if(Split.existskey(1)) Label_Value1.SetText(Split[1]);
					if(Split.existskey(2)) Label_Value2.SetText(Split[2]);
				}
				case "Entry": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")	as CMlEntry);
					Entry.SetText(Value, True);
				}
				case "Button": {
					declare CMlLabel Label_Value <=> (Frame_Setting.GetFirstChild("Label_Value")	as CMlLabel);
					Label_Value.SetText(Value);
				}
				case "Password": {
					declare CMlEntry Entry <=> (Frame_Setting.GetFirstChild("Entry")	as CMlEntry);
					Entry.SetText(Value, True);
				}
				case "Comment": {
					//declare CMlTextEdit Entry_TextEdit <=> (Frame_Setting.GetFirstChild("Entry_TextEdit")    as CMlTextEdit);
					//Entry_TextEdit.Value = Value;
				}
			}
		}
	}
		
	Void FormDisplayer_Loop() {
		DesignManialinks_Loop();
		LibManialink_AnimLoop();
		foreach(Event in PendingEvents)
		{
			switch(Event.Type)
			{
				case CMlEvent::Type::EntrySubmit: {
					declare Integer QuadId for Event.Control;
					Private_FormDisplayer_ValidateEntry(QuadId);
				}
				case CMlEvent::Type::MenuNavigation: {
					switch (Event.MenuNavAction) {
						case CMlEvent::EMenuNavAction::Select: {
							Input_Select();
						}
					}
				}
				case CMlEvent::Type::MouseClick: {
					switch (Event.ControlId)
					{
						case "Quad_Button" : {
							//aaaa
							declare Integer QuadId for Event.Control;
							SendCustomEvent("{{{G_EventName}}}_Button",[""^QuadId]);
						}
						case "Quad_Switch" : {
							declare Integer QuadId for Event.Control;
							SwitchHiddenSettings(QuadId);
							Private_FormDisplayer_ClickOnQuad(QuadId);
						}
						case "Quad_ButtonSwitch" : {
							declare Integer QuadId for Event.Control;

							SwitchHiddenSettings(QuadId);
							Private_FormDisplayer_ClickOnQuad(QuadId);
						}
						case "SecondaryButton" : {
							declare Integer QuadId for Event.Control;
							Private_FormDisplayer_ClickOnEvent(QuadId);
						}
						case "MainButton" : {
							Input_Select();
						}
					}
				}
				case CMlEvent::Type::PluginCustomEvent: {
					switch (Event.CustomEventType) {
						case "FormDisplayer_SetSettings" : {
							foreach (SettingIndex => Setting in Event.CustomEventData) {
								Private_FormDisplayer_ChangeSettings(SettingIndex, Setting);
							}
						}
						case "FormDisplayer_UpdateValues" : {
							declare Text[Integer] Net_FormDisplayer_ValueToChange for Page;
							UpdateSettingsValues();
						}
					}
				}
			}
		}
	}

	Void FormDisplayer_Show() {
		DesignManialinks_Show();
	}
""";
}
