#Include "Libs/Nadeo/Common/Core/Logger.Script.txt"	as Logger

declare Text[Text] G_Result;
declare CParsingDocument G_XMLToSeparate;

Void AddSection(Text _SectionName, Text _NameInXML)
{
	G_Result[_SectionName] = "";
	if (G_XMLToSeparate == Null) {
		return;
	}
	declare CParsingNode Node = G_XMLToSeparate.GetFirstChild(_NameInXML);
	if (Node != Null) {
		G_Result[_SectionName] = Node.TextRawContents;
	}
}

Text[Text] SeparateXML(Text _XMLToSeparate, Text[][] _SectionNames)
{
	G_Result.clear();
	G_XMLToSeparate = Xml.Create(_XMLToSeparate, False, True, False);
	foreach(SectionName in _SectionNames)
	{
		if (SectionName.count != 2) {
			Logger::Warn("Format non respecté. Chaque entrée du tableau doit contenir 2 éléments : Son nom dans le controller et son nom dans le XML");
		}
		AddSection(SectionName[0], SectionName[1]);
	}
	Xml.Destroy(G_XMLToSeparate);
	return G_Result;
}

//XML Parse functions
Text NodeToText(CParsingNode _Node) {
	if(_Node == Null) {
		return "";
	}
	return _Node.TextContents;
}

Text[Text] NodeToText_TextArray(CParsingNode _Node) {
	declare Text[Text] result;
	if(_Node == Null) {
		return result;
	}
	foreach(child in _Node.Children) {
		result[child.Name] = NodeToText(child);
	}
	return result;
}

Text[Text][] NodeToText_TextArray_Array(CParsingNode _Node) {
	declare Text[Text][] result;
	if(_Node == Null) {
		return result;
	}
	foreach(child in _Node.Children) {
		result.add(NodeToText_TextArray(child));
	}
	return result;
}