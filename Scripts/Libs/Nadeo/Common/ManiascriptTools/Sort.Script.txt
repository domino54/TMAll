#Const C_SortTools_ARRAY_NOORDER			0
#Const C_SortTools_ARRAY_INCREASINGORDER	1
#Const C_SortTools_ARRAY_DECREASINGORDER	2

Integer Array_IncreasingOrder()
{
	return C_SortTools_ARRAY_INCREASINGORDER;
}

Integer Array_DecreasingOrder()
{
	return C_SortTools_ARRAY_DECREASINGORDER;
}

Integer[] Private_GetInversedArray(Integer[] _Array)
{
	declare Integer[] Result;
	declare Integer DecreasingIndex = _Array.count - 1;
	while (DecreasingIndex >= 0)
	{
		Result.add(_Array[DecreasingIndex]);
		DecreasingIndex -= 1;
	}
	return Result;
}

Boolean Private_IsOneBeforeTheOther(Text _One, Text _Other)
{
	declare Text[] Array = [_One, _Other];
	declare Text[] SortedArray = Array.sort();
	if (SortedArray[0] != Array[0])
	{
		return False;
	}
	return True;
}

Integer[] SortTools_GetSortSwapArray(Integer[] _Array, Integer _ArrayOrder)
{
	declare Integer[] Result;
	declare Integer MinimumIndex;
	declare Integer MinimumValue;
	for (Index, 1, _Array.count)
	{
		MinimumIndex = -1;
		MinimumValue = 10000000000;
		foreach(ComparisonKey => ComparisonElem in _Array)
		{
			if (!Result.exists(ComparisonKey) && ComparisonElem < MinimumValue)
			{
				MinimumIndex = ComparisonKey;
				MinimumValue = ComparisonElem;
			}
		}
		if (MinimumIndex == -1) {
			log(Now ^ ") WARNING : Function SortTools_GetSortSwapArray malfunctioning");
		}
		Result.add(MinimumIndex);
	}
	if (_ArrayOrder == C_SortTools_ARRAY_DECREASINGORDER)
	{
		Result = Private_GetInversedArray(Result);
	}
	return Result;
}

Integer[] SortTools_GetSortSwapArray(Text[] _Array, Integer _ArrayOrder)
{
	declare Integer[] Result;
	declare Integer MinimumIndex;
	declare Text MinimumValue;
	for (Index, 1, _Array.count)
	{
		MinimumIndex = -1;
		MinimumValue = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"; // TODO : Mettre LE max des Text
		foreach(ComparisonKey => ComparisonElem in _Array)
		{
			if (!Result.exists(ComparisonKey) && Private_IsOneBeforeTheOther(ComparisonElem, MinimumValue))
			{
				MinimumIndex = ComparisonKey;
				MinimumValue = ComparisonElem;
			}
		}
		if (MinimumIndex == -1) {
			log(Now ^ ") WARNING : Function SortTools_GetSortSwapArray malfunctioning");
		}
		Result.add(MinimumIndex);
	}
	if (_ArrayOrder == C_SortTools_ARRAY_DECREASINGORDER)
	{
		Result = Private_GetInversedArray(Result);
	}
	return Result;
}