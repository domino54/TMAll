#Include "Libs/Trackmania/HSVColors.Script.txt"				as HSVColors
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 		as Font


#Const C_ImgBase      			"file://Media/MEDIABROWSER_HiddenResources/Maker/Images/ColorPicker/"
#Const C_LightSize    			<50., 50.>
#Const C_ColorSize    			<5.6, 50.>
#Const C_ColorPos     			<32.9, 0.>
#Const C_SelectorButtonSize		<4., 4.>
#Const C_SelectorLargeur		0.6
#Const C_BGSize					<70., 67.>
#Const C_EntrySize				<50., 8.>
#Const C_ColorPreview			<9.3, 7.3>

declare Vec2 G_Position;
declare Real G_Scale;

Text Inject_Manialink(Vec2 _Pos, Real _Scale)
{
	G_Position = _Pos;
	G_Scale = _Scale;

	declare Text IMG_Arrow   = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/Arrow.dds";
	declare Text IMGNuancier = C_ImgBase ^"NuancierVert.dds";
	declare Text IMGColor    = C_ImgBase ^"MakerStyle_Color.dds";
	declare Text IMGSelector = C_ImgBase ^"ColorPickerSelector.dds";
	declare Text SubFont	 = Font::GetFontName("SubTitle");
	declare Text MLText = """
	
<frame id="Frame_All" z-index="0" pos="{{{_Pos.X}}} {{{_Pos.Y}}}" scale="{{{_Scale}}}">
	<quad id="Quad_ColorPicker_FG" pos="5.5 -4.2" bgcolor="000" halign="center" valign="center" opacity="0.6" z-index="5" size="{{{C_BGSize.X}}} {{{C_BGSize.Y}}}" scriptevents="1"/>
	<frame id="Frame_BG" z-index="-1" pos="5.5 -4.2">
		<quad id="BG" bgcolor="000" halign="center" valign="center" opacity="0.1" z-index="-1" size="{{{C_BGSize.X}}} {{{C_BGSize.Y}}}" scriptevents="1"/>
		<frame id="Frame_ColorPicker_Contour">
			<quad id="C_Down"           halign="center" valign="center" pos="0 {{{-C_BGSize.Y/2.}}}" size="{{{C_BGSize.X}}} {{{C_SelectorLargeur}}}" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Up"             halign="center" valign="center" pos="0 {{{C_BGSize.Y/2.}}}"  size="{{{C_BGSize.X}}} {{{C_SelectorLargeur}}}" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Right"          halign="center" valign="center" pos="{{{C_BGSize.X/2.}}} 0"  size="{{{C_SelectorLargeur}}} {{{C_BGSize.Y}}}" bgcolor="fff" opacity="1.0"/>
			<quad id="C_Left"           halign="center" valign="center" pos="{{{-C_BGSize.X/2.}}} 0" size="{{{C_SelectorLargeur}}} {{{C_BGSize.Y}}}" bgcolor="fff" opacity="1.0"/>
		</frame>
	</frame>

	<frame id="Frame_Light" z-index="3">
		<quad id="Quad_Light"   image="{{{IMGNuancier}}}" halign="center" valign="center" opacity="1.0" z-index="0"  pos="0 0" size="{{{C_LightSize.X}}} {{{C_LightSize.Y}}}" scriptevents="1" />
		<frame id="Frame_LightSelector" z-index="2" pos="0 0" hidden="0">
			<quad id="Quad_LightPick" halign="center" valign="center" pos="0 0" size="{{{C_SelectorButtonSize.X}}} {{{C_SelectorButtonSize.Y}}}" z-index="2" image="{{{IMGSelector}}}" opacity="1.0"/>
		</frame>
	</frame>
	
	<quad id="Quad_BGColor" bgcolor="000" halign="center" valign="center" opacity="0.0" z-index="-1"  pos="{{{C_ColorPos.X}}} {{{C_ColorPos.Y}}}" size="56. {{{C_ColorSize.Y+2.}}}"/>
	<quad id="Quad_Color"   image="{{{IMGColor}}}" halign="center" valign="center" opacity="1.0" z-index="1"  pos="{{{C_ColorPos.X}}} {{{C_ColorPos.Y}}}" size="{{{C_ColorSize.X}}} {{{C_ColorSize.Y}}}" scriptevents="1" />
	<frame id="Frame_ColorSelector" z-index="2" pos="{{{C_ColorPos.X}}} {{{C_ColorPos.Y}}}">
		<quad id="Quad_Line"      halign="center" valign="center" pos="0 0" size="{{{C_ColorSize.X}}} {{{C_SelectorLargeur}}}" z-index="1" opacity="1.0" bgcolor="fff"/>
		<quad id="Quad_Line"      halign="right" valign="center" pos="{{{C_SelectorButtonSize.X/2.+0.5}}} 0" size="4. 4." z-index="1" opacity="1.0" image="{{{IMG_Arrow}}}" rot="180" keepratio="fit"/>
	</frame>
	
	<frame id="Frame_Entry" z-index="2" pos="-25.0 -30.7">
		<quad  id="Quad_EntryLeft"    halign="left"   valign="center" pos="0 0" size="1. {{{C_EntrySize.Y}}}" bgcolor="333" opacity="0.7" z-index="-1"/>
		<entry id="Entry_ColorPicker" halign="left"   valign="center" textfont="{{{SubFont}}}" size="{{{C_EntrySize.X-1.}}} {{{C_EntrySize.Y}}}" pos="1. 0." z-index="-1" textprefix="$t" textsize="3." scriptevents="1"/>
		<quad  id="C_Down"            halign="left"   valign="center" pos="0 {{{-C_EntrySize.Y/2.}}}" size="{{{C_EntrySize.X}}} {{{C_SelectorLargeur}}}" bgcolor="fff" opacity="1.0"/>
		<quad  id="C_Up"              halign="left"   valign="center" pos="0 {{{C_EntrySize.Y/2.}}}"  size="{{{C_EntrySize.X}}} {{{C_SelectorLargeur}}}" bgcolor="fff" opacity="1.0"/>
		<quad  id="C_Right"           halign="right"  valign="center" pos="{{{C_EntrySize.X}}} 0"  size="{{{C_SelectorLargeur}}} {{{C_EntrySize.Y}}}" bgcolor="fff" opacity="1.0"/>
		<quad  id="C_Left"            halign="left"   valign="center" pos="0 0" size="{{{C_SelectorLargeur}}} {{{C_EntrySize.Y}}}" bgcolor="fff" opacity="1.0"/>
	</frame>
	<frame id="Frame_ColorPreview" z-index="2" pos="32.8 -31.2">
		<quad                        halign="center" valign="center" pos="0 0" size="{{{C_ColorPreview.X+2.}}} {{{C_ColorPreview.Y+2.}}}" z-index="0" bgcolor="000" opacity="0.2"/>
		<quad id="Quad_ColorPreview" halign="center" valign="center" pos="0 0" size="{{{C_ColorPreview.X}}} {{{C_ColorPreview.Y}}}"       z-index="1" bgcolor="090" opacity="1.0"/>
	</frame>
</frame>
	""";
	return MLText;
}


Text Inject_Includes()
{
	declare Text MLText = """
		#Include "MathLib" as ColorPicker_MathLib

		#Const Const_Exemple 0
	""";
	return MLText;
}

Text Inject_Declare()
{
	declare Text MLText = """
		declare Boolean G_IsColorPickerShow;
		declare Boolean G_IsAnim;
		declare Vec3 	G_ColorPick; //Pick dans la barre du dessous
		declare Vec3 	G_TrueColorPick;
		declare Real 	G_ColorPickRadian;
		declare Real 	G_PosLightX;
		declare Real 	G_PosLightY;
	""";
	return MLText;
}

Text Inject_Functions()
{
	declare Text MLText = """

		{{{HSVColors::MLHSVColors()}}}
		Void Init_ColorPicker()
		{
			//G_IsColorPickerShow = False;
			G_ColorPick = <100., 0., 0.>;
		}


		Real SnapPosLightX()
		{
			if(MouseX - {{{G_Position.X}}} < {{{C_LightSize.X/2.*G_Scale}}}) return {{{-C_LightSize.X/2.}}};
			else if(MouseX - {{{G_Position.X}}} > {{{-C_LightSize.X/2.}}})   return {{{C_LightSize.X/2.}}};
			return 0.;
		}

		Real SnapPosLightY()
		{
			if(MouseY - {{{G_Position.Y}}} < {{{C_LightSize.Y/2.*G_Scale}}}) return {{{-C_LightSize.Y/2.+0.1}}};
			else if(MouseY - {{{G_Position.Y}}} > {{{-C_LightSize.Y/2.}}})   return {{{C_LightSize.Y/2.}}};
			return 0.;
		}

		Void SetColorPicker_ContourVisible(Boolean _Visible)
		{
			declare CMlFrame Frame_ColorPicker_Contour <=> (Page.MainFrame.GetFirstChild("Frame_ColorPicker_Contour")	as CMlFrame);
			Frame_ColorPicker_Contour.Visible = _Visible;
		}

		Void SetLight()
		{
			declare CMlFrame Frame_LightSelector <=> (Page.MainFrame.GetFirstChild("Frame_LightSelector")	as CMlFrame);
			Frame_LightSelector.RelativePosition.X = G_PosLightX;
			Frame_LightSelector.RelativePosition.Y = G_PosLightY;

			declare Real POSX       = (G_PosLightX + {{{C_LightSize.X/2.}}})/50.;
			declare Real POSY       = (G_PosLightY + {{{C_LightSize.Y/2.}}})/50.;
			
			G_TrueColorPick = ToRGB(<G_ColorPickRadian/360., POSX, POSY>);
			

			declare CMlQuad Quad_LightPick     <=> (Page.MainFrame.GetFirstChild("Quad_LightPick")	as CMlQuad);
			declare CMlQuad Quad_ColorPreview     <=> (Page.MainFrame.GetFirstChild("Quad_ColorPreview")	as CMlQuad);
			Quad_LightPick.Colorize    = G_TrueColorPick;
			Quad_ColorPreview.BgColor = G_TrueColorPick;
			declare Text ColorToText = TextLib::ColorToText(G_TrueColorPick);
			declare CMlEntry Entry_ColorPicker <=> (Page.MainFrame.GetFirstChild("Entry_ColorPicker")	as CMlEntry);
			Entry_ColorPicker.Value  = ColorToText;
			
			declare Integer[] Page_ActiveSections for Page;
			if(Page_ActiveSections.existskey(G_QuadId))
			{
				SetSectionColor(G_QuadId, G_TrueColorPick, G_IsAnim);
			}
			else
			{
				SetNewsColor(ColorToText, G_IsAnim);
			}
		}

		Void SetColor(Real _PosY)
		{
			declare CMlFrame Frame_ColorSelector <=> (Page.MainFrame.GetFirstChild("Frame_ColorSelector")	as CMlFrame);
			Frame_ColorSelector.RelativePosition.Y = _PosY/{{{G_Scale}}} + {{{C_ColorPos.Y}}};

			declare Real Sith = {{{C_ColorSize.Y}}}/6.;
			declare Real POSY = _PosY/{{{G_Scale}}} + {{{C_ColorSize.Y/2.}}};
			//declare Real Groupe = POSY/(Sith*1);
			declare Integer Groupe  =  ColorPicker_MathLib::FloorInteger(POSY/Sith);
			//declare Real Reste =  (POSY - ColorPicker_MathLib::FloorInteger(POSY));
			declare Real Reste =  POSY/Sith - Groupe;


			declare Real Red;
			declare Real Green;
			declare Real Blue;
			switch(Groupe)
			{
				case 0:{
					Red   = 1.;
					Green = Reste;
					Blue  = 0.;
				}
				case 1:{
					Red   = 1-Reste;
					Green = 1.;
					Blue  = 0.;
				}
				case 2:{
					Red   = 0.;
					Green = 1.;
					Blue  = Reste;
				}
				case 3:{
					Red   = 0.;
					Green = 1-Reste;
					Blue  = 1.;
				}
				case 4:{
					Red   = Reste;
					Green = 0.;
					Blue  = 1.;
				}
				case 5:{
					Red   = 1.;
					Green = 0.;
					Blue  = 1-Reste;
				}
			}
			declare CMlQuad Quad_Light     <=> (Page.MainFrame.GetFirstChild("Quad_Light")	as CMlQuad);
			G_ColorPick = <Red, Green, Blue>;
			G_ColorPickRadian = POSY/{{{C_ColorSize.Y}}}*360.;
			Quad_Light.Colorize = G_ColorPick;
			SetLight();
		}


		Void SetColorToPicker(Text _TextColor)
		{
			declare Vec3 ColorRGB  = TextLib::ToColor(_TextColor);
			if(ColorRGB.Y == 1. && ColorRGB.Z == 1.) ColorRGB.Z = 0.99; //Fix pour bug conversion du ToHSV
			declare Vec3 ColorHSV  = ToHSV(ColorRGB);
			declare Real PosColorX = ColorHSV.X*{{{C_ColorSize.X*G_Scale}}} -{{{C_ColorSize.X/2.*G_Scale}}};
			declare Real PosColorY = ColorHSV.X*{{{C_ColorSize.Y*G_Scale}}} -{{{C_ColorSize.Y/2.*G_Scale}}};
			if(PosColorX == {{{C_ColorSize.X/2.*G_Scale}}}) PosColorX -= 0.01; //Fix pour autre bug de conversion
			if(PosColorY == {{{C_ColorSize.Y/2.*G_Scale}}}) PosColorY -= 0.01; //Fix pour autre bug de conversion

			G_PosLightX = (50 * ColorHSV.Y) - {{{C_LightSize.X/2.}}};
			G_PosLightY = (50 * ColorHSV.Z) - {{{C_LightSize.Y/2.}}};

			SetColor(PosColorY);
		}
		

	""";
	return MLText;
}

Text Inject_Main()
{
	declare Text MLText = """
		Init_ColorPicker();
		declare Boolean ClickOnLight;
		declare Boolean ClickOnColor;
	""";
	return MLText;
}

Text Inject_While()
{

	declare Real ColorPosX = C_ColorPos.X;
	declare Real ColorPosY = C_ColorPos.Y;

	declare Text MLText = """


			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::EntrySubmit: {
						if (Event.ControlId == "Entry_ColorPicker")
						{
							declare Result = (Event.Control as CMlEntry);
							G_IsAnim = True;
							SetColorToPicker(Result.Value);
						}
					}
					case CMlEvent::Type::MouseOver: {
						if (Event.ControlId == "Quad_")
						{

						}
					}
					case CMlEvent::Type::MouseOut: {
						if (Event.ControlId == "Quad_")
						{

						}
					}
					case CMlEvent::Type::MouseClick: {
						if (Event.ControlId == "Quad_Light")
						{
							ClickOnLight = True;
							ClickOnColor = False;
						}
						else if (Event.ControlId == "Quad_Color")
						{
							ClickOnLight = False;
							ClickOnColor = True;
						}
						else
						{
							ClickOnLight = False;
							ClickOnColor = False;
						}
					}
				}
			}

			if(!MouseLeftButton)
			{
				ClickOnLight = False;
				ClickOnColor = False;
			}

			declare Real MousePosX  = MouseX - {{{G_Position.X}}};
			declare Real MousePosY  = MouseY - {{{G_Position.Y}}};
			declare Real LightSizeX = {{{C_LightSize.X/2. * G_Scale}}};
			declare Real LightSizeY = {{{C_LightSize.Y/2. * G_Scale}}};

			declare Boolean IsMouseOnLightPosX = MousePosX < LightSizeX && 
										 MousePosX > -LightSizeX;
			declare Boolean IsMouseOnLightPosY = MousePosY < LightSizeY && 
										 MousePosY > -LightSizeY;
			if(MouseLeftButton && ClickOnLight)
			{
				if(IsMouseOnLightPosX) G_PosLightX = (MouseX - {{{G_Position.X}}})/{{{G_Scale}}};
				else G_PosLightX = SnapPosLightX();
				if(IsMouseOnLightPosY) G_PosLightY = (MouseY - {{{G_Position.Y}}})/{{{G_Scale}}};
				else G_PosLightY = SnapPosLightY();

				G_IsAnim = False;
				SetLight();
			}

			MousePosX = MouseX - {{{G_Position.X + (C_ColorPos.X*G_Scale)}}};
			MousePosY = MouseY - {{{G_Position.Y + (C_ColorPos.Y*G_Scale)}}};
			declare Real ColorSizeX      = {{{C_ColorSize.X/2.*G_Scale}}};
			declare Real ColorSizeY      = {{{C_ColorSize.Y/2.*G_Scale}}};

			declare Boolean IsMouseOnColorPosX = MousePosX < ColorSizeX && 
										 MousePosX > -ColorSizeX;
			declare Boolean IsMouseOnColorPosY = MousePosY < ColorSizeY && 
										 MousePosY > - ColorSizeY;
			if(MouseLeftButton && IsMouseOnColorPosY && ClickOnColor)
			{
				G_IsAnim = False;
				SetColor(MousePosY);
			}


	""";
	return MLText;
}
