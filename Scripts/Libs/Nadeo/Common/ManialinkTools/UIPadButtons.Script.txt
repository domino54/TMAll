/** 
 * Get image for buttons
 */

#Const Version		"2016-01-14"
#Const ScriptName	"ManialinkTools/UIPadButtons.Script.txt"

#Include "TextLib" as TextLib

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultBaseDir			"file://Media/Manialinks/Common/PadButtons/"
#Const C_DefaultPlatform		2
#Const C_DefaultButtonsFolder	"Default/"
#Const C_DefaultButtonsFormat	".dds"
#Const C_DefaultButtonName		"Default"
// Plaforms
#Const C_Platforms [
	"PS4"	=> 0,	///< Take care before changing this number, it is linked to the index of the BUTTONS_MENU, etc arrays !
	"XB1"	=> 1,	///< Take care before changing this number, it is linked to the index of the BUTTONS_MENU, etc arrays !
	"PC"	=> 2	///< Take care before changing this number, it is linked to the index of the BUTTONS_MENU, etc arrays !
]
// Buttons in the menus
#Const BUTTONS_MENU [
	CManiaAppEvent::EMenuNavAction::Select		=>["Cross"			, "A"			, "Enter"],
	CManiaAppEvent::EMenuNavAction::Cancel		=>["Circle"			, "B"			, "Escape"],
	CManiaAppEvent::EMenuNavAction::Action2		=>["Triangle"		, "Y"			, "Enter"],
	CManiaAppEvent::EMenuNavAction::Action1		=>["Square"			, "X"			, "Enter"],
	CManiaAppEvent::EMenuNavAction::PageUp		=>["R1"				, "RB"			, "PageUp"],
	CManiaAppEvent::EMenuNavAction::PageDown	=>["L1"				, "LB"			, "PageDown"],
	CManiaAppEvent::EMenuNavAction::AppMenu		=>["Options"		, "Menu"		, "Escape"],
	CManiaAppEvent::EMenuNavAction::Down		=>["Editor_DPadDown"		, "Editor_DPadDown"		, ""]
]
// Buttons in the editor
#Const BUTTONS_EDITOR [
	CEditorPluginEvent::EInput::Unknown			=>	[""						, ""					, ""],
	CEditorPluginEvent::EInput::Menu			=>	["Options"				, "Menu"				, "Escape"],
	CEditorPluginEvent::EInput::SwitchToRace	=>	["Editor_Square"		, "Editor_X"			, "Enter"],
	CEditorPluginEvent::EInput::Undo			=>	["L2"					, "LT"					, "U"],
	CEditorPluginEvent::EInput::Redo			=>	["R2"					, "RT"					, "R"],
	CEditorPluginEvent::EInput::CursorUp		=>	["Editor_LStickUp"		, "Editor_LStickUp"		, "Up"],
	CEditorPluginEvent::EInput::CursorRight		=>	["Editor_LStickRight"	, "Editor_LStickRight"	, "Right"],
	CEditorPluginEvent::EInput::CursorDown		=>	["Editor_LStickDown"	, "Editor_LStickDown"	, "Down"],
	CEditorPluginEvent::EInput::CursorLeft		=>	["Editor_LStickLeft"	, "Editor_LStickLeft"	, "Left"],
	CEditorPluginEvent::EInput::CursorRaise		=>	["R1"					, "RB"					, "PageUp"],
	CEditorPluginEvent::EInput::CursorLower		=>	["L1"					, "LB"					, "PageDown"],
	CEditorPluginEvent::EInput::CursorTurn		=>	["Editor_Triangle"		, "Editor_Y"			, "RCtrl"],
	CEditorPluginEvent::EInput::CursorPick		=>	["Editor_LStickClick"	, "Editor_LStickClick"	, "E"],
	CEditorPluginEvent::EInput::CursorPlace		=>	["Editor_Cross"			, "Editor_A"			, "Space"],
	CEditorPluginEvent::EInput::CursorDelete	=>	["Editor_Circle"		, "Editor_B"			, "Del"],
	CEditorPluginEvent::EInput::CameraUp		=>	["Editor_RStickUp"		, "Editor_RStickUp"		, "Numpad8"],
	CEditorPluginEvent::EInput::CameraRight		=>	["Editor_RStickRight"	, "Editor_RStickRight"	, "Numpad4"],
	CEditorPluginEvent::EInput::CameraDown		=>	["Editor_RStickDown"	, "Editor_RStickDown"	, "Numpad2"],
	CEditorPluginEvent::EInput::CameraLeft		=>	["Editor_RStickLeft"	, "Editor_RStickLeft"	, "Numpad6"],
	CEditorPluginEvent::EInput::CameraZoomNext	=>	["Editor_RStickClick"	, "Editor_RStickClick"	, ""],
	CEditorPluginEvent::EInput::IconUp			=>	["Editor_DPadUp"		, "Editor_DPadUp"		, ""],
	CEditorPluginEvent::EInput::IconRight		=>	["Editor_DPadRight"		, "Editor_DPadRight"	, ""],
	CEditorPluginEvent::EInput::IconDown		=>	["Editor_DPadDown"		, "Editor_DPadDown"		, ""],
	CEditorPluginEvent::EInput::IconLeft		=>	["Editor_DPadLeft"		, "Editor_DPadLeft"		, ""]
]
// Named button in the editor
#Const BUTTONS_NAMED [
	"SelectModel"		=> ["Editor_RStick"			, "Editor_RStick"		, ""],
	"SelectFamily"		=> ["Editor_LStick"			, "Editor_LStick"		, ""],
	"Camera"			=> ["Editor_RStick"			, "Editor_RStick"		, ""],
	"MoveBlock"			=> ["Editor_DPad"			, "Editor_DPad"			, ""],
	"MoveBlock2"		=> ["Editor_LStick"			, "Editor_LStick"		, ""],
	"LeftStick"			=> ["Editor_LStick"			, "Editor_LStick"		, ""],
	"RightStick"		=> ["Editor_RStick"			, "Editor_RStick"		, ""],
	"Zoom"				=> ["Editor_RStickClick"	, "Editor_RStickClick"	, ""],
	"RandomModel"		=> ["Editor_LStickClick"	, "Editor_LStickClick"	, ""],
	"PingModel"			=> ["Editor_LStickClick"	, "Editor_LStickClick"	, ""],
	"LeftStickMulti"	=> ["Editor_LStickMulti"	, "Editor_LStickMulti"	, ""],
	"RightStickMulti"	=> ["Editor_RStickMulti"	, "Editor_RStickMulti"	, ""],
	"PrevMacroblock"	=> ["L1"					, "LB"					, ""],
	"PrevFamily"		=> ["L2"					, "LT"					, ""],
	"NextMacroblock"	=> ["R1"					, "RB"					, ""],
	"NextFamily"		=> ["R2"					, "RT"					, ""],
	// UI
	"UI_Next2"			=> ["R2"					, "RT"					, "R"],
	"UI_Prev2"			=> ["L2"					, "LT"					, "U"],
	"UI_Next1"			=> ["R1"					, "RB"					, "PageUp"],
	"UI_Prev1"			=> ["L1"					, "LB"					, "PageDown"],
	// Helper
	"Helper_A"			=> ["Editor_Cross_Helper"		, "Editor_A_Helper"			, ""],
	"Helper_B"			=> ["Editor_Circle_Helper"		, "Editor_B_Helper"			, ""],
	"Helper_X"			=> ["Editor_Square_Helper"		, "Editor_X_Helper"			, ""],
	"Helper_Y"			=> ["Editor_Triangle_Helper"	, "Editor_Y_Helper"			, ""],
	"Helper_Up"			=> ["Editor_LStickUp_Helper"	, "Editor_LStickUp_Helper"	, ""],
	"Helper_Down"		=> ["Editor_LStickDown_Helper"	, "Editor_LStickDown_Helper", ""],
	"Helper_DPad"		=> ["Editor_DPad_Helper"		, "Editor_DPad_Helper"		, ""]
]
// Named button outside the editor
#Const ALTERNATE_BUTTONS_NAMED [
	"PageUp_2"   => ["R1_alt.dds", "RB_alt.dds", "PageUp"],
	"PageDown_2" => ["L1_alt.dds", "LB_alt.dds", "PageDown"],
	"View"       => ["TouchPad.dds"  , "View.dds"		, "F1"]]

// ---------------------------------- //
// Globales
// ---------------------------------- //
declare Integer	G_Private_Platform; ///< Current platform, always use Private_SetPlatform() and GetPlatform() to set and get its value

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //


// ---------------------------------- //
/** Set the current platform
 *
 *	@param	_Platform				The platform to use
 */
Void Private_SetPlatform(Integer _Platform) {
	G_Private_Platform = _Platform;
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Get platform index from name
 *
 *	@param	_Platform				Name of the platform
 *
 *	@return							Platform index if found, default platform index otherwise
 */
Integer GetPlatform(Text _Platform) {
	if (!C_Platforms.existskey(_Platform)) return C_DefaultPlatform;
	return C_Platforms[_Platform];
}

// ---------------------------------- //
/** Get current platform index
 *
 *	@return							The current platform index
 */
Integer GetPlatform() {
	if (!C_Platforms.exists(G_Private_Platform)) return C_DefaultPlatform;
	return G_Private_Platform;
}

// ---------------------------------- //
/** Get platform name from index
 *
 *	@param	_PlatformIndex			Index of the platform
 *
 *	@return							Platform name if found, default platform name otherwise
 */
Text GetPlatformName(Integer _PlatformIndex) {
	if (!C_Platforms.exists(_PlatformIndex)) return C_Platforms.keyof(C_DefaultPlatform);
	return C_Platforms.keyof(_PlatformIndex);
}

// ---------------------------------- //
/** Get the folder stocking the images for the given platform
 *
 *	@param	_Platform				The platform to get
 *
 *	@return							The folder
 */
Text GetPlatformFolder(Integer _Platform) {
	return GetPlatformName(_Platform)^"/";
}

// ---------------------------------- //
/** Get the platform index associated to the given system
 *
 *	@param	_System					The system to check
 *
 *	@return							The platform index of the given system
 */
Integer GetPlatformIndexFromSystem(Text _System) {
	switch (_System) {
		case "::ESystemPlatform::PS4"	: return C_Platforms["PS4"];
		case "::ESystemPlatform::XBoxOne"	: return C_Platforms["XB1"];
		// Display XB1 controller buttons on PC for now
		case "::ESystemPlatform::Steam"	: return C_Platforms["XB1"];//return C_Platforms["PC"];
		case "::ESystemPlatform::Uplay"	: return C_Platforms["XB1"];//return C_Platforms["PC"];
		case "::ESystemPlatform::None"	: return C_Platforms["XB1"];//return C_Platforms["PC"];
	}
	
	return C_DefaultPlatform;
}

Integer GetPlatformIndexFromSystem(CManiaApp::ESystemPlatform _System) {
	return GetPlatformIndexFromSystem(""^_System);
}
// ---------------------------------- //
// Buttons named
// ---------------------------------- //
// ---------------------------------- //
/** Get the name of the image associated to the given named button
 *
 *	@param	_Platform				The platform used
 *	@param	_Button					The button to find
 *
 *	@return							The image associated to the button
 */
Text Private_GetButtonName(Integer _Platform, Text _Button) {
	// TODO LATER : recuprer ici le mapping custom si besoin
	
	if (BUTTONS_NAMED.existskey(_Button)) {
		declare ButtonByPf = BUTTONS_NAMED[_Button];
		if (ButtonByPf.existskey(_Platform)) return ButtonByPf[_Platform];
		if (ButtonByPf.count > 0) return ButtonByPf[0];
	}
	
	return "";
}
// ---------------------------------- //
/// Overload Private_GetButtonName()
Text Private_GetButtonName(Text _Button) {
	return Private_GetButtonName(GetPlatform(), _Button);
}

// ---------------------------------- //
/** Get the path of the image associated to the given named button
 *
 *	@param	_Platform				The platform used
 *	@param	_Button					The button to find
 *
 *	@return							The path to the image associated to the button
 */
Text GetImage(Integer _Platform, Text _Button) {
	declare ButtonName = Private_GetButtonName(_Platform, _Button);
	
	if (ButtonName != "") {
		declare PlatformFolder	= GetPlatformFolder(_Platform);
		return C_DefaultBaseDir^PlatformFolder^ButtonName^C_DefaultButtonsFormat;
	} else {
		return C_DefaultBaseDir^C_DefaultButtonsFolder^C_DefaultButtonName^C_DefaultButtonsFormat;
	}
	
	return "";
}
// ---------------------------------- //
/// Overload GetImage()
Text GetImage(Text _Button) {
	return GetImage(GetPlatform(), _Button);
}

// ---------------------------------- //
// Buttons menu
// ---------------------------------- //
// ---------------------------------- //
/** Get the name of the image associated to the given menu button
 *
 *	@param	_Platform				The platform used
 *	@param	_Button					The button to find
 *
 *	@return							The image associated to the button
 */
Text Private_GetButtonName(Integer _Platform, CManiaAppEvent::EMenuNavAction _Button) {
	declare CManiaAppEvent::EMenuNavAction Truebutton = _Button;
	if (! BUTTONS_MENU.existskey(Truebutton)) return "";
	
	declare ButtonByPf = BUTTONS_MENU[Truebutton];
	
	if (ButtonByPf.existskey(_Platform)) return ButtonByPf[_Platform];
	if (ButtonByPf.count > 0) return ButtonByPf[0];
	
	return "";
}
// ---------------------------------- //
/// Overload Private_GetButtonName()
Text Private_GetButtonName(CManiaAppEvent::EMenuNavAction _Button) {
	return Private_GetButtonName(GetPlatform(), _Button);
}

// ---------------------------------- //
/** Get the default name of the button if not defined in the CONST
 *
 *	@param	_Button					The button to check
 *
 *	@return							The default name for this button
 */
Text Private_Get_DefaultButtonName(CManiaAppEvent::EMenuNavAction _Button) {
	switch (_Button) {
		case CManiaAppEvent::EMenuNavAction::Up    : return "Up";
		case CManiaAppEvent::EMenuNavAction::Right : return "Right";
		case CManiaAppEvent::EMenuNavAction::Left  : return "Left";
		case CManiaAppEvent::EMenuNavAction::Down  : return "Down";
	}

	declare Splitted = TextLib::Split("::", ""^_Button);
	if (Splitted.count > 0) return Splitted[Splitted.count-1];
	
	return "";
}

// ---------------------------------- //
/** Get the path of the image associated to the given menu button
 *
 *	@param	_Platform				The platform used
 *	@param	_Button					The button to find
 *
 *	@return							The path to the image associated to the button
 */
Text GetImage(Integer _Platform, CManiaAppEvent::EMenuNavAction _Button) {
	declare ButtonName = Private_GetButtonName(_Platform, _Button);
	
	if (ButtonName != "") {
		declare PlatformFolder = GetPlatformFolder(_Platform);
		return C_DefaultBaseDir^PlatformFolder^ButtonName^C_DefaultButtonsFormat;
	} else {
		ButtonName = Private_Get_DefaultButtonName(_Button);
		return C_DefaultBaseDir^C_DefaultButtonsFolder^ButtonName^C_DefaultButtonsFormat;
	}
	
	return "";
}
// ---------------------------------- //
/// Overload GetImage()
Text GetImage(CManiaAppEvent::EMenuNavAction _Button) {
	return GetImage(GetPlatform(), _Button);
}

// ---------------------------------- //
// Buttons editor
// ---------------------------------- //
// ---------------------------------- //
/** Get the name of the image associated to the given editor button
 *
 *	@param	_Platform				The platform used
 *	@param	_Button					The button to find
 *
 *	@return							The image associated to the button
 */
Text Private_GetButtonName(Integer _Platform, CEditorPluginEvent::EInput _Button) {
	declare CEditorPluginEvent::EInput Truebutton = _Button;
	
	if (! BUTTONS_EDITOR.existskey(Truebutton)) return "";
	declare ButtonByPf = BUTTONS_EDITOR[Truebutton];
		
	if (ButtonByPf.existskey(_Platform)) return ButtonByPf[_Platform];
	if (ButtonByPf.count > 0) return ButtonByPf[0];
	
	return "";
}
// ---------------------------------- //
/// Overload Private_GetButtonName()
Text Private_GetButtonName(CEditorPluginEvent::EInput _Button) {
	return Private_GetButtonName(GetPlatform(), _Button);
}

// ---------------------------------- //
/** Get the default name of the button if not defined in the CONST
 *
 *	@param	_Button					The button to check
 *
 *	@return							The default name for this button
 */
Text Private_Get_DefaultButtonName(CEditorPluginEvent::EInput _Button) {
	declare Splitted = TextLib::Split("::", ""^_Button);
	if (Splitted.count > 0) return Splitted[Splitted.count-1];
	
	return "";
}

// ---------------------------------- //
/** Get the path of the image associated to the given editor button
 *
 *	@param	_Platform				The platform used
 *	@param	_Button					The button to find
 *
 *	@return							The path to the image associated to the button
 */
Text GetImage(Integer _Platform, CEditorPluginEvent::EInput _Button) {
	declare ButtonName = Private_GetButtonName(_Platform, _Button);
	
	if (ButtonName != "") {
		declare PlatformFolder = GetPlatformFolder(_Platform);
		return C_DefaultBaseDir^PlatformFolder^ButtonName^C_DefaultButtonsFormat;
	} else {
		ButtonName = Private_Get_DefaultButtonName(_Button);
		return C_DefaultBaseDir^C_DefaultButtonsFolder^ButtonName^C_DefaultButtonsFormat;
	}
	
	return "";
}
// ---------------------------------- //
/// Overload GetImage()
Text GetImage(CEditorPluginEvent::EInput _Button) {
	return GetImage(GetPlatform(), _Button);
}

// ---------------------------------- //
// Buttons alternate
// ---------------------------------- //
Text GetAlternateImage(Text _Button) {
	declare PlatformFolder = GetPlatformFolder(GetPlatform());
	
	if (ALTERNATE_BUTTONS_NAMED.existskey(_Button)) {
		return C_DefaultBaseDir^PlatformFolder^ALTERNATE_BUTTONS_NAMED[_Button][GetPlatform()];
	}
	
	return "";
}

// ---------------------------------- //
/// Unload the library
Void Unload() {

}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	declare PlatformIndex = GetPlatformIndexFromSystem(""^SystemPlatform);
	Private_SetPlatform(PlatformIndex);
}

Text GetPadName() {
	return _("|name of the control pad|controller");
}

Text GetLeftStickName() {
	return _("the left stick");
}

Text GetRightStickName() {
	return _("the right stick");
}

Text GetDirectionalButtonsName() {
	return _("the directional buttons");
}

Text GetChangeCamButtonName() {
	return _("the right stick");
}

Text GetChangeEditorModeName() {
	return _("the left stick");
}

Text GetL1ButtonName() {
	return "LB";
}

Text GetR1ButtonName() {
	return "RB";
}

Text GetSelectButtonName() {
	return "A";
}

Text GetIngameRestartImage() {
	return GetImage(CManiaAppEvent::EMenuNavAction::Cancel);
}