/**
 * Ce script contient la donnée des textes à intégrer aux modes de jeu.
 **/
#Const ScriptName			"FlavourText.Script.txt"

#Include "TextLib" as TextLib

Text GetHotSeatOurOfGas() {
	return "You're out of gas!";
}

Text GetHotSeatCallOutLead() {
	return _("You have set the fastest time.");
}

Text GetHotSeatCallOutBad() {
	return "";
}


Text GetCampaignTryAgainTitle() {
	return _("End of the race");
}

Text GetCampaignTryAgainSubTitle() {
	return "";
}

Text GetCampaignBronzeTitle() {
	//L16N Title of the final screen where the player has won the bronze medal
	return _("Congratulations!");
}
Text GetCampaignBronzeSubTitle() {
	return _("You have won the bronze medal.");
}

Text GetCampaignSilverTitle() {
	//L16N Title of the final screen where the player has won a silver medal
	return _("Congratulations!");
}
Text GetCampaignSilverSubTitle() {
	return _("You have won the silver medal.");
}

Text GetCampaignGoldTitle() {
	return _("Congratulations!");
}
Text GetCampaignGoldSubTitle() {
	return _("You have won the gold medal.");
}

Text GetCampaignTrackmasterTitle() {
	return _("Congratulations!");
}
Text GetCampaignTrackmasterSubTitle() {
	return _("You have won the author medal.");
}

Text GetCampaignNewRecordTitle() {
	//L16N Title of the final screen where the player has a new record in the campaign
	return _("Congratulations!");
}

Text GetCampaignNewRecordSubtitle() {
	return _("You have a new record!");
}

Text GetCampaignRecordCenterWinTitle() {
	return _("Congratulations!");
}

Text GetCampaignRecordCenterWinSubtitle() {
	return _("You have beaten your friend!");
}

Text GetOnlineWinnerTitle() {
	//L16N Title of the final screen where the player has won a game
	return _("Congratulations!");
}

Text GetOnlineGoodTitle() { //Arnaud - Regarder si débranchable
	//L16N Title of the final screen where the player has made a good score
	return _("Congratulations!");
}

Text GetOnlineAverageTitle() { //Arnaud - Regarder si débranchable
	//L16N Title of the final screen where the player has made a pretty good score
	return "";
}

Text GetOnlineBadTitle() { //Arnaud - Regarder si débranchable
	//L16N Title of the page where the player hasn't won in online game
	return "";
}

Text GetGlobalRankingTitle() {
	//L16N Title of the final screen where the player win new ranks in the worldwide ranking
	return _("Global Ranking");
}

Text GetSplitscreenFinalist() {
	//L16N Finalist status for splitscreen
	return _("Finalist");
}

Text GetSplitscreenBadTitle() {
	//L16N Title of the final screen when the player loses his score
	return _("End of the race");
}

Text GetRoundsNotFinishedRace() {
	//L16N In final screen, the player hasn't finished the race
	return _("End of the race.");
}

Text GetCampaignDefaultSubtitle() {
	//L16N Default name of the official campaign
	return "official campaign & challenges";
}

Text GetChampionshipDefaultSubtitle() {
	
	return "Trackmania Championship";
}

Text GetArcadeDefaultSubtitle() {
	return "Trackmania Arcade";
}

Text GetHotseatDefaultSubtitle() {
	return "Trackmania Hotseat";
}

Text GetSplitscreenDefaultSubtitle() {
	return "Trackmania Splitscreen";
}

Text GetSplitscreenLoseTitle() { //Arnaud - Regarder si débranchable
	return "";
}

Text GetOnlineTimeAttackDefaultSubtitle() {
	return "Trackmania Online Time Attack";
}

Text GetOnlineRoundsDefaultSubtitle() {
	return "Trackmania Online Rounds";
}

Text GetOnlineLapsDefaultSubtitle() {
	return "Trackmania Laps";
}

Text GetFinalistLoseRounds() { //Arnaud - Regarder si débranchable
	return "";
}

Text GetNewRecordOfThePlayer(Integer _PlayerTime) {
	declare PlayerTime = TextLib::TimeToText(_PlayerTime, True);
	PlayerTime ^= TextLib::SubText(_PlayerTime  ^"", (TextLib::Length(_PlayerTime^"")-1), 1);
	//L16N record as in "world record"
	return TextLib::Compose("%1%2", _("New record: "), "$fd4"^PlayerTime);
}

Text GetLastRecordOfThePlayer(Integer _PlayerTime) {
	declare PlayerTime = TextLib::TimeToText(_PlayerTime, True);
	PlayerTime ^= TextLib::SubText(_PlayerTime  ^"", (TextLib::Length(_PlayerTime^"")-1), 1);
	//L16N record as in "world record"
	return TextLib::Compose("%1%2", _("Your last record: "), PlayerTime);
}

Text GetRecordOfThePlayer(Integer _PlayerTime) {
	declare PlayerTime = TextLib::TimeToText(_PlayerTime, True);
	PlayerTime ^= TextLib::SubText(_PlayerTime  ^"", (TextLib::Length(_PlayerTime^"")-1), 1);
	//L16N record as in "world record"
	return TextLib::Compose("%1%2", _("Your record: "), "$fd4"^PlayerTime);
}

Text GetPlayerTime(Integer _PlayerTime) {
	declare PlayerTime = TextLib::TimeToText(_PlayerTime, True);
	PlayerTime ^= TextLib::SubText(_PlayerTime  ^"", (TextLib::Length(_PlayerTime^"")-1), 1);
	//L16N record as in "world record"
	return TextLib::Compose("%1%2", _("Your time: "), "$fd4"^PlayerTime);
}
