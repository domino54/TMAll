/**
 * Ce script contient les chemins vers les images de Reward Screen
 **/
#Const ScriptName			"FlavourText.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 				as Font
#Include "Libs/Nadeo/Common/ManialinkTools/UIPadButtons.Script.txt"						as UIButtons
#Include "Libs/Nadeo/Common/Ingame/IngameLayers.Script.txt" 							as Layers
#Include "Libs/Trackmania/Ingame/RewardScreens.Script.txt"			as RewardScreens
#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"  				as Manialink
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt" 						as Colors

#Const C_LAYERNAME_REWARDS					"UI_Rewards"
#Const IMGPATH								"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/"
#Const C_ImgAchievements					"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Achievements/"

#Const C_REWARDS_TRANSITION_SIZE_X			1012.5
#Const C_REWARDS_TEXT_INTERVAL				-0.13
#Const C_REWARDS_BUTTON_SIZE_X				10
#Const C_REWARDS_PRESSTOCONTINUE_INTERVAL	1
#Const C_REWARDS_PRESSTOCONTINUE_POSY		-75

#Const C_SPEED_ANIM_BLINKSPEED				0.0125

#Const C_DELAY_ENDRACE						0


declare Text 	G_FontMain;
Text Private_GetRewardsSplitscreen2() 
{
	declare IMGSelect = UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);

	declare Text ML =

	"""
	<frame id="Clip_InfoBigRanking" pos="0. 0. 0" clip="True" clipposn="0. 0." clipsizen="320 180" hidden="0" >
		<frame id="Frame_Reward" pos="0 0 35." hidden="1" scale="1.0">
			<quad id="Quad_Image" pos="0 0 .2" size="32 18" valign="center" halign="center" bgcolor="000"/>	
		</frame>
	</frame>

	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Include "AnimLib" as AL
	
	#Const DebugName  "L_RewardScreens1"
	
	main() 
	{

		while(True) 
		{
			yield;
			
		}
	}
	""";
	return ML;
}

Text Private_GetRewards2(Integer _NbPlayers) 
{
	declare IMGSelect = UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);

	declare Integer Count_InstancesY         = 4;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = 58.1;
	declare Real	PosYFirstQuad            = -5.6;

	declare Real	SizeXQuad                = 131.2;
	declare Real	SizeYQuad                = 11.5;
	declare Real	MarginY_Button           = 0.8;
	declare Real	MarginX_Button           = 4.0;
	
	declare Real	SizeXQuad2                = 19.;

	declare Text    ToDel          = IMGPATH ^ "ToDel/Ecran Reward DÃ©clinaison 1.jpg";
	declare Text    IMG_MedalUP    = C_ImgAchievements ^ "Medal_Up.dds";
	declare Text    IMG_MedalDO    = C_ImgAchievements ^ "Medal_Down.dds";
	declare Text    IMG_NoMedalUP  = IMGPATH ^ "MedalEmpty_Up.dds";
	declare Text    IMG_NoMedalDO  = IMGPATH ^ "MedalEmpty_Down.dds";
	declare Text    IMG_Mode       = IMGPATH ^ "Modes/MultiLap.dds";
	declare Text    Icon_Zone      = IMGPATH ^ "Icon_Zone.dds";
	declare Text    Reward_RightBG = IMGPATH ^ "Reward_RightBG.dds";
	declare Text    Reward_LeftBG  = IMGPATH ^ "Reward_LeftBG.dds";
	declare Text	SubFont		   = Font::GetFontName("SubTitle");

	declare Real    SizeXQuadZone_Center = SizeXQuad/2.7;
	declare Real    SizeXQuadZone_Rank   = 55.;

	declare Vec3[Integer]	MedalColors			= [3 => Colors::GetMedalColor(3), 2 => Colors::GetMedalColor(2), 1 => Colors::GetMedalColor(1), 0 => Colors::GetMedalColor(0)];

	declare Text ML =

	"""
<manialink version="3" name="L_UIIngame">

	<framemodel id="Frame_Zone">
		<frame id="Frame_ClipLeft" clip="True" clipposn="0. 0." clipsizen="{{{SizeXQuad}}} {{{SizeYQuad}}}" >
			<frame id="Frame_Center"  pos="0. 0.">
				<quad halign="center" valign="top" size="{{{SizeXQuadZone_Center}}} {{{SizeYQuad}}}" z-index="0" pos="0. {{{SizeYQuad/2.}}}" opacity="0.3" bgcolor="222" id="Quad_BGCenter"/>
				<label id="Label_ZoneName" z-index="2" pos="-8.1 0.8"  size="{{{SizeXQuadZone_Center/1.6}}}" valign="center" halign="left" textsize="3" textpref="$t" text="World"  textcolor="fff" textfont="{{{G_FontMain}}}"/>
				<quad id="Quad_IconZone"    pos="-13.3 0.3"  size="8 8"  valign="center" halign="center" image="{{{Icon_Zone}}}" opacity="0.5" keepratio="Fit"/>
			</frame>
		
			<frame id="Frame_Right"  pos="0. 0.0">
				<quad halign="left" valign="top" size="{{{SizeXQuadZone_Rank}}} {{{SizeYQuad}}}" z-index="0" pos="{{{SizeXQuadZone_Center/2.+1.}}} {{{SizeYQuad/2.}}}" opacity="0.3" bgcolor="222" id="Quad_BGRight"/>
				<label id="Label_ZoneRankRight" pos="63. 0." z-index="2"  size="320 180" valign="center" halign="right" textsize="5" textpref="$t" text="--/--"  textcolor="fff" textfont="{{{SubFont}}}"/>
			</frame>
			<frame id="Frame_Left">
				<quad halign="right" valign="top" size="{{{SizeXQuadZone_Rank}}} {{{SizeYQuad}}}" z-index="0" pos="{{{-SizeXQuadZone_Center/2.-1.}}} {{{SizeYQuad/2.}}}" opacity="0.3" bgcolor="222" id="Quad_BGLeft"/>
				<label id="Label_ZoneRankLeft" pos="-63. 0." z-index="2"  size="320 180" valign="center" halign="left" textsize="5" textpref="$t" text="--/--"  textcolor="fff" textfont="{{{SubFont}}}"/>
			</frame>
		</frame>
		
		<frame id="Frame_ClipAdd">
			<frame id="Frame_ClipRight" clip="True" clipposn="0. 0." clipsizen="{{{SizeXQuad2}}} {{{SizeYQuad}}}" pos="{{{SizeXQuadZone_Center/2.+SizeXQuadZone_Rank-4.}}} 0">
				<label id="Label_RightRankAdd" z-index="2" pos="-7.5 0.5"  size="320 180" valign="center" halign="left" textsize="3" textpref="$t" text="+???"  textcolor="fd4" textfont="{{{SubFont}}}"/>
				<quad  id="Reward_RightBG" halign="left" valign="center" size="{{{SizeXQuad2}}} {{{SizeYQuad}}}" z-index="0" pos="-11.0 0" opacity="0.2" image="{{{Reward_RightBG}}}"/>
			</frame>

			<frame id="Frame_ClipLeft" clip="True" clipposn="-1. 0." clipsizen="{{{SizeXQuad2}}} {{{SizeYQuad}}}" pos="-{{{SizeXQuadZone_Center/2.+SizeXQuadZone_Rank-4.9}}} 0">
				<label id="Label_LeftRankAdd" z-index="2" pos="6.5 0.5"  size="320 180" valign="center" halign="right" textsize="3" textpref="$t" text="+???"  textcolor="fd4" textfont="{{{SubFont}}}"/>
				<quad  id="Reward_LeftBG" halign="left" valign="center" size="{{{SizeXQuad2}}} {{{SizeYQuad}}}" z-index="0" pos="-11.0 0" opacity="0.2" image="{{{Reward_LeftBG}}}"/>
			</frame>
		</frame>
	</framemodel>

	<frame id="Frame_All" z-index="20.">
		<quad z-index="-4" pos="0 0" size="320 180" valign="center" halign="center" image="{{{ToDel}}}" opacity="0.0"/>
		<quad id="Quad_MouseClickReplay" halign="center" valign="center" z-index="-6" size="320 180"  opacity="0." hidden="1" scriptevents="1"/>
		<frame id="Frame_Reward" z-index="0"  pos="-0.5 -3" hidden="1" scale="1.0">
			<frame pos="0.5 3" z-index="-4">
				<quad z-index="-4" pos="0. 0." size="320 180" valign="center" halign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0." bluramount="0."/>
				<quad z-index="-4" pos="0 0" size="320 180" valign="center" halign="center" bgcolor="000" opacity="0.3"/>
			</frame>
			
			<frame id="Frame_Header" pos="34. 57.5">
				<quad  id="Quad_LineHead0" halign="right" valign="top" size="76 0.3"     pos="0 0"  opacity="0.5" bgcolor="fff" />
				<quad  id="Quad_LineHead1" halign="right" valign="bottom" size="6.7 0.6" pos="0 0"  opacity="0.5" bgcolor="fff" />
				<frame id="Frame_Clip" clip="True" clipposn="-38. 25." clipsizen="76. 50.">
					<label id="Label_Mode"  pos="-70 7.2" size="320 180" valign="bottom" halign="left" textsize="5" textpref="$t" text="{{{_("Game Mode")}}}"  textcolor="fff" textfont="{{{G_FontMain}}}"/>
					<label id="Label_Mode2" pos="-45 7.2" size="320 180" valign="center" halign="left" textsize="3" textpref="$t" textprefix="$t"  textcolor="fff" textfont="{{{SubFont}}}" opacity="0."/>
					<quad id="Quad_Mode"    pos="-70.5 6.8"  size="9 9"  valign="center" halign="center" image="{{{IMG_Mode}}}" opacity="0.0" keepratio="Fit"/>
				</frame>
			</frame>

			<frame id="Frame_PlayerInfo" pos="50 0" scale="1.1">
				<quad id="Quad_Separator" halign="center" valign="center" size="1. 37.8" z-index="4" pos="-70.3 26.1" opacity="1." bgcolor="fff"/>
				<frame id="Frame_Clip" clip="True" clipposn="-120. 23." clipsizen="100. 60.">
					<frame id="Frame_Medal">
						<label id="Label_NewMedal"  pos="0. 4." size="320 180" valign="center" halign="center" textsize="2" textpref="$t" text="{{{_("New medal")}}}"  textcolor="fd4" textfont="{{{G_FontMain}}}"/>
						<frame id="Frame_MedalClip" clip="False" clipposn="-119.0 23." clipsizen="80. 50.">
							<quad id="0000" z-index="-4" pos="0 0" size="320 180"  valign="center" halign="center" bgcolor="f00" opacity="0.0" keepratio="Fit"/>
							<quad id="Quad_Medal0" z-index="1" pos="-85.0 29.5" size="28.4 39" valign="center" halign="center" image="{{{IMG_MedalUP}}}" opacity="1.0" keepratio="Fit"/>
							<quad id="Quad_Medal1" z-index="2" pos="-85.0 29.5" size="28.4 39" valign="center" halign="center" image="{{{IMG_MedalUP}}}" opacity="1.0" keepratio="Fit"/>
							<quad id="Quad_Medal2" z-index="3" pos="-85.0 29.5" size="28.4 39" valign="center" halign="center" image="{{{IMG_MedalUP}}}" opacity="1.0" keepratio="Fit"/>
							<quad id="Quad_Medal3" z-index="4" pos="-85.0 29.5" size="28.4 39" valign="center" halign="center" image="{{{IMG_MedalUP}}}" opacity="1.0" keepratio="Fit"/>
							<quad id="Quad_MedalD" z-index="4" pos="-85.0 25" size="80 39" valign="center" halign="center" image="{{{IMG_MedalDO}}}" opacity="0.0" keepratio="Fit"/>
							<frame id="Frame_NoMedal" hidden="1">
								<quad id="Quad_NoMedalUp" z-index="0" pos="-85.0 25" size="79.5 38.5" valign="center" halign="center" image="{{{IMG_NoMedalUP}}}" opacity="0.6" keepratio="Fit"/>
								<quad id="Quad_NoMedalDown" z-index="0" pos="-85.0 25" size="79.5 38.5" valign="center" halign="center" image="{{{IMG_NoMedalDO}}}" opacity="0.6" keepratio="Fit"/>
							</frame>
						</frame>
					</frame>
				</frame>
				<frame id="Frame_Clip" clip="True" clipposn="55. 23." clipsizen="250. 50.">
					<label id="Label_Title"         z-index="2" pos="-63.6 28.5" size="320 180" valign="center" halign="left" textsize="16" textpref="$t" textcolor="fff" textfont="{{{G_FontMain}}}"/>
					<label id="Label_TitleAddPoint" z-index="2" pos="-10.6 36.5" size="320 180" valign="center" halign="left" textsize="5" textpref="$t" textcolor="fd4" textfont="{{{G_FontMain}}}" />
					<label id="Label_Title2"        z-index="2" pos="-63.6 25.1" size="320 180" valign="center" halign="left" textsize="12" textpref="$t" textcolor="fff" textfont="{{{G_FontMain}}}"/>
					<label id="Label_PlayerTime"    z-index="2" pos="-61.8 10.9" size="320 180" valign="center" halign="left" textsize="4"  textpref="$t" textcolor="fff" textfont="{{{G_FontMain}}}"/>
				</frame>
			</frame>
			
			<frame id="Frame_RankZones" pos="-62.2 -12.6">
				<label id="Label_RankZoneTitleRight" z-index="2" pos="{{{- 15+82.4 + SizeXQuadZone_Rank}}} 3.9"  valign="center" halign="right" textsize="3." textpref="$t" text=""  textcolor="fff" textfont="{{{G_FontMain}}}"/>
				<label id="Label_RankZoneTitleLeft" z-index="2"  pos="{{{  15+82.4 - SizeXQuadZone_Center - SizeXQuadZone_Rank}}} 3.9"  valign="center" halign="left" textsize="3." textpref="$t" text="Map Ranking"  textcolor="fff" textfont="{{{G_FontMain}}}"/>
				<frame id="Frame_AngleL" pos="{{{82.4-SizeXQuadZone_Center}}} 0" z-index="4">
					<quad  id="Quad_AngleL1" halign="left" valign="top" size="0.6 2.6" pos="0 0.1" opacity="1.0" bgcolor="fff"/>
					<quad  id="Quad_AngleL0" halign="left" valign="top" size="2.6 0.6" pos="0 0.1" opacity="1.0" bgcolor="fff"/>
				</frame>
				<frame id="Frame_AngleR" pos="{{{82.4}}} 0.1" z-index="4" rot="90">
					<quad  id="Quad_AngleR1" halign="left" valign="top" size="0.6 2.6" pos="0 0.1" opacity="1.0" bgcolor="fff"/>
					<quad  id="Quad_AngleR0" halign="left" valign="top" size="2.6 0.6" pos="0 0.1" opacity="1.0" bgcolor="fff"/>
				</frame>
				<quad  id="Quad_LineFoot0" halign="right" valign="top" size="{{{SizeXQuad+22.7}}} 0.3" pos="140 -49.7"  opacity="0.5" bgcolor="fff" />
				<quad  id="Quad_LineFoot1" halign="right" valign="bottom" size="6.7 0.6"                  pos="140 -49.7"  opacity="0.5" bgcolor="fff" />
				
			""";
			for(I,0,Count_InstancesY-1)
			{
				declare Real IndexY = I*1.;
				declare Real PosnY = PosYFirstQuad - IndexY*SizeYQuad - IndexY*MarginY_Button*1.;
				ML^="""
				<frameinstance modelid="Frame_Zone" z-index="2." pos="{{{PosXFirstQuad}}} {{{PosnY}}}" id="Frame_Zone{{{I}}}"/>
				""";
			}
	ML^="""
			</frame>

		</frame>
	</frame>

	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	
	#Const DebugName		"L_RewardScreens1"
	#Const C_MedalColors	{{{dump(MedalColors)}}}
	#Const C_Hack			True
	#Const C_SkillPoint		0
	#Const C_SkillPointAdd	1
	#Const C_GlobalRankAdd	2
	#Const C_MapRankAdd		6
	#Const C_GlobalRank		10
	#Const C_MapRank		14


	{{{Manialink::GetIncludes()}}}
	{{{Manialink::Load()}}}
	
	declare Integer           G_AnimIndex;
	declare Integer           G_AnimTime;
	declare Integer[Integer]  G_EndTimeAnimAdd;
	declare Integer[Integer]  G_StartTimeAnimAdd;
	declare CMlLabel[Integer] G_AnimAddLabel;
	declare Integer[Integer]  G_PrevRankLeft;
	declare Integer[Integer]  G_PrevRankRight;

	Void SetRankInfos()
	{
		declare	netread Text[] 	  Net_Reward_RankZone 		               for UI;
		declare	netread Text[] 	  Net_Reward_RankScoreLeft 		           for UI;
		declare	netread Integer[Integer] Net_Reward_RankScoreCount_Left    for UI;
		declare	netread Integer[Integer] Net_Reward_RankScore_Left         for UI;
		declare	netread Integer[] Net_Reward_RankAddLeft 		           for UI;
		declare	netread Text[] 	  Net_Reward_RankScoreRight 		       for UI;
		declare	netread Integer[] Net_Reward_RankAddRight 		           for UI;
		declare	netread Integer[Integer] Net_Reward_RankScoreCount_Right   for UI;
		declare	netread Integer[Integer] Net_Reward_RankScore_Right        for UI;
		for(I, 0, {{{Count_InstancesY-1}}})
		{
			declare CMlFrame Frame_Zone     <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^I)     as CMlFrame);
			//Left
			declare CMlLabel Label_ZoneName <=> (Frame_Zone.GetFirstChild("Label_ZoneName")     as CMlLabel);
			declare CMlLabel Label_ZoneRankRight <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")     as CMlLabel);
			declare CMlLabel Label_ZoneRankLeft <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")     as CMlLabel);
			declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")     as CMlLabel);
			declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")     as CMlLabel);
			if(Net_Reward_RankZone.existskey(I))  Label_ZoneName.SetText(Net_Reward_RankZone[I]);
			
			if(Net_Reward_RankScoreCount_Left.existskey(I))
			{
				G_PrevRankLeft[I] = Net_Reward_RankScore_Left[I] + Net_Reward_RankAddLeft[I];
				Label_ZoneRankLeft.SetText(G_PrevRankLeft[I]^"/"^Net_Reward_RankScoreCount_Left[I]);
			}
			if(Net_Reward_RankScoreCount_Right.existskey(I) && Net_Reward_RankScore_Right.existskey(I) && Net_Reward_RankAddRight.existskey(I))
			{
				G_PrevRankRight[I] = Net_Reward_RankScore_Right[I] + Net_Reward_RankAddRight[I];
				Label_ZoneRankRight.SetText(G_PrevRankRight[I]^"/"^Net_Reward_RankScoreCount_Right[I]);
			}
			
			declare Text Prefix = "+";
			if(Net_Reward_RankAddLeft.existskey(I))
			{
				if(Net_Reward_RankAddLeft[I]<0) Prefix = "";
				//Label_LeftRankAdd.SetText(Prefix^Net_Reward_RankAddLeft[I]);
				Label_LeftRankAdd.SetText("+0");
			}

			Prefix = "+";
			if(Net_Reward_RankAddRight.existskey(I))
			{
				if(Net_Reward_RankAddRight[I]<0) Prefix = "";
				//Label_RightRankAdd.SetText(Prefix^Net_Reward_RankAddRight[I]);
				Label_RightRankAdd.SetText("+0");
			}

		}
	}

	Void UpdateInfos()
	{
		declare	netread Text 	Net_Reward_Title 		for UI;
		declare	netread Text 	Net_Reward_Title2 		for UI;
		declare	netread Text 	Net_Reward_SubTitle 	for UI;
		declare	netread Vec3 	Net_Reward_TextColor	for UI;
		declare	netread Integer	Net_PrevMedal           for UI;
		declare	netread Integer	Net_NewMedal            for UI;
		declare netread Text	Net_ModeName			for UI;
		declare netread Boolean	Net_IsRanking			for UI;
		declare netread Boolean Net_Reward_ShowMedal    for UI;
		declare netread Boolean Net_IsNewMedal    for UI;
		
		declare netread Integer	Net_CurTime						for UI;
		declare netread Integer	Net_TimeToNextMedal						for UI;

		declare CMlLabel Label_Title              <=> (Page.MainFrame.GetFirstChild("Label_Title")         as CMlLabel);
		declare CMlLabel Label_TitleAddPoint      <=> (Page.MainFrame.GetFirstChild("Label_TitleAddPoint")         as CMlLabel);
		declare CMlLabel Label_Title2             <=> (Page.MainFrame.GetFirstChild("Label_Title2")        as CMlLabel);
		declare CMlLabel Label_PlayerTime         <=> (Page.MainFrame.GetFirstChild("Label_PlayerTime")    as CMlLabel);
		declare CMlLabel Label_Mode               <=> (Page.MainFrame.GetFirstChild("Label_Mode")          as CMlLabel);
		declare CMlLabel Label_Mode2              <=> (Page.MainFrame.GetFirstChild("Label_Mode2")         as CMlLabel);
		declare CMlLabel Label_RankZoneTitleRight <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleRight") as CMlLabel);
		declare CMlLabel Label_RankZoneTitleLeft  <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleLeft") as CMlLabel);
		declare CMlLabel Label_NewMedal           <=> (Page.MainFrame.GetFirstChild("Label_NewMedal")      as CMlLabel);
		declare CMlQuad  Quad_Medal0               <=> (Page.MainFrame.GetFirstChild("Quad_Medal0")          as CMlQuad);
		declare CMlQuad  Quad_Medal1               <=> (Page.MainFrame.GetFirstChild("Quad_Medal1")          as CMlQuad);
		declare CMlQuad  Quad_Medal2               <=> (Page.MainFrame.GetFirstChild("Quad_Medal2")          as CMlQuad);
		declare CMlQuad  Quad_Medal3               <=> (Page.MainFrame.GetFirstChild("Quad_Medal3")          as CMlQuad);
		declare CMlQuad  Quad_MedalD               <=> (Page.MainFrame.GetFirstChild("Quad_MedalD")          as CMlQuad);
		declare CMlQuad  Quad_NoMedalDown          <=> (Page.MainFrame.GetFirstChild("Quad_NoMedalDown")          as CMlQuad);


		Label_RankZoneTitleLeft.SetText("{{{_("Map Ranking")}}}");
		Label_RankZoneTitleRight.SetText("{{{_("Campaign Ranking")}}}");

		if(Net_NewMedal < 4)
		{
			Quad_NoMedalDown.Hide();
		}

		declare	netread Integer Net_SkillPointBefore for UI;
		declare	netread Integer Net_SkillPointAdd    for UI;
		if(Net_Reward_Title == "")
		{
			Label_Title.SetText(TL::Compose("SP %1", Net_SkillPointBefore^""));
			Label_TitleAddPoint.SetText("");
			Label_Title.TextSizeReal = 16.;
		}
		else
		{
			Label_Title.SetText(Net_Reward_Title);
			Label_Title.TextSizeReal = 12.;
		}
			
		if(!Net_Reward_ShowMedal)
		{
			declare CMlFrame Frame_MedalClip      <=> (Page.MainFrame.GetFirstChild("Frame_MedalClip")     as CMlFrame);
			Frame_MedalClip.Hide();
		}


		//Label_Title2.SetText(TL::GetTranslatedText(Net_Reward_Title2));
		declare Text Reward_SubTitle = TL::GetTranslatedText( Net_Reward_SubTitle); 
		//if(Net_TimeToNextMedal != 0) Reward_SubTitle ^= " $fff ("^TL::GetTranslatedText("Next Medal")^": +" ^ TL::TimeToText(Net_TimeToNextMedal, True)^")";
		Reward_SubTitle = TL::Compose(Reward_SubTitle, "aa");
		//Label_PlayerTime.SetText(Reward_SubTitle);
		
		/*
		if(C_MedalColors.existskey(Net_PrevMedal)) Quad_Medal0.Colorize = C_MedalColors[Net_PrevMedal];
		if(Net_PrevMedal == 4 || C_Hack)
		{
			Quad_Medal0.Opacity = 0.;
			Quad_Medal1.Opacity = 0.;
			Quad_Medal2.Opacity = 0.;
			Quad_Medal3.Opacity = 0.;
			Quad_MedalD.Opacity = 0.;
		}
		else
		{
			Quad_Medal0.Opacity = 1.;
		}
		*/


		//if(Net_IsNewMedal)       Label_NewMedal.Opacity = 1.;
		//else                     
		Label_NewMedal.Opacity = 0.;

		declare Text ModeName = Net_ModeName;
		if(ModeName == "Campaign_Solo") ModeName ="Time Attack";

		//Label_Mode2.SetText(ModeName);
		declare	netread Real Net_AdjustSubTitle	for UI;
		Label_Mode.SetText(Reward_SubTitle);
		Label_Mode.TextSizeReal = 5. + Net_AdjustSubTitle;

		Label_Mode2.RelativePosition.X = -60 + Label_Mode.ComputeWidth(Label_Mode.Value, True);

		declare CMlFrame Frame_RankZones  <=> (Page.MainFrame.GetFirstChild("Frame_RankZones")     as CMlFrame);
		declare CMlFrame Frame_PlayerInfo <=> (Page.MainFrame.GetFirstChild("Frame_PlayerInfo")     as CMlFrame);
		//if(Net_ModeName == "Campaign_Solo" || Net_ModeName == "SingleMapMode")
		if(Net_IsRanking)
		{
			Frame_RankZones.Show();
			Frame_PlayerInfo.Scale = 1.;
		}
		else
		{
			Frame_RankZones.Hide();
			Frame_PlayerInfo.Scale = 1.1;
			Frame_PlayerInfo.RelativePosition.X = 5.; 
			Frame_PlayerInfo.RelativePosition.Y = -10.; 
		}

		SetRankInfos();
	}

	Void AnimStop()
	{
		declare CMlFrame Frame_AngleL        <=> (Page.MainFrame.GetFirstChild("Frame_AngleL")     as CMlFrame);
		declare CMlFrame Frame_AngleR        <=> (Page.MainFrame.GetFirstChild("Frame_AngleR")     as CMlFrame);
		declare CMlQuad Quad_AngleL1         <=> (Page.MainFrame.GetFirstChild("Quad_AngleL1")     as CMlQuad);
		declare CMlQuad Quad_AngleL0         <=> (Page.MainFrame.GetFirstChild("Quad_AngleR0")     as CMlQuad);
		declare CMlQuad Quad_AngleR1         <=> (Page.MainFrame.GetFirstChild("Quad_AngleR1")     as CMlQuad);
		declare CMlQuad Quad_AngleR0         <=> (Page.MainFrame.GetFirstChild("Quad_AngleL0")     as CMlQuad);
		declare CMlLabel Label_Mode          <=> (Page.MainFrame.GetFirstChild("Label_Mode")       as CMlLabel);
		declare CMlLabel Label_Mode2         <=> (Page.MainFrame.GetFirstChild("Label_Mode2")      as CMlLabel);
		declare CMlQuad  Quad_Mode           <=> (Page.MainFrame.GetFirstChild("Quad_Mode")        as CMlQuad);
		declare CMlQuad  Quad_LineHead0      <=> (Page.MainFrame.GetFirstChild("Quad_LineHead0")        as CMlQuad);
		declare CMlQuad  Quad_LineHead1      <=> (Page.MainFrame.GetFirstChild("Quad_LineHead1")        as CMlQuad);
		declare CMlLabel Label_Title         <=> (Page.MainFrame.GetFirstChild("Label_Title")      as CMlLabel);
		declare CMlLabel Label_TitleAddPoint <=> (Page.MainFrame.GetFirstChild("Label_TitleAddPoint")         as CMlLabel);
		declare CMlLabel Label_Title2        <=> (Page.MainFrame.GetFirstChild("Label_Title2")     as CMlLabel);
		declare CMlLabel Label_PlayerTime    <=> (Page.MainFrame.GetFirstChild("Label_PlayerTime") as CMlLabel);
		declare CMlQuad  Quad_Medal0         <=> (Page.MainFrame.GetFirstChild("Quad_Medal0")       as CMlQuad);
		declare CMlQuad  Quad_Medal1         <=> (Page.MainFrame.GetFirstChild("Quad_Medal1")       as CMlQuad);
		declare CMlQuad  Quad_MedalD         <=> (Page.MainFrame.GetFirstChild("Quad_MedalD")       as CMlQuad);
		declare CMlQuad  Quad_Medal2         <=> (Page.MainFrame.GetFirstChild("Quad_Medal2")       as CMlQuad);
		declare CMlQuad  Quad_Medal3         <=> (Page.MainFrame.GetFirstChild("Quad_Medal3")       as CMlQuad);
		declare CMlFrame Frame_NoMedal       <=> (Page.MainFrame.GetFirstChild("Frame_NoMedal")       as CMlFrame);
		declare CMlFrame Frame_Medal         <=> (Page.MainFrame.GetFirstChild("Frame_Medal")     as CMlFrame);
		declare CMlFrame Frame_All           <=> (Page.MainFrame.GetFirstChild("Frame_All")     as CMlFrame);
		LibManialink_AnimStop(Frame_AngleL);
		LibManialink_AnimStop(Frame_AngleR);
		LibManialink_AnimStop(Quad_AngleL1);
		LibManialink_AnimStop(Quad_AngleL0);
		LibManialink_AnimStop(Quad_AngleR1);
		LibManialink_AnimStop(Quad_AngleR0);
		LibManialink_AnimStop(Label_Mode);
		LibManialink_AnimStop(Label_Mode2);
		LibManialink_AnimStop(Quad_Mode);
		LibManialink_AnimStop(Quad_LineHead0);
		LibManialink_AnimStop(Quad_LineHead1);
		LibManialink_AnimStop(Label_Title);
		LibManialink_AnimStop(Label_TitleAddPoint);
		LibManialink_AnimStop(Label_Title2);
		LibManialink_AnimStop(Label_PlayerTime);
		LibManialink_AnimStop(Quad_Medal0);
		LibManialink_AnimStop(Quad_Medal1);
		LibManialink_AnimStop(Quad_MedalD);
		LibManialink_AnimStop(Quad_Medal2);
		LibManialink_AnimStop(Quad_Medal3);
		LibManialink_AnimStop(Frame_NoMedal);
		LibManialink_AnimStop(Frame_All);
		LibManialink_AnimStop(Frame_Medal);

		for(I, 0, {{{Count_InstancesY-1}}})
		{
			declare CMlFrame Frame_Zone     <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^I)     as CMlFrame);
			declare CMlQuad Quad_BGCenter   <=> (Frame_Zone.GetFirstChild("Quad_BGCenter")     as CMlQuad);
			declare CMlQuad Quad_BGRight    <=> (Frame_Zone.GetFirstChild("Quad_BGRight")     as CMlQuad);
			declare CMlQuad Quad_BGLeft     <=> (Frame_Zone.GetFirstChild("Quad_BGLeft")     as CMlQuad);
			declare CMlQuad Reward_RightBG  <=> (Frame_Zone.GetFirstChild("Reward_RightBG")     as CMlQuad);
			declare CMlQuad Reward_LeftBG  <=> (Frame_Zone.GetFirstChild("Reward_LeftBG")     as CMlQuad);
			declare CMlLabel Label_ZoneName <=> (Frame_Zone.GetFirstChild("Label_ZoneName")     as CMlLabel);
			declare CMlLabel Label_ZoneRankRight <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")     as CMlLabel);
			declare CMlLabel Label_ZoneRankLeft <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")     as CMlLabel);
			declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")     as CMlLabel);
			declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")     as CMlLabel);
			declare CMlQuad Quad_IconZone   <=> (Frame_Zone.GetFirstChild("Quad_IconZone")     as CMlQuad);
			LibManialink_AnimStop(Quad_BGCenter);
			LibManialink_AnimStop(Quad_BGRight);
			LibManialink_AnimStop(Quad_BGLeft);
			LibManialink_AnimStop(Reward_RightBG);
			LibManialink_AnimStop(Reward_LeftBG);
			LibManialink_AnimStop(Quad_IconZone);
			LibManialink_AnimStop(Label_ZoneName);
			LibManialink_AnimStop(Label_ZoneRankRight);
			LibManialink_AnimStop(Label_ZoneRankLeft);
			LibManialink_AnimStop(Label_RightRankAdd);
			LibManialink_AnimStop(Label_LeftRankAdd);
			
		}

		declare CMlQuad Quad_LineFoot0     <=> (Page.MainFrame.GetFirstChild("Quad_LineFoot0")     as CMlQuad);
		declare CMlQuad Quad_LineFoot1     <=> (Page.MainFrame.GetFirstChild("Quad_LineFoot1")     as CMlQuad);
		declare CMlLabel Label_RankZoneTitleRight <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleRight")     as CMlLabel);
		declare CMlLabel Label_RankZoneTitleLeft <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleLeft")     as CMlLabel);
		LibManialink_AnimStop(Quad_LineFoot0);
		LibManialink_AnimStop(Quad_LineFoot1);
		LibManialink_AnimStop(Label_RankZoneTitleRight);
		LibManialink_AnimStop(Label_RankZoneTitleLeft);
	}



	Void AnimAddScore()
	{
		switch(G_AnimIndex)
		{
			case 0:
			{
				declare	netread Integer 	Net_PrevMedal             for UI;
				declare	netread Integer 	Net_NewMedal              for UI;

				declare Integer 	Player_PrevMedal = Net_PrevMedal;
				declare Integer 	Player_NewMedal  = Net_NewMedal;

				declare Integer Ecart = Player_PrevMedal - Player_NewMedal;

				declare CMlQuad  Quad_Medal0  <=> (Page.MainFrame.GetFirstChild("Quad_Medal0")          as CMlQuad);
				declare CMlQuad  Quad_Medal1  <=> (Page.MainFrame.GetFirstChild("Quad_Medal1")          as CMlQuad);
				declare CMlQuad  Quad_MedalD  <=> (Page.MainFrame.GetFirstChild("Quad_MedalD")    as CMlQuad);
				declare CMlFrame  Frame_NoMedal <=> (Page.MainFrame.GetFirstChild("Frame_NoMedal")          as CMlFrame);
				declare CMlFrame Frame_Medal  <=> (Page.MainFrame.GetFirstChild("Frame_Medal")     as CMlFrame);
				//Quad_Medal0.Opacity = 0.;
				//Quad_Medal1.Opacity = 0.;
				Quad_MedalD.Opacity = 0.;
				
				declare Integer Decale;
				declare Integer Speed      = 150;
				declare Integer Speed2     = 150;
				declare Integer TimeTick   = 600;
				declare SpeedBump          = 100;
				declare Integer IndexMin = (4 - Player_PrevMedal);
				declare Integer[] DecaleTime = [400, 200, 100, 0];
				for(I, 0, Ecart -1)
				{
					declare MedalIndex = Player_PrevMedal - I - 1;
					Decale = 900 + I * TimeTick -(MedalIndex) + DecaleTime[MedalIndex];
					
					if(MedalIndex == 0)
					{
						//Anim
						//declare CMlFrame Frame_All <=> (Page.MainFrame.GetFirstChild("Frame_All") as CMlFrame);
						//LibManialink_SetTargetScale(Frame_All, 1.03);
						//LibManialink_PresetAnimInsert(Frame_All, Decale+Speed, SpeedBump, "EaseOutCubic");
						//LibManialink_SetTargetScale(Frame_All, 1.0);
						//LibManialink_PresetAnimInsert(Frame_All, Decale+Speed+SpeedBump, SpeedBump, "EaseInCubic");
					}

					
					Speed = 400;
					//Preparation Anim
					declare Integer IndexFocus = (I+ IndexMin);
					declare CMlQuad  MyQuadMedal <=> (Page.MainFrame.GetFirstChild("Quad_Medal"^IndexFocus)   as CMlQuad);
					LibManialink_SetTargetOpacity(MyQuadMedal, 1.);
					LibManialink_SetTargetScale(MyQuadMedal, 1.2);
					LibManialink_SetTargetRotation(MyQuadMedal, 100.);
					LibManialink_SetTargetColorize(MyQuadMedal, C_MedalColors[MedalIndex]);
					LibManialink_SetTargetPosition(MyQuadMedal, <-42., MyQuadMedal.RelativePosition.Y>);
					LibManialink_PresetAnimInsert(MyQuadMedal, 0, 1, "EaseOutCubic");

					LibManialink_SetTargetPosition(MyQuadMedal, <(-103.+IndexFocus*6.), MyQuadMedal.RelativePosition.Y>);
					LibManialink_PresetAnimInsert(MyQuadMedal, Decale, Speed, "EaseOutCubic");
					LibManialink_SetTargetRotation(MyQuadMedal, 0.);
					LibManialink_PresetAnimInsert(MyQuadMedal, Decale, Speed+Speed2, "EaseOutCubic");
					
					//declare Real ScaleBig = 1.1 +0.05*I;
					declare Real ScaleBig = 1.1;
					//LibManialink_SetTargetScale(MyQuadMedal, ScaleBig);
					//LibManialink_PresetAnimInsert(MyQuadMedal, Decale+Speed, SpeedBump, "EaseInOutCirc");
					LibManialink_SetTargetScale(MyQuadMedal, 1.0);
					LibManialink_PresetAnimInsert(MyQuadMedal, Decale+Speed+SpeedBump, SpeedBump+80, "EaseInQuart");
					
					Quad_MedalD.RelativePosition.X = -103.+IndexFocus*6.;
					//Audio.PlaySoundEvent(CAudioManager::ELibSound::HideMenu, IndexFocus, 10., Decale+Speed+SpeedBump);
					//Audio.PlaySoundEvent(CAudioManager::ELibSound::HideMenu, IndexFocus,  10.);
					
				}

				if(Ecart > 0)
				{
					declare CMlLabel Label_NewMedal         <=> (Page.MainFrame.GetFirstChild("Label_NewMedal")      as CMlLabel);
					Label_NewMedal.RelativePosition.X = -108.7+6.*(4-Player_NewMedal);
					LibManialink_SetTargetOpacity(Label_NewMedal, 0.9);
					LibManialink_PresetAnimInsert(Label_NewMedal, Decale+Speed, Speed, "EaseOutCubic");
					
					LibManialink_SetTargetColorize(Quad_MedalD, C_MedalColors[Player_NewMedal]);
					LibManialink_SetTargetOpacity(Quad_MedalD, 1.);
					LibManialink_PresetAnimInsert(Quad_MedalD, Decale+Speed, Speed, "EaseOutCubic");
					LibManialink_SetTargetScale(Quad_MedalD, 1.1);
					LibManialink_PresetAnimInsert(Quad_MedalD, Decale+Speed, SpeedBump, "EaseOutCubic");
					LibManialink_SetTargetScale(Quad_MedalD, 1.0);
					LibManialink_PresetAnimInsert(Quad_MedalD, Decale+Speed+SpeedBump, SpeedBump, "EaseInCubic");
				}


				declare netread Text	Net_ModeName			for UI;
				declare netread Boolean	Net_IsRanking			for UI;
				//if(Net_ModeName == "Campaign_Solo")
				if(Net_IsRanking)
				{
					G_AnimIndex += 1;
					G_AnimTime = Now + Decale + Speed + TimeTick;
				}
				else
				{
					G_AnimIndex = -1;
				}
			}
			case 1:
			{
				declare	netread Text 	Net_Reward_Title 		for UI;
				if(Net_Reward_Title == "")
				{
					declare	netread Integer Net_SkillPointBefore for UI;
					declare	netread Integer Net_SkillPointAdd    for UI;
					G_EndTimeAnimAdd[C_SkillPoint]      = Now + 1000;
					G_StartTimeAnimAdd[C_SkillPoint] = Now;
					declare CMlLabel Label_Title         <=> (Page.MainFrame.GetFirstChild("Label_Title")      as CMlLabel);
					declare CMlLabel Label_TitleAddPoint <=> (Page.MainFrame.GetFirstChild("Label_TitleAddPoint")      as CMlLabel);
					G_AnimAddLabel[C_SkillPoint]     = Label_Title;
					G_AnimAddLabel[C_SkillPointAdd]  = Label_TitleAddPoint;
				}
				
				declare	netread Text[]		Net_Reward_RankScoreLeft  for UI;
				declare	netread Integer[] 	Net_Reward_RankAddLeft    for UI;
				declare	netread Text[]		Net_Reward_RankScoreRight for UI;
				declare	netread Integer[]	Net_Reward_RankAddRight   for UI;
				foreach(Index => AddLeft in Net_Reward_RankAddLeft)
				{
					declare CMlFrame Frame_Zone         <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^Index)     as CMlFrame);
					if(Frame_Zone == Null || AddLeft <= 0) continue;
					declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")        as CMlLabel);
					declare CMlLabel Label_ZoneRankLeft  <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")        as CMlLabel);
					G_AnimAddLabel[C_MapRankAdd+Index]     = Label_LeftRankAdd;
					G_AnimAddLabel[C_MapRank+Index]        = Label_ZoneRankLeft;
					G_StartTimeAnimAdd[C_MapRankAdd+Index] = Now;
					G_EndTimeAnimAdd[C_MapRankAdd+Index]   = Now + 1500 + Index*200;

				}

				foreach(Index => AddRight in Net_Reward_RankAddRight)
				{
					declare CMlFrame Frame_Zone         <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^Index)     as CMlFrame);
					if(Frame_Zone == Null || AddRight <= 0) continue;
					declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")        as CMlLabel);
					declare CMlLabel Label_ZoneRankRight  <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")        as CMlLabel);
					G_AnimAddLabel[C_GlobalRankAdd+Index]     = Label_RightRankAdd;
					G_AnimAddLabel[C_GlobalRank+Index]        = Label_ZoneRankRight;
					G_StartTimeAnimAdd[C_GlobalRankAdd+Index] = Now;
					G_EndTimeAnimAdd[C_GlobalRankAdd+Index]   = Now + 1500 + Index*200;
				}

				G_AnimIndex = -1;
			}
			default:
			{
				G_AnimIndex = -1;
			}
		}
	}
	
	Void SkipAnim()
	{
		G_AnimIndex = -1;
		G_AnimAddLabel.clear();
		G_StartTimeAnimAdd.clear();
		G_EndTimeAnimAdd.clear();

		declare	netread Integer 	Net_PrevMedal             for UI;
		declare	netread Integer 	Net_NewMedal              for UI;
		declare Integer 	Player_PrevMedal = Net_PrevMedal;
		declare Integer 	Player_NewMedal  = Net_NewMedal;

		declare Integer IndexMin = (4 - Player_PrevMedal);
		declare Integer Ecart = Player_PrevMedal - Player_NewMedal;
		for(I, 0, 3-Net_NewMedal)
		{
			declare Integer IndexFocus = I;
			declare Integer MedalIndex = 3 - I;
			declare CMlQuad  MyQuadMedal <=> (Page.MainFrame.GetFirstChild("Quad_Medal"^IndexFocus)   as CMlQuad);
			
			LibManialink_AnimStop(MyQuadMedal);
			MyQuadMedal.RelativePosition.X = (-103.+IndexFocus*6.);
			MyQuadMedal.Scale              = 1.;
			MyQuadMedal.RelativeRotation   = 0.;
			MyQuadMedal.Colorize           = C_MedalColors[MedalIndex];


			
		}

		declare CMlQuad  Quad_MedalD  <=> (Page.MainFrame.GetFirstChild("Quad_MedalD")    as CMlQuad);
		declare CMlLabel Label_NewMedal         <=> (Page.MainFrame.GetFirstChild("Label_NewMedal")      as CMlLabel);
		
		if(Player_NewMedal < 4)
		{
			LibManialink_AnimStop(Quad_MedalD);
			Quad_MedalD.Opacity  = 1.;
			Quad_MedalD.Colorize = C_MedalColors[Player_NewMedal];
			Quad_MedalD.Scale    = 1.;
			Quad_MedalD.RelativePosition.X = -103.+(3-Player_NewMedal)*6.;
		}

		if(Ecart > 0)
		{
			LibManialink_AnimStop(Label_NewMedal);
			Label_NewMedal.Opacity = 0.9;
		}



		declare CMlFrame Frame_AngleL     <=> (Page.MainFrame.GetFirstChild("Frame_AngleL")     as CMlFrame);
		declare CMlFrame Frame_AngleR     <=> (Page.MainFrame.GetFirstChild("Frame_AngleR")     as CMlFrame);
		declare CMlQuad Quad_AngleL1     <=> (Page.MainFrame.GetFirstChild("Quad_AngleL1")     as CMlQuad);
		declare CMlQuad Quad_AngleL0     <=> (Page.MainFrame.GetFirstChild("Quad_AngleL0")     as CMlQuad);
		declare CMlQuad Quad_AngleR1     <=> (Page.MainFrame.GetFirstChild("Quad_AngleR1")     as CMlQuad);
		declare CMlQuad Quad_AngleR0     <=> (Page.MainFrame.GetFirstChild("Quad_AngleR0")     as CMlQuad);
		LibManialink_AnimStop(Frame_AngleL);
		LibManialink_AnimStop(Frame_AngleR);
		LibManialink_AnimStop(Quad_AngleL1);
		LibManialink_AnimStop(Quad_AngleL0);
		LibManialink_AnimStop(Quad_AngleR1);
		LibManialink_AnimStop(Quad_AngleR0);
		Frame_AngleL.RelativePosition.X = {{{82.4-SizeXQuadZone_Center}}};
		Frame_AngleR.RelativePosition.X = {{{82.4}}};
		Frame_AngleL.RelativePosition.Y = 0.;
		Frame_AngleR.RelativePosition.Y = 0.;
		Quad_AngleL1.Size = <0.6,2.6>;
		Quad_AngleL0.Size = <2.6,0.6>;
		Quad_AngleR1.Size = <0.6,2.6>;
		Quad_AngleR0.Size = <2.6,0.6>;
		
		for(I, 0, {{{Count_InstancesY-1}}})
		{
			declare CMlFrame Frame_Zone     <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^I)     as CMlFrame);
			declare CMlQuad Quad_BGCenter   <=> (Frame_Zone.GetFirstChild("Quad_BGCenter")     as CMlQuad);
			declare CMlQuad Quad_BGRight    <=> (Frame_Zone.GetFirstChild("Quad_BGRight")     as CMlQuad);
			declare CMlQuad Quad_BGLeft     <=> (Frame_Zone.GetFirstChild("Quad_BGLeft")     as CMlQuad);
			declare CMlQuad Reward_RightBG  <=> (Frame_Zone.GetFirstChild("Reward_RightBG")     as CMlQuad);
			declare CMlQuad Reward_LeftBG  <=> (Frame_Zone.GetFirstChild("Reward_LeftBG")     as CMlQuad);
			declare CMlQuad Quad_IconZone   <=> (Frame_Zone.GetFirstChild("Quad_IconZone")     as CMlQuad);
			declare CMlLabel Label_ZoneName <=> (Frame_Zone.GetFirstChild("Label_ZoneName")     as CMlLabel);
			declare CMlLabel Label_ZoneRankRight <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")     as CMlLabel);
			declare CMlLabel Label_ZoneRankLeft <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")     as CMlLabel);
			declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")     as CMlLabel);
			declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")     as CMlLabel);

			LibManialink_AnimStop(Quad_BGCenter);
			LibManialink_AnimStop(Quad_BGRight);
			LibManialink_AnimStop(Quad_BGLeft);
			LibManialink_AnimStop(Reward_RightBG);
			LibManialink_AnimStop(Reward_LeftBG);
			LibManialink_AnimStop(Quad_IconZone);
			LibManialink_AnimStop(Label_ZoneName);
			LibManialink_AnimStop(Label_ZoneRankRight);
			LibManialink_AnimStop(Label_ZoneRankLeft);
			LibManialink_AnimStop(Label_RightRankAdd);
			LibManialink_AnimStop(Label_LeftRankAdd);

			Quad_BGCenter.Size.Y = {{{SizeYQuad}}};
			Quad_BGRight.Size.Y  = {{{SizeYQuad}}};
			Quad_BGLeft.Size.Y   = {{{SizeYQuad}}};
			Reward_RightBG.RelativePosition.X = -11.;
			Reward_LeftBG.RelativePosition.X = -11.;
			Quad_IconZone.RelativePosition.Y  = 0.3;
			Label_ZoneName.RelativePosition.Y = 0.8;
			Label_ZoneRankRight.RelativePosition.Y = 1.;
			Label_ZoneRankLeft.RelativePosition.Y  = 1.;
			Label_RightRankAdd.RelativePosition.Y  = 0.5;
			Label_LeftRankAdd.RelativePosition.Y   = 0.5;
			
		}
		
		declare CMlQuad Quad_LineFoot0     <=> (Page.MainFrame.GetFirstChild("Quad_LineFoot0")     as CMlQuad);
		declare CMlQuad Quad_LineFoot1     <=> (Page.MainFrame.GetFirstChild("Quad_LineFoot1")     as CMlQuad);
		LibManialink_AnimStop(Quad_LineFoot0);
		LibManialink_AnimStop(Quad_LineFoot1);
		Quad_LineFoot0.Size = <{{{SizeXQuad+34.7}}},0.3>;
		Quad_LineFoot1.Size = <6.7,0.6>;
		
		declare CMlLabel Label_RankZoneTitleRight <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleRight")     as CMlLabel);
		LibManialink_AnimStop(Label_RankZoneTitleRight);
		Label_RankZoneTitleRight.Opacity = 1.;

		declare CMlLabel Label_RankZoneTitleLeft <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleLeft")     as CMlLabel);
		LibManialink_AnimStop(Label_RankZoneTitleLeft);
		Label_RankZoneTitleLeft.Opacity = 1.;

		///////////////////////
		////Footer
		//declare CMlQuad  Quad_Medal0          <=> (Page.MainFrame.GetFirstChild("Quad_Medal0")       as CMlQuad);
		//declare CMlFrame Frame_Medal         <=> (Page.MainFrame.GetFirstChild("Frame_Medal")     as CMlFrame);
		////Quad_Medal0.RelativePosition.X       = -55.;
		//Label_Title.RelativePosition.X      = -253.6;
		//Label_TitleAddPoint.RelativePosition.X      = -253.6;
		//Label_Title2.RelativePosition.X     = -253.6;
		//Label_PlayerTime.RelativePosition.X = -171.8;

		///////////////////////
		//Header - Game Mode
		declare CMlLabel Label_Mode       <=> (Page.MainFrame.GetFirstChild("Label_Mode")       as CMlLabel);
		declare CMlLabel Label_Mode2      <=> (Page.MainFrame.GetFirstChild("Label_Mode2")      as CMlLabel);
		declare CMlQuad  Quad_Mode        <=> (Page.MainFrame.GetFirstChild("Quad_Mode")        as CMlQuad);
		declare CMlQuad  Quad_LineHead0   <=> (Page.MainFrame.GetFirstChild("Quad_LineHead0")        as CMlQuad);
		declare CMlQuad  Quad_LineHead1   <=> (Page.MainFrame.GetFirstChild("Quad_LineHead1")        as CMlQuad);
		LibManialink_AnimStop(Quad_LineHead0);
		LibManialink_AnimStop(Quad_LineHead1);
		LibManialink_AnimStop(Label_Mode);
		LibManialink_AnimStop(Label_Mode2);
		LibManialink_AnimStop(Quad_Mode);

		Quad_LineHead0.Size = <76., 0.3>;
		Quad_LineHead1.Size = <6.7, 0.6>;
		Label_Mode.RelativePosition.Y       = 3.2;
		Label_Mode2.RelativePosition.Y      = 3.2;
		Quad_Mode.RelativePosition.Y        = 6.8;
		
		///////////////////////
		//Middle - Title
		declare	netread Integer Net_SkillPointBefore for UI;
		declare CMlQuad  Quad_Separator      <=> (Page.MainFrame.GetFirstChild("Quad_Separator")   as CMlQuad);
		declare CMlFrame Frame_Medal         <=> (Page.MainFrame.GetFirstChild("Frame_Medal")     as CMlFrame);
		declare CMlLabel Label_Title         <=> (Page.MainFrame.GetFirstChild("Label_Title")      as CMlLabel);
		declare CMlLabel Label_TitleAddPoint <=> (Page.MainFrame.GetFirstChild("Label_TitleAddPoint")      as CMlLabel);
		declare CMlLabel Label_Title2        <=> (Page.MainFrame.GetFirstChild("Label_Title2")     as CMlLabel);
		declare CMlLabel Label_PlayerTime    <=> (Page.MainFrame.GetFirstChild("Label_PlayerTime") as CMlLabel);
		LibManialink_AnimStop(Quad_Separator);
		LibManialink_AnimStop(Frame_Medal);
		LibManialink_AnimStop(Label_Title);
		LibManialink_AnimStop(Label_TitleAddPoint);
		LibManialink_AnimStop(Label_Title2);
		LibManialink_AnimStop(Label_PlayerTime);
		Quad_Separator.Size                 = <1.,37.8>;
		declare Real PosFrameMedal = -6. + Player_NewMedal*7.;
		Frame_Medal.RelativePosition.X         = PosFrameMedal;
		
		Label_Title.RelativePosition.X         = -63.6;
		declare Real PosAdd = -45.+TL::Length(Net_SkillPointBefore^"")*7.;
		Label_TitleAddPoint.RelativePosition.X = PosAdd;
		Label_Title2.RelativePosition.X        = -65.0;
		Label_PlayerTime.RelativePosition.X    = -61.8;


		
		declare	netread Text 	Net_Reward_Title 		for UI;
		if(Net_Reward_Title == "")
		{

			declare	netread Integer Net_SkillPointBefore for UI;
			declare	netread Integer Net_SkillPointAdd    for UI;
			G_EndTimeAnimAdd[C_SkillPoint]      = 0;
			G_StartTimeAnimAdd[C_SkillPoint] = Now;
			declare CMlLabel Label_Title         <=> (Page.MainFrame.GetFirstChild("Label_Title")      as CMlLabel);
			declare CMlLabel Label_TitleAddPoint <=> (Page.MainFrame.GetFirstChild("Label_TitleAddPoint")      as CMlLabel);
			G_AnimAddLabel[C_SkillPoint]     = Label_Title;
			G_AnimAddLabel[C_SkillPointAdd]  = Label_TitleAddPoint;
		}
				
		declare	netread Text[]		Net_Reward_RankScoreLeft  for UI;
		declare	netread Integer[] 	Net_Reward_RankAddLeft    for UI;
		declare	netread Text[]		Net_Reward_RankScoreRight for UI;
		declare	netread Integer[]	Net_Reward_RankAddRight   for UI;
		foreach(Index => AddLeft in Net_Reward_RankAddLeft)
		{
			declare CMlFrame Frame_Zone         <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^Index)     as CMlFrame);
			if(Frame_Zone == Null || AddLeft <= 0) continue;
			declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")        as CMlLabel);
			declare CMlLabel Label_ZoneRankLeft  <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")        as CMlLabel);
			G_AnimAddLabel[C_MapRankAdd+Index]     = Label_LeftRankAdd;
			G_AnimAddLabel[C_MapRank+Index]        = Label_ZoneRankLeft;
			G_StartTimeAnimAdd[C_MapRankAdd+Index] = Now;
			G_EndTimeAnimAdd[C_MapRankAdd+Index]   = 0;

		}

		foreach(Index => AddRight in Net_Reward_RankAddRight)
		{
			declare CMlFrame Frame_Zone         <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^Index)     as CMlFrame);
			if(Frame_Zone == Null || AddRight <= 0) continue;
			declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")        as CMlLabel);
			declare CMlLabel Label_ZoneRankRight  <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")        as CMlLabel);
			G_AnimAddLabel[C_GlobalRankAdd+Index]     = Label_RightRankAdd;
			G_AnimAddLabel[C_GlobalRank+Index]        = Label_ZoneRankRight;
			G_StartTimeAnimAdd[C_GlobalRankAdd+Index] = Now;
			G_EndTimeAnimAdd[C_GlobalRankAdd+Index]   = 0;
		}

	}

	Void AnimShow()
	{
		AnimStop();
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);


		///////////////////////
		////MouseClick
		declare CMlQuad  Quad_MouseClickReplay   <=> (Page.MainFrame.GetFirstChild("Quad_MouseClickReplay")   as CMlQuad);
		Quad_MouseClickReplay.Show();

		///////////////////////
		////Footer
		declare CMlQuad  Quad_Separator      <=> (Page.MainFrame.GetFirstChild("Quad_Separator")   as CMlQuad);
		declare CMlQuad  Quad_Medal0          <=> (Page.MainFrame.GetFirstChild("Quad_Medal0")       as CMlQuad);
		declare CMlFrame Frame_Medal         <=> (Page.MainFrame.GetFirstChild("Frame_Medal")     as CMlFrame);
		declare CMlLabel Label_Title         <=> (Page.MainFrame.GetFirstChild("Label_Title")      as CMlLabel);
		declare CMlLabel Label_TitleAddPoint <=> (Page.MainFrame.GetFirstChild("Label_TitleAddPoint")      as CMlLabel);
		declare CMlLabel Label_Title2        <=> (Page.MainFrame.GetFirstChild("Label_Title2")     as CMlLabel);
		declare CMlLabel Label_PlayerTime    <=> (Page.MainFrame.GetFirstChild("Label_PlayerTime") as CMlLabel);
		Quad_Separator.Size                 = <1.,0.>;
		//Quad_Medal0.RelativePosition.X       = -55.;
		Frame_Medal.RelativePosition.X       = 55.;
		Label_Title.RelativePosition.X      = -253.6;
		Label_TitleAddPoint.RelativePosition.X      = -253.6;
		Label_Title2.RelativePosition.X     = -253.6;
		Label_PlayerTime.RelativePosition.X = -171.8;

		declare Integer Decale;
		
		///////////////////////
		//Header - Game Mode
		declare CMlLabel Label_Mode       <=> (Page.MainFrame.GetFirstChild("Label_Mode")       as CMlLabel);
		declare CMlLabel Label_Mode2      <=> (Page.MainFrame.GetFirstChild("Label_Mode2")      as CMlLabel);
		declare CMlQuad  Quad_Mode        <=> (Page.MainFrame.GetFirstChild("Quad_Mode")        as CMlQuad);
		declare CMlQuad  Quad_LineHead0   <=> (Page.MainFrame.GetFirstChild("Quad_LineHead0")        as CMlQuad);
		declare CMlQuad  Quad_LineHead1   <=> (Page.MainFrame.GetFirstChild("Quad_LineHead1")        as CMlQuad);
		Quad_LineHead0.Size = <0., 0.3>;
		Quad_LineHead1.Size = <0., 0.6>;
		Label_Mode.RelativePosition.Y       = -7.2;
		Label_Mode2.RelativePosition.Y      = -7.2;
		Quad_Mode.RelativePosition.Y        = -4.8;
		LibManialink_SetTargetSize(Quad_LineHead0, <76., 0.3>);
		LibManialink_PresetAnimInsert(Quad_LineHead0, Decale, 900, "EaseOutQuint");
		LibManialink_SetTargetSize(Quad_LineHead1, <6.7, 0.6>);
		LibManialink_PresetAnimInsert(Quad_LineHead1, Decale, 900, "EaseOutQuint");
		Decale += 300;
		LibManialink_SetTargetPosition(Label_Mode, <Label_Mode.RelativePosition.X, 3.2>);
		LibManialink_PresetAnimInsert(Label_Mode, Decale, 800, "EaseOutQuint");
		LibManialink_SetTargetPosition(Label_Mode2, <Label_Mode2.RelativePosition.X, 3.2>);
		LibManialink_PresetAnimInsert(Label_Mode2, Decale, 800, "EaseOutQuint");
		LibManialink_SetTargetPosition(Quad_Mode, <Quad_Mode.RelativePosition.X, 6.8>);
		LibManialink_PresetAnimInsert(Quad_Mode, Decale, 800, "EaseOutQuint");


		///////////////////////
		//Middle - Title
		Decale = 100;
		LibManialink_SetTargetSize(Quad_Separator, <1., 37.8>);
		LibManialink_PresetAnimInsert(Quad_Separator, 0, 600, "EaseOutQuint");
		//LibManialink_SetTargetPosition(Quad_Medal0, <-87., Quad_Medal0.RelativePosition.Y>);
		//LibManialink_PresetAnimInsert(Quad_Medal0, Decale, 800, "EaseOutQuint");
		declare	netread Integer 	Net_NewMedal              for UI;
		declare	netread Integer 	Net_PrevMedal              for UI;
		declare Integer Player_PrevMedal = Net_PrevMedal;
		declare Integer Player_NewMedal  = Net_NewMedal;
		declare Real PosFrameMedal = -6. + Player_NewMedal*7.;
		LibManialink_SetTargetPosition(Frame_Medal, <PosFrameMedal, Frame_Medal.RelativePosition.Y>);
		LibManialink_PresetAnimInsert(Frame_Medal, Decale, 800, "EaseOutQuint");
		declare Integer IndexMin = (4 - Player_PrevMedal)-1;



		declare CMlQuad  Quad_MedalD  <=> (Page.MainFrame.GetFirstChild("Quad_MedalD")    as CMlQuad);
		Quad_MedalD.Opacity = 0.;
		for(I, 0, 3)
		{
			declare CMlQuad  MyQuadMedal <=> (Page.MainFrame.GetFirstChild("Quad_Medal"^I)   as CMlQuad);
			if(I <= IndexMin)
			{
				declare Integer IndexFocus = 3-I;
				declare Integer Speed = 600+I*50;

				LibManialink_SetTargetOpacity(MyQuadMedal, 1.);
				LibManialink_SetTargetColorize(MyQuadMedal, C_MedalColors[IndexFocus]);
				LibManialink_SetTargetPosition(MyQuadMedal, <-42., MyQuadMedal.RelativePosition.Y>);
				LibManialink_PresetAnimInsert(MyQuadMedal, 0, 1, "EaseOutCubic");

				LibManialink_SetTargetOpacity(MyQuadMedal, 1.);
				LibManialink_SetTargetPosition(MyQuadMedal, <(-103.+I*6.), (MyQuadMedal.RelativePosition.Y)>);
				LibManialink_PresetAnimInsert(MyQuadMedal, Decale+I*50, Speed, "EaseOutCubic");

				if(I == IndexMin && Player_NewMedal == Player_PrevMedal)
				{
					Quad_MedalD.RelativePosition.X = -103.+I*6.;

					LibManialink_SetTargetColorize(Quad_MedalD, C_MedalColors[Player_NewMedal]);
					LibManialink_SetTargetOpacity(Quad_MedalD, 1.);
					LibManialink_PresetAnimInsert(Quad_MedalD, Decale+Speed, Speed, "EaseOutCubic");
				}
			}
			else
			{
				MyQuadMedal.RelativePosition.X = -42.;
			}
		}
		Decale += 0;
		LibManialink_SetTargetPosition(Label_Title, <-63.6, Label_Title.RelativePosition.Y>);
		LibManialink_PresetAnimInsert(Label_Title, Decale, 800, "EaseOutQuint");
		Decale += 0;
		declare	netread Integer Net_SkillPointBefore for UI;
		declare Real PosAdd = -45.+TL::Length(Net_SkillPointBefore^"")*7.;
		LibManialink_SetTargetPosition(Label_TitleAddPoint, <PosAdd, Label_TitleAddPoint.RelativePosition.Y>);
		LibManialink_PresetAnimInsert(Label_TitleAddPoint, Decale, 800, "EaseOutQuint");
		Decale += 0;
		LibManialink_SetTargetPosition(Label_Title2, <-65.0, Label_Title2.RelativePosition.Y>);
		LibManialink_PresetAnimInsert(Label_Title2, Decale, 800, "EaseOutQuint");
		Decale += 0;
		LibManialink_SetTargetPosition(Label_PlayerTime, <-61.8, Label_PlayerTime.RelativePosition.Y>);
		LibManialink_PresetAnimInsert(Label_PlayerTime, Decale, 800, "EaseOutQuint");




		declare netread Text	Net_ModeName			for UI;
		declare netread Boolean	Net_IsRanking			for UI;
		declare netread Boolean	Net_IsOfficialMap		for UI;
		declare CMlFrame Frame_RankZones     <=> (Page.MainFrame.GetFirstChild("Frame_RankZones")     as CMlFrame);
		//if(Net_ModeName == "Campaign_Solo")
		if(Net_IsRanking && Net_IsOfficialMap)
		{
			Frame_RankZones.Show();
		}
		else
		{
			Frame_RankZones.Hide();
		}

		///////////////////////
		////ZoneRanking
		declare CMlFrame Frame_AngleL     <=> (Page.MainFrame.GetFirstChild("Frame_AngleL")     as CMlFrame);
		declare CMlFrame Frame_AngleR     <=> (Page.MainFrame.GetFirstChild("Frame_AngleR")     as CMlFrame);
		declare CMlQuad Quad_AngleL1     <=> (Page.MainFrame.GetFirstChild("Quad_AngleL1")     as CMlQuad);
		declare CMlQuad Quad_AngleL0     <=> (Page.MainFrame.GetFirstChild("Quad_AngleL0")     as CMlQuad);
		declare CMlQuad Quad_AngleR1     <=> (Page.MainFrame.GetFirstChild("Quad_AngleR1")     as CMlQuad);
		declare CMlQuad Quad_AngleR0     <=> (Page.MainFrame.GetFirstChild("Quad_AngleR0")     as CMlQuad);
		Frame_AngleL.RelativePosition.X = {{{82.4-SizeXQuadZone_Center/2.}}};
		Frame_AngleR.RelativePosition.X = {{{82.4-SizeXQuadZone_Center/2.}}};
		Frame_AngleL.RelativePosition.Y = -0.;
		Frame_AngleR.RelativePosition.Y = -0.;
		Quad_AngleL1.Size = <0.6,0.>;
		Quad_AngleL0.Size = <0.,0.6>;
		Quad_AngleR1.Size = <0.6,0.>;
		Quad_AngleR0.Size = <0.,0.6>;
		LibManialink_SetTargetSize(Quad_AngleL1, <0.6, 2.6>);
		LibManialink_PresetAnimInsert(Quad_AngleL1, 0, 800, "EaseOutQuint");
		LibManialink_SetTargetSize(Quad_AngleL0, <2.6, 0.6>);
		LibManialink_PresetAnimInsert(Quad_AngleL0, 0, 800, "EaseOutQuint");
		LibManialink_SetTargetSize(Quad_AngleR1, <0.6, 2.6>);
		LibManialink_PresetAnimInsert(Quad_AngleR1, 0, 800, "EaseOutQuint");
		LibManialink_SetTargetSize(Quad_AngleR0, <2.6, 0.6>);
		LibManialink_PresetAnimInsert(Quad_AngleR0, 0, 800, "EaseOutQuint");
		LibManialink_SetTargetPosition(Frame_AngleL, <{{{82.4-SizeXQuadZone_Center}}}, 0.>);
		LibManialink_PresetAnimInsert(Frame_AngleL, 0, 800, "EaseOutQuint");
		LibManialink_SetTargetPosition(Frame_AngleR, <{{{82.4}}}, 0.>);
		LibManialink_PresetAnimInsert(Frame_AngleR, 0, 800, "EaseOutQuint");

		Decale = 300;
		for(I, 0, {{{Count_InstancesY-1}}})
		{
			declare CMlFrame Frame_Zone     <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^I)     as CMlFrame);
			declare CMlQuad Quad_BGCenter   <=> (Frame_Zone.GetFirstChild("Quad_BGCenter")     as CMlQuad);
			declare CMlQuad Quad_BGRight    <=> (Frame_Zone.GetFirstChild("Quad_BGRight")     as CMlQuad);
			declare CMlQuad Quad_BGLeft     <=> (Frame_Zone.GetFirstChild("Quad_BGLeft")     as CMlQuad);
			declare CMlQuad Reward_RightBG  <=> (Frame_Zone.GetFirstChild("Reward_RightBG")     as CMlQuad);
			declare CMlQuad Reward_LeftBG  <=> (Frame_Zone.GetFirstChild("Reward_LeftBG")     as CMlQuad);
			declare CMlQuad Quad_IconZone   <=> (Frame_Zone.GetFirstChild("Quad_IconZone")     as CMlQuad);
			declare CMlLabel Label_ZoneName <=> (Frame_Zone.GetFirstChild("Label_ZoneName")     as CMlLabel);
			declare CMlLabel Label_ZoneRankRight <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")     as CMlLabel);
			declare CMlLabel Label_ZoneRankLeft <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")     as CMlLabel);
			declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")     as CMlLabel);
			declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")     as CMlLabel);
			Quad_BGCenter.Size.Y = 0.;
			Quad_BGRight.Size.Y  = 0.;
			Quad_BGLeft.Size.Y   = 0.;
			Reward_RightBG.RelativePosition.X = -34.;
			Reward_LeftBG.RelativePosition.X = 34.;
			Label_ZoneName.RelativePosition.Y = -8.8;
			Label_ZoneRankRight.RelativePosition.Y = -8.8;
			Label_ZoneRankLeft.RelativePosition.Y = -8.8;
			Label_RightRankAdd.RelativePosition.Y  = -8.8;
			Label_LeftRankAdd.RelativePosition.Y  = -8.8;
			Quad_IconZone.RelativePosition.Y  = -8.8;
			
			LibManialink_SetTargetSize(Quad_BGCenter, <Quad_BGCenter.Size.X, {{{SizeYQuad}}}>);
			LibManialink_PresetAnimInsert(Quad_BGCenter, Decale, 800, "EaseOutQuint");
			LibManialink_SetTargetSize(Quad_BGRight, <Quad_BGRight.Size.X, {{{SizeYQuad}}}>);
			LibManialink_PresetAnimInsert(Quad_BGRight, Decale+100, 800, "EaseOutQuint");
			LibManialink_SetTargetSize(Quad_BGLeft, <Quad_BGLeft.Size.X, {{{SizeYQuad}}}>);
			LibManialink_PresetAnimInsert(Quad_BGLeft, Decale+100, 800, "EaseOutQuint");
			
			LibManialink_SetTargetPosition(Reward_RightBG, <-11., 0.>);
			LibManialink_PresetAnimInsert(Reward_RightBG, Decale, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Reward_LeftBG, <-11., 0.>);
			LibManialink_PresetAnimInsert(Reward_LeftBG, Decale, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Quad_IconZone, <Quad_IconZone.RelativePosition.X, 0.3>);
			LibManialink_PresetAnimInsert(Quad_IconZone, Decale+500, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Label_ZoneName, <Label_ZoneName.RelativePosition.X, 0.8>);
			LibManialink_PresetAnimInsert(Label_ZoneName, Decale+500, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Label_ZoneRankRight, <Label_ZoneRankRight.RelativePosition.X, 1.0>);
			LibManialink_PresetAnimInsert(Label_ZoneRankRight, Decale+600, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Label_ZoneRankLeft, <Label_ZoneRankLeft.RelativePosition.X, 1.0>);
			LibManialink_PresetAnimInsert(Label_ZoneRankLeft, Decale+600, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Label_RightRankAdd, <Label_RightRankAdd.RelativePosition.X, 0.5>);
			LibManialink_PresetAnimInsert(Label_RightRankAdd, Decale+700, 800, "EaseOutQuint");
			LibManialink_SetTargetPosition(Label_LeftRankAdd, <Label_LeftRankAdd.RelativePosition.X, 0.5>);
			LibManialink_PresetAnimInsert(Label_LeftRankAdd, Decale+700, 800, "EaseOutQuint");
			Decale +=50;
		}
		
		declare CMlQuad Quad_LineFoot0     <=> (Page.MainFrame.GetFirstChild("Quad_LineFoot0")     as CMlQuad);
		declare CMlQuad Quad_LineFoot1     <=> (Page.MainFrame.GetFirstChild("Quad_LineFoot1")     as CMlQuad);
		Quad_LineFoot0.Size = <0.,0.3>;
		Quad_LineFoot1.Size = <0.,0.6>;
		LibManialink_SetTargetSize(Quad_LineFoot0, <{{{SizeXQuad+34.7}}}, 0.3>);
		LibManialink_PresetAnimInsert(Quad_LineFoot0, Decale, 900, "EaseOutQuint");
		LibManialink_SetTargetSize(Quad_LineFoot1, <6.7, 0.6>);
		LibManialink_PresetAnimInsert(Quad_LineFoot1, Decale, 900, "EaseOutQuint");

		declare CMlLabel Label_RankZoneTitleRight <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleRight")     as CMlLabel);
		Label_RankZoneTitleRight.Opacity = 0.;
		LibManialink_SetTargetOpacity(Label_RankZoneTitleRight, 1.0);
		LibManialink_PresetAnimInsert(Label_RankZoneTitleRight, Decale, 800, "EaseOutQuint");
		declare CMlLabel Label_RankZoneTitleLeft <=> (Page.MainFrame.GetFirstChild("Label_RankZoneTitleLeft")     as CMlLabel);
		Label_RankZoneTitleLeft.Opacity = 0.;
		LibManialink_SetTargetOpacity(Label_RankZoneTitleLeft, 1.0);
		LibManialink_PresetAnimInsert(Label_RankZoneTitleLeft, Decale, 800, "EaseOutQuint");


		declare netread Boolean Net_Reward_ShowMedal    for UI;
		if(Net_Reward_ShowMedal)
		{
			G_AnimIndex = 0;
			G_AnimTime  = Now + 500;
		}
	}

	
	Void Init()
	{
		G_AnimIndex = -1;
		declare Text[] Zones;
		if(Players.count > 0)
		{
			Zones = TL::Split("|", Players[0].User.ZonePath);
		}

		for(I, 0, {{{Count_InstancesY-1}}})
		{
			declare CMlFrame Frame_Zone     <=> (Page.MainFrame.GetFirstChild("Frame_Zone"^I)     as CMlFrame);
			declare CMlLabel Label_ZoneName <=> (Frame_Zone.GetFirstChild("Label_ZoneName")     as CMlLabel);
			declare CMlLabel Label_ZoneRankRight <=> (Frame_Zone.GetFirstChild("Label_ZoneRankRight")     as CMlLabel);
			declare CMlLabel Label_ZoneRankLeft <=> (Frame_Zone.GetFirstChild("Label_ZoneRankLeft")     as CMlLabel);
			declare CMlLabel Label_RightRankAdd  <=> (Frame_Zone.GetFirstChild("Label_RightRankAdd")     as CMlLabel);
			declare CMlLabel Label_LeftRankAdd  <=> (Frame_Zone.GetFirstChild("Label_LeftRankAdd")     as CMlLabel);
			if(Zones.existskey(I))
			{
				Frame_Zone.Show();
				Label_ZoneName.SetText(Zones[I]);
				Label_ZoneRankRight.SetText("??? / ???");
				Label_ZoneRankLeft.SetText("??? / ???");
				Label_RightRankAdd.SetText("+???");
				Label_LeftRankAdd.SetText("+???");
			}
			else
			{
				Frame_Zone.Hide();
			}

		}
	}


	main() 
	{
		declare	netwrite Integer Net_Reward_TriggerPressedContinue for UI;
		
		declare	netread Integer   Net_Reward_TriggerShow     for UI;
		declare	netread Integer   Net_Reward_TriggerHide     for UI;
		declare	netread Text      Net_Reward_ButtonAction    for UI;
		declare	netread Text      Net_Reward_ImageUrl        for UI;
		declare	netread Text      Net_Reward_Status          for UI;
		declare netread Boolean   Net_Reward_ShowContinue    for UI;
		declare netread Boolean   Net_Reward_IsHMDActive     for UI;
		declare	netread Integer   Net_SkillPointBefore       for UI;
		declare	netread Integer   Net_SkillPointAdd          for UI;
		declare	netread Text[]    Net_Reward_RankScoreLeft   for UI;
		declare	netread Integer[] Net_Reward_RankAddLeft     for UI;
		declare	netread Text[]    Net_Reward_RankScoreRight  for UI;
		declare	netread Integer[] Net_Reward_RankAddRight    for UI;
		declare	netread Integer[Integer] Net_Reward_RankScoreCount_Left    for UI;
		declare	netread Integer[Integer] Net_Reward_RankScore_Left         for UI;
		declare	netread Integer[Integer] Net_Reward_RankScoreCount_Right   for UI;
		declare	netread Integer[Integer] Net_Reward_RankScore_Right        for UI;

		Init();

		declare Prev_Reward_TriggerShow 	= Net_Reward_TriggerShow;
		//declare Prev_Reward_TriggerShow 	= 2;
		declare Prev_Reward_TriggerHide 	= Net_Reward_TriggerHide;
	
		declare DesiredVisible 				= False;

		declare Frame_Reward 				<=> (Page.MainFrame.GetFirstChild("Frame_Reward") 				as CMlFrame);
		
		//Prev_Reward_TriggerShow 	= 2;

		while(True) 
		{
			yield;
			LibManialink_AnimLoop();

			if(G_AnimIndex != -1 && G_AnimTime < Now)
			{
				AnimAddScore();
			}

			foreach(Index => EndTime in G_EndTimeAnimAdd)
			{
				if(EndTime == -1) continue;
				Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 1, 1., 0);
				declare AnimEndTime = G_StartTimeAnimAdd[Index] + EndTime;
				declare Integer Add = G_EndTimeAnimAdd[Index] - Now;
				declare Integer AddMax = G_EndTimeAnimAdd[Index] - G_StartTimeAnimAdd[Index];
				declare Real Pourcentage    = (Add*1.)/(AddMax*1.);
				declare Real PourcentageInv = ((AddMax-Add)*1.)/(AddMax*1.);
				
				if(Index == C_SkillPoint)
				{
					declare Integer SkillPointsAffichage = ML::NearestInteger(Net_SkillPointBefore + Net_SkillPointAdd * PourcentageInv);
					G_AnimAddLabel[Index].SetText(TL::Compose("SP %1", SkillPointsAffichage^""));
					if(Net_SkillPointAdd != 0) G_AnimAddLabel[Index+1].SetText("+"^ML::NearestInteger(Net_SkillPointAdd * PourcentageInv));
					else                       G_AnimAddLabel[Index+1].SetText("");
				}
				else if(Index < C_MapRankAdd)
				{
					declare Integer LabelIndex = Index-C_GlobalRankAdd;
					declare Integer ScoreAdd = ML::NearestInteger(Net_Reward_RankAddRight[LabelIndex] * PourcentageInv);
					G_AnimAddLabel[Index].SetText("+"^ScoreAdd);
					G_AnimAddLabel[Index+C_GlobalRank-C_GlobalRankAdd].SetText((G_PrevRankRight[LabelIndex]-ScoreAdd)^"/"^Net_Reward_RankScoreCount_Right[LabelIndex]);

				}
				else
				{
					declare Integer LabelIndex = Index-C_MapRankAdd;
					declare Integer ScoreAdd = ML::NearestInteger(Net_Reward_RankAddLeft[LabelIndex] * PourcentageInv);
					G_AnimAddLabel[Index].SetText("+"^ScoreAdd);
					G_AnimAddLabel[Index+C_MapRank-C_MapRankAdd].SetText((G_PrevRankLeft[LabelIndex]-ScoreAdd)^"/"^Net_Reward_RankScoreCount_Left[LabelIndex]);
				}

				if(Now > EndTime)
				{
					if(Index == C_SkillPoint)
					{
							G_AnimAddLabel[Index].SetText(TL::Compose("SP %1", (Net_SkillPointBefore + Net_SkillPointAdd)^""));
							if(Net_SkillPointAdd != 0) G_AnimAddLabel[Index+1].SetText("+"^Net_SkillPointAdd);
							else                       G_AnimAddLabel[Index+1].SetText("");
					}
					else if(Index < C_MapRankAdd)
					{
						declare Integer LabelIndex = Index-C_GlobalRankAdd;
						G_AnimAddLabel[Index].SetText("+"^Net_Reward_RankAddRight[LabelIndex]);
						G_AnimAddLabel[Index+C_GlobalRank-C_GlobalRankAdd].SetText(Net_Reward_RankScore_Right[LabelIndex]^"/"^Net_Reward_RankScoreCount_Right[LabelIndex]);
					}
					else
					{
						declare Integer LabelIndex = Index-C_MapRankAdd;
						G_AnimAddLabel[Index].SetText("+" ^Net_Reward_RankAddLeft[LabelIndex]);
						G_AnimAddLabel[Index+C_MapRank-C_MapRankAdd].SetText(Net_Reward_RankScore_Left[LabelIndex]^"/"^Net_Reward_RankScoreCount_Left[LabelIndex]);
					}
					G_EndTimeAnimAdd[Index] = -1;

				}
			}

			if(Prev_Reward_TriggerHide != Net_Reward_TriggerHide)
			{
				Frame_Reward.Hide();
				DesiredVisible = False;
				Prev_Reward_TriggerHide = Net_Reward_TriggerHide;
				EnableMenuNavigation(False, False, Null, 3);
			}
			
			if(Prev_Reward_TriggerShow != Net_Reward_TriggerShow)
			{
				Prev_Reward_TriggerShow = Net_Reward_TriggerShow;
				
				declare netread Boolean	Net_EnableMenuNav         for UI;
				
				UpdateInfos();
				AnimShow();
				Frame_Reward.Show();
				DesiredVisible = True;
				EnableMenuNavigation(Net_EnableMenuNav, False, Null, 3);
				declare Integer 	Net_HideIngameUI 			for Teams[0];
				Net_HideIngameUI = Now;
			}

			
			if(DesiredVisible)
			{
				foreach(Event in PendingEvents)
				{
					if(Event.Type == CMlEvent::Type::MenuNavigation)
					{
						if(Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Select)
						{
							declare Boolean IsAnimAdd = False;
							foreach(TimAdd in G_EndTimeAnimAdd)
							{
								if(TimAdd != -1) IsAnimAdd = True;
							}

							if(G_AnimIndex != -1 || IsAnimAdd)
							{
								SkipAnim();
							}
							else
							{
								declare CMlQuad  Quad_MouseClickReplay   <=> (Page.MainFrame.GetFirstChild("Quad_MouseClickReplay")   as CMlQuad);
								Quad_MouseClickReplay.Hide();
								Net_Reward_TriggerPressedContinue = Now;
							}
						}
						else if(Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Action1)
						{
							//SkipAnim();
						}
						else if(Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Action2)
						{
							AnimShow();
						}
						else if(Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Cancel)
						{
							//ShowInGameMenu();
						}
					}
					else if(Event.Type == CMlEvent::Type::MouseClick)
					{
						if(Event.ControlId == "Quad_MouseClickReplay")
						{
							declare CMlQuad  Quad_MouseClickReplay   <=> (Page.MainFrame.GetFirstChild("Quad_MouseClickReplay")   as CMlQuad);
							Quad_MouseClickReplay.Hide();
							Net_Reward_TriggerPressedContinue = Now;
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>
	""";
	return ML;
}


Text Private_GetRewardsSplitscreen()
{
	declare IMGSelect = UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);

	declare Text ML =

	"""
	<frame id="Clip_InfoBigRanking" pos="0. 0. 0" clip="True" clipposn="0. 0." clipsizen="320 180" hidden="0" >
		<frame id="Frame_Reward" pos="0 0 35." hidden="1" scale="1.0">
		
			<quad id="Quad_Image" pos="0 0 .2" size="320 180" valign="center" halign="center" bgcolor="000" image="" />	
			<quad id="Quad_Transition" pos="0 0 .1" size="{{{C_REWARDS_TRANSITION_SIZE_X}}} 180" valign="center" halign="left" bgcolor="000" />

			<frame pos="0. -8." scale="0.6">
				<label id="Label_Title"  pos="0 15.0 .5" size="320 180"  valign="bottom"  halign="center"  textfont="{{{G_FontMain}}}" textsize="16" text="" autonewline="1" linespacing="0.8" textprefix="$t" />
				<label id="Label_Title2" pos="0 {{{C_REWARDS_TEXT_INTERVAL}}} .5" size="800 180" valign="bottom" halign="center" textfont="{{{G_FontMain}}}" textsize="16" text="" autonewline="1" linespacing="0.8" textprefix="$t" />
				<label id="Label_Subtitle" pos="0 {{{-3.0*C_REWARDS_TEXT_INTERVAL}}} .5" size="320 180" valign="top" halign="center" textfont="{{{G_FontMain}}}" textsize="6.0" text="" textprefix="$t" />
			</frame>	
				
			<frame id="Frame_PressToContinue">
				<quad id="Quad_PressToContinueButton" pos="{{{-C_REWARDS_PRESSTOCONTINUE_INTERVAL}}} {{{C_REWARDS_PRESSTOCONTINUE_POSY-1.}}} .5" size="{{{C_REWARDS_BUTTON_SIZE_X}}} {{{C_REWARDS_BUTTON_SIZE_X}}}" valign="center" halign="right" bgcolor="0f0" image="{{{IMGSelect}}}"textprefix="$t"/>	
				<label id="Label_PressToContinue" pos="{{{C_REWARDS_PRESSTOCONTINUE_INTERVAL}}} {{{C_REWARDS_PRESSTOCONTINUE_POSY}}} .5" size="320 180" valign="center" halign="left" textfont="{{{G_FontMain}}}" textsize="6" text="" hidden="1" textprefix="$t" />
			</frame>
			
		</frame>
	</frame>

	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Include "AnimLib" as AL
	
	#Const DebugName  "L_RewardScreens1"

	#Const C_AnimTransition_Easing 		"Linear"
	#Const C_AnimTransition_Duration 	500.
	
	#Const C_AnimText_Easing 			"ExpOut"
	#Const C_AnimText_Duration 			650.
	#Const C_AnimText_DelayShow 		400.
	#Const C_AnimText_DelayHide 		150.
	#Const C_AnimText_Offset 			450.
	
	main() 
	{
		declare	netwrite Integer Net_Reward_TriggerPressedContinueSplit for UI;
		
		declare	netread Integer Net_Reward_TriggerShowSplit 	for UI;
		declare	netread Integer Net_Reward_TriggerHideSplit 	for UI;
		declare	netread Text 	Net_Reward_TitleSplit 			for UI;
		declare	netread Text 	Net_Reward_TitleSplit2 			for UI;
		declare	netread Text 	Net_Reward_SubTitleSplit 		for UI;
		declare	netread Text 	Net_Reward_ButtonActionSplit	for UI;
		declare	netread Text 	Net_Reward_ImageUrlSplit 		for UI;
		declare	netread Vec3 	Net_Reward_TextColorSplit		for UI;
		declare	netread Text 	Net_Reward_IsPositiveSplit		for UI;
		declare netread Boolean Net_Reward_ShowContinueSplit 	for UI;
		declare netread Text	Net_ModeName					for UI;


		// declare TimerButton					= 0;
		declare Prev_Reward_TriggerShow 	= Net_Reward_TriggerShowSplit;
		declare Prev_Reward_TriggerHide 	= Net_Reward_TriggerHideSplit;
		declare TriggerShow 				= -1;
		declare TriggerHide 				= -1;
		declare DesiredVisible 				= False;
		declare PrevDesiredVisible 			= DesiredVisible;
		declare Pre_Reward_ImageUrl			= "";
		
		declare Frame_Reward 				<=> (Page.MainFrame.GetFirstChild("Frame_Reward") 				as CMlFrame);
		declare Frame_PressToContinue 		<=> (Frame_Reward.GetFirstChild("Frame_PressToContinue") 		as CMlFrame);
		declare Quad_Image 					<=> (Frame_Reward.GetFirstChild("Quad_Image") 					as CMlQuad);
		declare Quad_Transition 			<=> (Frame_Reward.GetFirstChild("Quad_Transition") 				as CMlQuad);
		declare Quad_PressToContinueButton 	<=> (Frame_Reward.GetFirstChild("Quad_PressToContinueButton") 	as CMlQuad);
		declare Label_Title 				<=> (Frame_Reward.GetFirstChild("Label_Title") 					as CMlLabel);
		declare Label_Title2 				<=> (Frame_Reward.GetFirstChild("Label_Title2") 				as CMlLabel);
		declare Label_Subtitle 				<=> (Frame_Reward.GetFirstChild("Label_Subtitle") 				as CMlLabel);
		declare Label_PressToContinue 		<=> (Frame_Reward.GetFirstChild("Label_PressToContinue") 		as CMlLabel);
		
		declare ColorisableLabels = [Label_Title, Label_Title2];
		
		declare Integer FirstAnimDuration = 500;
		declare Boolean HasImageChanged	= False;
		
		declare UI_LibRS_IsVisible for UI = False;
		UI_LibRS_IsVisible = False;
		
		while(True) 
		{
			yield;
			
			if(Prev_Reward_TriggerShow != Net_Reward_TriggerShowSplit)
			{
				Prev_Reward_TriggerShow = Net_Reward_TriggerShowSplit;
				TriggerShow 	= Now;
				DesiredVisible 	= True;
				
				if(Pre_Reward_ImageUrl != Net_Reward_ImageUrlSplit) {
					HasImageChanged = True;
					Pre_Reward_ImageUrl = Net_Reward_ImageUrlSplit;
				}
				
				if(HasImageChanged)
					Quad_Image				.ImageUrl 	= Net_Reward_ImageUrlSplit;
				
				Label_Title				.Value 		= Net_Reward_TitleSplit;
				Label_Title2			.Value		= Net_Reward_TitleSplit2;
				Label_Subtitle			.Value 		= Net_Reward_SubTitleSplit;
				Label_PressToContinue	.Value		= Net_Reward_ButtonActionSplit;
				
				Frame_PressToContinue	.RelativePosition.X = 150.;
					
				
				foreach(Label in ColorisableLabels)
					Label.TextColor = Net_Reward_TextColorSplit;
			}
			
			if(Prev_Reward_TriggerHide != Net_Reward_TriggerHideSplit)
			{
				Prev_Reward_TriggerHide = Net_Reward_TriggerHideSplit;
				TriggerHide 		= Now;
				DesiredVisible 		= False;
				HasImageChanged 	= False;
				Pre_Reward_ImageUrl = "";
			}
			
			if(PrevDesiredVisible != DesiredVisible)
			{
				PrevDesiredVisible = DesiredVisible;
				//If not transition
				if(DesiredVisible) {
					if(Net_Reward_TitleSplit != "" && Net_Reward_ShowContinueSplit) {
						EnableMenuNavigation(True, False, Null, 3);
					}
				} else {
					EnableMenuNavigation(False, False, Null, 3);
				}

				UI_LibRS_IsVisible = DesiredVisible;
			}

			if(DesiredVisible)
			{
				Frame_Reward.Show();

				Quad_Transition.RelativePosition.X = AL::Ease(C_AnimTransition_Easing, Now-TriggerShow*1., 160., {{{-C_REWARDS_TRANSITION_SIZE_X/2.-170.}}}, C_AnimTransition_Duration);
				Label_Title.RelativePosition.X = AL::Ease(C_AnimText_Easing, Now-(TriggerShow+C_AnimText_DelayShow)*1., C_AnimText_Offset, -C_AnimText_Offset, C_AnimText_Duration);
				Label_Title2.RelativePosition.X = AL::Ease(C_AnimText_Easing, Now-(TriggerShow+C_AnimText_DelayShow)*1., C_AnimText_Offset, -C_AnimText_Offset, C_AnimText_Duration);
				Label_Subtitle.RelativePosition.X = AL::Ease(C_AnimText_Easing, Now-(TriggerShow+C_AnimText_DelayShow)*1., -C_AnimText_Offset, C_AnimText_Offset, C_AnimText_Duration);
				
				if(HasImageChanged) Quad_Image.Opacity = AL::Ease(C_AnimText_Easing, Now-(TriggerShow+C_AnimText_DelayShow)*1., 0., 1., C_AnimText_Duration);

				foreach(Event in PendingEvents)
				{
					if(Event.Type 			== CMlEvent::Type::MenuNavigation 
					&&(Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Select
					|| Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Cancel
					|| Event.MenuNavAction 	== CMlEvent::EMenuNavAction::AppMenu 
					))
					{
						Net_Reward_TriggerPressedContinueSplit = Now;
						HasImageChanged 	= False;
					}
				}
			}
			else
			{
				Quad_Transition.RelativePosition.X = AL::Ease(C_AnimTransition_Easing, Now-(TriggerHide+C_AnimText_DelayHide)*1., {{{-C_REWARDS_TRANSITION_SIZE_X/2.}}}, {{{C_REWARDS_TRANSITION_SIZE_X/2.+160.}}}, C_AnimTransition_Duration);
				Label_Title.RelativePosition.X = AL::Ease(C_AnimText_Easing, Now-TriggerHide*1., 0., C_AnimText_Offset, C_AnimText_Duration);
				Label_Title2.RelativePosition.X = AL::Ease(C_AnimText_Easing, Now-TriggerHide*1.,0.,C_AnimText_Offset,C_AnimText_Duration);
				Label_Subtitle.RelativePosition.X = AL::Ease(C_AnimText_Easing, Now-TriggerHide*1., 0., -C_AnimText_Offset, C_AnimText_Duration);
				Quad_Image.Opacity = AL::Ease(C_AnimText_Easing, Now-(TriggerShow+C_AnimText_DelayShow)*1., 1., -1., C_AnimText_Duration);
				
			}
			
			declare AnimTime = TriggerShow+C_AnimText_DelayShow+C_AnimText_Duration;
			declare AnimDone = Now >= AnimTime;
			
			if(DesiredVisible) {
				if(!AnimDone) {
					Frame_Reward				.Visible = True;
				}
			} else {
				if(AnimDone) {
					Frame_Reward				.Visible = False;
				}
			}
			Frame_PressToContinue		.Visible = AnimDone && DesiredVisible && Net_Reward_ShowContinueSplit;
			Quad_PressToContinueButton	.Visible = Label_PressToContinue.Value != "";
		}
	}
	--></script>
	""";
	
	
	return ML;
	
}

Text Private_GetRewards(Integer _NbPlayers) //TODEL - Code Mort
{
	declare IMGSelect = UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	
	declare Integer ClipSizenX 		= 320;
	declare Integer ClipSizenY 		= 180;
	declare Real	Scale			= 1.0;
	declare Real 	BigTextSize		= 16.;
	declare Real 	TextSize		= 6.;
	
	declare Real	TitlePosy			= 15.0;
	declare Real	SubtitlePosy		= -0.13;
	declare Real	Subtitle2Posy		= 0.39;

	
	if(_NbPlayers == 2) {
		ClipSizenX = ClipSizenX/2;
		Scale = 1.0;
		BigTextSize = 8.;
		TextSize 	= 4.;
		
		TitlePosy		= 12.0;
		SubtitlePosy	= 3.13;
		Subtitle2Posy	= 3.13;
	} else if(_NbPlayers >= 3) {
		ClipSizenX = ClipSizenX/2;
		ClipSizenY = ClipSizenY/2;
		Scale = 0.5;
	}
	
	declare Text ML =
	"""
	<frame id="Clip_InfoBigRanking" pos="0. 0. 0" clip="True" clipposn="0. 0." clipsizen="{{{ClipSizenX}}} {{{ClipSizenY}}}" hidden="0" >
		<frame id="Frame_Reward" pos="0 0 29." hidden="1" scale="{{{Scale}}}">
		
			<quad id="Quad_Image" 
			pos="0 0 .2" 
			size="320 180" 
			valign="center" 
			halign="center" 
			bgcolor="000" 
			image=""
			/>	
			
			<quad id="Quad_Transition" 
			pos="0 0 .1" 
			size="{{{C_REWARDS_TRANSITION_SIZE_X}}} 180" 
			valign="center" 
			halign="left" 
			bgcolor="000" 
			/>	
			
			<frame pos="0. -8." scale="0.6">
			
				<label id="Label_Title" 
				pos="0 {{{TitlePosy}}} .5"
				size="320 180" 
				valign="bottom" 
				halign="center" 
				textfont="{{{G_FontMain}}}"
				textsize="{{{BigTextSize}}}"
				text=""
				autonewline="1"
				linespacing="0.8"
				textprefix="$t"
				/>
				
				<label id="Label_Title2" 
				pos="0 {{{SubtitlePosy}}} .5"
				size="450 180" 
				valign="bottom" 
				halign="center" 
				textfont="{{{G_FontMain}}}"
				textsize="{{{BigTextSize}}}"
				text=""
				autonewline="0"
				linespacing="0.8"
				textprefix="$t"
				/>
				
				<label id="Label_Subtitle" 
				pos="0 {{{Subtitle2Posy}}} .5"
				size="320 180" 
				valign="top" 
				halign="center" 
				textfont="{{{G_FontMain}}}"
				textsize="{{{TextSize}}}"
				text=""
				textprefix="$t"
				/>
				
			</frame>	
				
			<frame id="Frame_PressToContinue">
			
				<quad id="Quad_PressToContinueButton" 
				pos="{{{-C_REWARDS_PRESSTOCONTINUE_INTERVAL}}} {{{C_REWARDS_PRESSTOCONTINUE_POSY-1.}}} .5" 
				size="{{{C_REWARDS_BUTTON_SIZE_X}}} {{{C_REWARDS_BUTTON_SIZE_X}}}" 
				valign="center" 
				halign="right" 
				bgcolor="0f0" 
				image="{{{IMGSelect}}}"
				textprefix="$t"
				/>	
				
				<label id="Label_PressToContinue" 
				pos="{{{C_REWARDS_PRESSTOCONTINUE_INTERVAL}}} {{{C_REWARDS_PRESSTOCONTINUE_POSY}}} .5"
				size="320 180" 
				valign="center" 
				halign="left" 
				textfont="{{{G_FontMain}}}"
				textsize="6"
				text=""
				hidden="1"
				textprefix="$t"
				/>
				
			</frame>
			
		</frame>
	</frame>
	
	<script><!--
	#Include "MathLib" as ML
	#Include "AnimLib" as AL
	
	#Const DebugName  "L_RewardScreens2"

	#Const C_AnimTransition_Easing 		"Linear"
	#Const C_AnimTransition_Duration 	500.
	
	#Const C_AnimText_Easing 			"ExpOut"
	#Const C_AnimText_Duration 			650.
	#Const C_AnimText_DelayShow 		400.
	#Const C_AnimText_DelayHide 		150.
	#Const C_AnimText_Offset 			450.
	
	main() 
	{
		declare	netwrite Integer Net_Reward_TriggerPressedContinue for UI;
		
		declare	netread Integer Net_Reward_TriggerShow 	for UI;
		declare	netread Integer Net_Reward_TriggerHide 	for UI;
		declare	netread Text 	Net_Reward_Title 		for UI;
		declare	netread Text 	Net_Reward_Title2 		for UI;
		declare	netread Text 	Net_Reward_SubTitle 	for UI;
		declare	netread Text 	Net_Reward_ButtonAction	for UI;
		declare	netread Text 	Net_Reward_ImageUrl 	for UI;
		declare	netread Vec3 	Net_Reward_TextColor	for UI;
		declare	netread Text 	Net_Reward_Status		for UI;
		declare netread Boolean Net_Reward_ShowContinue for UI;
		declare netread Text	Net_ModeName			for UI;
		declare netread Boolean	Net_Reward_IsHMDActive	for UI;
		
		declare netwrite Integer	Net_PlayerEchelon	for UI;
		
		// declare TimerButton					= 0;
		declare Prev_Reward_TriggerShow 	= Net_Reward_TriggerShow;
		
		declare Prev_Reward_TriggerHide 	= Net_Reward_TriggerHide;
		declare TriggerTime 				= -1;
		declare DesiredVisible 				= False;
		declare TransitionFromGameDone		= False;
		declare PrevDesiredVisible 			= DesiredVisible;
		declare Pre_Reward_ImageUrl			= "";
		
		declare Frame_Reward 				<=> (Page.MainFrame.GetFirstChild("Frame_Reward") 				as CMlFrame);
		declare Frame_PressToContinue 		<=> (Frame_Reward.GetFirstChild("Frame_PressToContinue") 		as CMlFrame);
		declare Quad_Image 					<=> (Frame_Reward.GetFirstChild("Quad_Image") 					as CMlQuad);
		declare Quad_Transition 			<=> (Frame_Reward.GetFirstChild("Quad_Transition") 				as CMlQuad);
		declare Quad_PressToContinueButton 	<=> (Frame_Reward.GetFirstChild("Quad_PressToContinueButton") 	as CMlQuad);
		declare Label_Title 				<=> (Frame_Reward.GetFirstChild("Label_Title") 					as CMlLabel);
		declare Label_Title2 				<=> (Frame_Reward.GetFirstChild("Label_Title2") 				as CMlLabel);
		declare Label_Subtitle 				<=> (Frame_Reward.GetFirstChild("Label_Subtitle") 				as CMlLabel);
		declare Label_PressToContinue 		<=> (Frame_Reward.GetFirstChild("Label_PressToContinue") 		as CMlLabel);

		
		declare ColorisableLabels = [Label_Title, Label_Title2];
		
		declare Boolean HasImageChanged	= False;

		declare UI_LibRS_IsVisible for UI = False;
		UI_LibRS_IsVisible = False;
		
		while(True) 
		{
			yield;
			
			if(Prev_Reward_TriggerShow != Net_Reward_TriggerShow)
			{
				Prev_Reward_TriggerShow = Net_Reward_TriggerShow;
				TriggerTime 	= Now;
				DesiredVisible 	= True;
				
				if(Pre_Reward_ImageUrl != Net_Reward_ImageUrl) {
					HasImageChanged = True;
					Pre_Reward_ImageUrl = Net_Reward_ImageUrl;
				} else {
					HasImageChanged = False;
				}
					
				Quad_Image				.ImageUrl 	= Net_Reward_ImageUrl;
				Label_Title				.Value 		= Net_Reward_Title;
				Label_Title2			.Value		= Net_Reward_Title2;
				Label_Subtitle			.Value 		= Net_Reward_SubTitle;
				Label_Subtitle.Opacity = 1.0;
				Label_PressToContinue	.Value		= Net_Reward_ButtonAction;
				
				Frame_PressToContinue	.RelativePosition.X = 150.;
								
				
				foreach(Label in ColorisableLabels)
					Label.TextColor = Net_Reward_TextColor;
			}
			
			if(Prev_Reward_TriggerHide != Net_Reward_TriggerHide)
			{
				Prev_Reward_TriggerHide = Net_Reward_TriggerHide;
				TriggerTime 			= Now;
				DesiredVisible 			= False;
				HasImageChanged 		= False;
				TransitionFromGameDone 	= False;
				Pre_Reward_ImageUrl 	= "";
			}
			
			if(PrevDesiredVisible != DesiredVisible)
			{
				PrevDesiredVisible = DesiredVisible;
				if(DesiredVisible) {
					if ({{{_NbPlayers==1}}}) {		
						Audio.LimitSceneSoundVolumedB 	= -100.; // Ne coupe pas le son en splitscreen car il peut y avoit ce layer affichÃ© sur certains ecrans pendant que la course se dÃ©roule sur les autres. ==> faudrait faire la gestion dans le gestionnaire de tous les ecrans qui sait ou on en est.
					}
					if(Net_Reward_Title != "") {
						if(Net_Reward_ShowContinue) {
							EnableMenuNavigation(True, False, Null, 3);
						}
					}
				} else {
					Audio.LimitSceneSoundVolumedB = 0.;
					EnableMenuNavigation(False, False, Null, 3);
				}

				UI_LibRS_IsVisible = DesiredVisible;
			}

			declare AnimTime = TriggerTime+C_AnimText_DelayShow+C_AnimText_Duration;
			declare AnimDone = Now >= AnimTime;
			
			if(DesiredVisible && AnimDone) {
				TransitionFromGameDone = True;
				declare netwrite Text		Net_Reward_DiffRank					for UI;
				if(Net_Reward_Status == "RANKING") {
					if(Net_Reward_DiffRank != "") {
						Label_Subtitle.Value = Net_Reward_DiffRank;
					}
				}
			}

			if(DesiredVisible && !AnimDone)
			{
				Frame_Reward.Show();
				
				if(!TransitionFromGameDone) {
					Quad_Transition.RelativePosition.X = AL::Ease(
						C_AnimTransition_Easing, 
						Now-TriggerTime*1., 
						160., 
						{{{-C_REWARDS_TRANSITION_SIZE_X/2.-170.}}}, 
						C_AnimTransition_Duration
					);
				}
				
				Label_Title.RelativePosition.X = AL::Ease(
					C_AnimText_Easing, 
					Now-(TriggerTime+C_AnimText_DelayShow)*1., 
					C_AnimText_Offset, 
					-C_AnimText_Offset, 
					C_AnimText_Duration
				);
				
				Label_Title2.RelativePosition.X = AL::Ease(
					C_AnimText_Easing, 
					Now-(TriggerTime+C_AnimText_DelayShow)*1., 
					C_AnimText_Offset, 
					-C_AnimText_Offset, 
					C_AnimText_Duration
				);
				
				Label_Subtitle.RelativePosition.X = AL::Ease(
					C_AnimText_Easing, 
					Now-(TriggerTime+C_AnimText_DelayShow)*1., 
					-C_AnimText_Offset, 
					C_AnimText_Offset, 
					C_AnimText_Duration
				);
				
				if(HasImageChanged) {
					Quad_Image.Opacity = AL::Ease(
						C_AnimText_Easing, 
						Now-(TriggerTime+C_AnimText_DelayShow)*1., 
						0., 
						1., 
						C_AnimText_Duration
					);
				}
			}
			
			if(!DesiredVisible && !AnimDone)
			{
				Quad_Transition.RelativePosition.X = AL::Ease(
					C_AnimTransition_Easing, 
					Now-(TriggerTime+C_AnimText_DelayHide)*1., 
					{{{-C_REWARDS_TRANSITION_SIZE_X/2.}}}, 
					{{{C_REWARDS_TRANSITION_SIZE_X/2.+160.}}}, 
					C_AnimTransition_Duration
				);
				
				Label_Title.RelativePosition.X = AL::Ease(
					C_AnimText_Easing, 
					Now-TriggerTime*1., 
					0., 
					C_AnimText_Offset, 
					C_AnimText_Duration
				);
				
				Label_Title2.RelativePosition.X = AL::Ease(
					C_AnimText_Easing, 
					Now-TriggerTime*1.,
					0.,
					C_AnimText_Offset,
					C_AnimText_Duration
				);
				
				Label_Subtitle.RelativePosition.X = AL::Ease(
					C_AnimText_Easing, 
					Now-TriggerTime*1., 
					0., 
					-C_AnimText_Offset, 
					C_AnimText_Duration
				);
				
				Quad_Image.Opacity = AL::Ease(
					C_AnimText_Easing, 
					Now-(TriggerTime+C_AnimText_DelayShow)*1., 
					1., 
					-1., 
					C_AnimText_Duration
				);
			}

			Frame_PressToContinue		.Visible = AnimDone && DesiredVisible && Net_Reward_ShowContinue;
			Quad_PressToContinueButton	.Visible = Label_PressToContinue.Value != "";
			
			if(DesiredVisible) {
				if(!AnimDone) {
					Frame_Reward				.Visible = True;
				}
			} else {
				if(AnimDone) {
					Frame_Reward				.Visible = False;
				}
			}
			
			if(Now >= (AnimTime - 500) && DesiredVisible) {
				Label_Subtitle.Opacity = 0.5 + 0.5 * ML::Sin(Now*{{{C_SPEED_ANIM_BLINKSPEED}}});
				if(Net_Reward_ShowContinue) {
					foreach(Event in PendingEvents)
					{
						if(Event.Type 			== CMlEvent::Type::MenuNavigation 
						&&(Event.MenuNavAction 	== CMlEvent::EMenuNavAction::Select
						))
						{
							Quad_Image				.ImageUrl 	= "";
							Label_Title				.Value 		= "";
							Label_Title2			.Value		= "";
							Label_Subtitle			.Value 		= "";
							Label_Subtitle.Opacity = 1.0;
							Label_PressToContinue	.Value		= "";
							Net_Reward_TriggerPressedContinue += 1;
							
							HasImageChanged 	= False;
						}
						if(Event.MenuNavAction == CMlEvent::EMenuNavAction::AppMenu)
						{
							ShowInGameMenu();
						}
					}
				}
			}
		}
	}
	--></script>
	""";

	return ML;
}

Void FlushRewardAnswer(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	declare	netread 	Integer Net_Reward_TriggerPressedContinue for UI;
	declare	 			Integer Pre_Reward_TriggerPressedContinue for UI;
	Pre_Reward_TriggerPressedContinue = Net_Reward_TriggerPressedContinue;
}

Boolean GetRewardAnswer(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return False;
	declare	netread 	Integer Net_Reward_TriggerPressedContinue for UI;
	declare	 			Integer Pre_Reward_TriggerPressedContinue for UI;
	if(Pre_Reward_TriggerPressedContinue != Net_Reward_TriggerPressedContinue) {
		Pre_Reward_TriggerPressedContinue = Net_Reward_TriggerPressedContinue;
		return True;
	}
	return False;
}

Boolean GetRewardAnswerSplit(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return False;
	declare	netread 	Integer Net_Reward_TriggerPressedContinueSplit for UI;
	declare	 			Integer Pre_Reward_TriggerPressedContinueSplit for UI;
	if(Pre_Reward_TriggerPressedContinueSplit != Net_Reward_TriggerPressedContinueSplit) {
		Pre_Reward_TriggerPressedContinueSplit = Net_Reward_TriggerPressedContinueSplit;
		return True;
	}
	return False;
}


Void ShowRewardSplit(CTmPlayer _Player, Text _Title, Text _Title2, Text _SubTitle, Text _ButtonAction, Vec3 _TextColor, Text _IsPositive, Boolean _ShowContinue)
{
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	declare	netwrite Integer 	Net_Reward_TriggerShow 	for UI;
	declare	netwrite Text 		Net_Reward_TitleSplit 			for UI;
	declare	netwrite Text 		Net_Reward_TitleSplit2 			for UI;
	declare	netwrite Text 		Net_Reward_SubTitleSplit 		for UI;
	declare	netwrite Text 		Net_Reward_ButtonActionSplit	for UI;
	declare	netwrite Text 		Net_Reward_ImageUrlSplit 		for UI;
	declare	netwrite Vec3 		Net_Reward_TextColorSplit		for UI;
	declare	netwrite Text 		Net_Reward_IsPositiveSplit		for UI;
	declare netwrite Boolean	Net_Reward_ShowContinueSplit	for UI;
	
	Net_Reward_TitleSplit 			= _Title;
	Net_Reward_TitleSplit2 			= _Title2;
	Net_Reward_SubTitleSplit 		= _SubTitle;
	Net_Reward_ButtonActionSplit 	= _ButtonAction;
	Net_Reward_TextColorSplit 		= _TextColor;
	Net_Reward_IsPositiveSplit 		= _IsPositive;
	Net_Reward_TriggerShow 	+= 1;
	Net_Reward_ShowContinueSplit	= _ShowContinue;
}


Void HideRewardSplit(CTmPlayer _Player)
{
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	declare	netwrite Integer 	Net_Reward_TriggerHideSplit	for UI;
	Net_Reward_TriggerHideSplit 	+= 1;
}

Void ShowReward(CTmPlayer _Player, Text _Title, Text _Title2, Text _SubTitle, Text _ButtonAction, Vec3 _TextColor, Text _Status, Boolean _ShowContinue,
 Boolean _IsHMDActive, Boolean _ShowMedal, Text[] _RankZone, Text[] _RankScoreLeft, Integer[] _RankAddLeft, Text[] _RankScoreRight, Integer[] _RankAddRight, Integer _PrevMedal, Integer _NewMedal, Boolean _EnableMenuNav)
{
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	declare	netwrite Integer 	Net_Reward_TriggerShow    for UI;
	declare	netwrite Text 		Net_Reward_Title          for UI;
	declare	netwrite Text 		Net_Reward_Title2         for UI;
	declare	netwrite Text 		Net_Reward_SubTitle       for UI;
	declare	netwrite Text 		Net_Reward_ButtonAction   for UI;
	declare	netwrite Vec3 		Net_Reward_TextColor      for UI;
	declare	netwrite Text 		Net_Reward_Status         for UI;
	declare netwrite Boolean	Net_Reward_ShowContinue   for UI;
	declare netwrite Boolean	Net_Reward_IsHMDActive    for UI;
	declare netwrite Boolean	Net_Reward_ShowMedal      for UI;
	declare	netwrite Text[] 	Net_Reward_RankZone  	  for UI;
	declare netwrite Boolean	Net_EnableMenuNav         for UI;
	//declare	netwrite Text[] 	Net_Reward_RankScoreLeft  for UI;
	//declare	netwrite Integer[] 	Net_Reward_RankAddLeft    for UI;
	//declare	netwrite Text[] 	Net_Reward_RankScoreRight for UI;
	//declare	netwrite Integer[] 	Net_Reward_RankAddRight   for UI;
	declare	netwrite Integer 	Net_PrevMedal             for UI;
	declare	netwrite Integer 	Net_NewMedal              for UI;
	
	Net_Reward_Title          = _Title;
	Net_Reward_Title2         = _Title2;
	Net_Reward_SubTitle       = _SubTitle;
	Net_Reward_ButtonAction   = _ButtonAction;
	Net_Reward_TextColor      = _TextColor;
	Net_Reward_Status         = _Status;
	Net_Reward_TriggerShow    += 1;
	Net_Reward_IsHMDActive    = _IsHMDActive;
	Net_Reward_ShowMedal      = _ShowMedal;
	Net_Reward_RankZone       = _RankZone;
	Net_EnableMenuNav         = _EnableMenuNav;
	Net_PrevMedal             = _PrevMedal;
	Net_NewMedal              = _NewMedal;

	Net_Reward_ShowContinue	= _ShowContinue;

	FlushRewardAnswer(_Player);
}

Void ShowReward(CTmPlayer _Player, Text _Title, Text _Title2, Text _SubTitle, Text _ButtonAction, Vec3 _TextColor, Text _Status,
 Boolean _ShowContinue, Boolean _IsHMDActive, Boolean _ShowMedal, Text[] _RankZone, Text[] _RankScore, Integer[] _RankAdd)
{
	ShowReward(_Player, _Title, _Title2, _SubTitle, _ButtonAction, _TextColor, _Status, _ShowContinue, False, _ShowMedal, _RankZone, _RankScore, _RankAdd, Text[], Integer[], 5, 5, True);

}

Void ShowReward(CTmPlayer _Player, Text _Title, Text _Title2, Text _SubTitle, Text _ButtonAction, Vec3 _TextColor, Text _Status, Boolean _ShowContinue, Boolean _ShowMedal)
{
	ShowReward(_Player, _Title, _Title2, _SubTitle, _ButtonAction, _TextColor, _Status, _ShowContinue, False, _ShowMedal, Text[], Text[], Integer[], Text[], Integer[], 5, 5, True);
}


Void HideReward(CTmPlayer _Player)
{
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	
	declare	netwrite Integer 	Net_Reward_TriggerHide	for UI;
	Net_Reward_TriggerHide 	+= 1;
}

Void ShowTransition(CTmPlayer _Player)
{
	ShowReward(_Player, "", "", "", "", <0.,0.,0.>, "", False, False);
}

Void HideTransition(CTmPlayer _Player)
{
	HideReward(_Player);
}

Void Load(Text _ModeName) {
	G_FontMain = Font::GetFontName("Main");
	/*
	if(_ModeName == "Rounds Splitscreen") {
		foreach(Player in Players) 
		{
			declare UI <=> UIManager.GetUI(Player);
			declare Reward 		<=> UIManager.UILayerCreate();
			Reward.ManialinkPage = Private_GetRewards2(Players.count);
			UI.UILayers.add(Reward);
			FlushRewardAnswer(Player);
		}
		Layers::Create(C_LAYERNAME_REWARDS^"Split", Private_GetRewardsSplitscreen2());
		Layers::Attach(C_LAYERNAME_REWARDS^"Split");
	} else {
	}
	*/
	Layers::Create(C_LAYERNAME_REWARDS, Private_GetRewards2(1));
	Layers::Attach(C_LAYERNAME_REWARDS);
}
