#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"								as Manialink
#Include "Libs/Trackmania/Ingame/Medals.Script.txt"									as Medals
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt" 					            		as Colors
#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_SoloMapInfosBase.Script.txt"		as Inject_SoloMapInfosBase
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 								as Font


#Const TMC_MEDAL_AUTHOR					0
#Const TMC_MEDAL_GOLD					1
#Const TMC_MEDAL_SILVER					2
#Const TMC_MEDAL_BRONZE					3
#Const TMC_MEDAL_PLAYER					4
#Const TMC_MEDAL_NONE					5
#Const TMC_MEDAL_ANOTHERPLAYER			6

#Const IMGPATH								"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/"

Text Build() {
	declare Integer Count_InstancesY         = 8;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = 0.;
	declare Real	PosYFirstQuad            = 40.;

	declare Real	SizeXQuad                = 107.8;
	declare Real	SizeYQuad                = 11.3;
	declare Real	MarginY_Button           = 0.4;
	declare Real	MarginX_Button           = 4.0;

	declare Real SizeButtonX = 39.;
	declare Real SizeButtonY = 9.;
	declare Real WidthButton = 0.4;

 	// style="Bgs1" substyle="BgDialogBlur"
	declare Text	MainFont	= Font::GetFontName("Main");
	declare Text	SubFont		= Font::GetFontName("SubTitle");
	declare Text MLText = """
<manialink version="3" name="L_UIMedalSelection">

	<framemodel id="Frame_ButtonInput">
		<label id="Label_Select"  halign="left"   valign="center" z-index="2" pos="{{{-SizeButtonX + 3.}}} -4.0" textsize="1.8" textprefix="$t" textcolor="fff" text="{{{_("Select")}}}" size="{{{SizeXQuad-4.}}}"/>
		<quad halign="right" valign="bottom" size="{{{SizeButtonX}}} {{{WidthButton}}}"  z-index="0" pos="0.0 0.0"                                               opacity="0.5" bgcolor="fff" />
		<quad halign="left"  valign="top"    size="{{{WidthButton}}} {{{SizeButtonY}}} " z-index="0" pos="0.0 {{{WidthButton}}}"                                 opacity="0.5" bgcolor="fff" />
		<quad halign="left"  valign="top"    size="{{{SizeButtonX}}} {{{WidthButton}}}"  z-index="0" pos="{{{-SizeButtonX}}} {{{-SizeButtonY+WidthButton*2.}}}"  opacity="0.5" bgcolor="fff" />
		<quad halign="right" valign="bottom" size="{{{WidthButton}}} {{{SizeButtonY}}} " z-index="0" pos="{{{-SizeButtonX}}} {{{-SizeButtonY+WidthButton}}}"     opacity="0.5" bgcolor="fff" />
	</framemodel>

	<framemodel id="Frame_Button">
		<quad id="Button_Player"    halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" pos="0 1" opacity="0.0" bgcolor="009" scriptevents="1" />
		<quad id="Quad_ButtonImg"      halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="1" pos="0 0" opacity="0.6" bgcolor="000"/>
		<quad id="Quad_Bg1"            halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="0" pos="0 0" opacity="0.1" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
		<frame id="Frame_Add" z-index="4">
			<quad halign="center" valign="center" size="5 0.6" opacity="1.0" bgcolor="ddd" />
			<quad halign="center" valign="center" size="0.6 5" opacity="1.0" bgcolor="ddd" />
		</frame>
		<frame id="Frame_Content" z-index="4">
			<entry halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" pos="0 0" z-index="6" textsize="3." id="Entry_Name" scriptevents="1"/>
		</frame>
	</framemodel>

	<frame id="Frame_All">

		<frame id="Frame_Menu"  z-index="10" hidden="0">

			<quad z-index="-4" pos="0. 0." size="320 180" valign="center" halign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0." bluramount="0."/>
			
			<frame id="Frame_Header"  z-index="1" hidden="0" pos="0 25">
				<quad halign="center" valign="center" size="1 16" z-index="2" pos="-52.9 32" opacity="1." bgcolor="fff" id="Frame_Foot"/>
				<label id="Label_Mode"  z-index="2" pos="-48.7 36.4" size="320 180" valign="center" halign="left" textsize="12" textprefix="$s" text="HotSeat"  textcolor="fff" textfont="{{{MainFont}}}"/>
				<label id="Label_Mode2" z-index="2" pos="-48.1 27.4" size="320 180" valign="center" halign="left" textsize="6"  textprefix="$s" text="{{{_("Enter players' names")}}}"  textcolor="fff" textfont="{{{MainFont}}}"/>
			</frame>
		

			<frame id="Frame_Footer"  z-index="1" hidden="1" pos="{{{PosXFirstQuad}}} 2">
				<quad id="Quad_ButtonImg" halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad+1.6}}}" z-index="1" pos="0 0" opacity="0.2" bgcolor="000"/>
				<quad id="Quad_Bg1"       halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad+1.6}}}" z-index="0" pos="0 0" opacity="0.1" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
			</frame>

			<frame id="Frame_Buttons"  z-index="1" hidden="0" pos="{{{PosXFirstQuad}}} {{{PosYFirstQuad}}}">
			""";
	for(I, 0, Count_InstancesY)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = IndexY*-SizeYQuad - IndexY*MarginY_Button*1.;
		for(J, 0, Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = IndexX*SizeXQuad + IndexX*MarginX_Button*1.;
			MLText ^="""
				<frameinstance modelid="Frame_Button" id="Frame_Button{{{I}}}" z-index="3." pos="{{{PosnX}}} {{{PosnY}}}" hidden="1"/>
			""";
		}
	}
	
	declare Real IndexY = (-Count_InstancesY)*1.;
	declare Real PosnXStartGame = 0.*SizeXQuad + 0.*MarginX_Button*1.;
	declare Real PosnYStartGame = IndexY*SizeYQuad + IndexY*MarginY_Button*1.;
	MLText ^="""

				<frame id="Frame_StartGame" pos="{{{PosnXStartGame}}} {{{PosnYStartGame}}}">
					
					<frame id="Frame_ButtonStart" z-index="4">
						<quad id="Button_StartGame"    halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" pos="0 0" opacity="0.0" bgcolor="fff" scriptevents="1" />
						<quad id="Quad_ButtonImg"      halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad-1.}}}" z-index="1" pos="0 0" opacity="0.6" bgcolor="000"/>
						<quad id="Quad_Bg1"            halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="0" pos="0 0" opacity="0.1" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
					</frame>
					
					<frame id="Frame_Content" z-index="5">
						<label id="Label_Button"       halign="center"   valign="center" style="TextButtonBig" z-index="0" pos="{{{0.}}} 0.2" text="{{{_("Start Game")}}}" textsize="3" textcolor="fff" opacity="1." textfont="{{{SubFont}}}"/>
					</frame>
					<frame id="Frame_Contour" pos="{{{SizeXQuad/2.}}} {{{SizeYQuad/2.-0.3}}}" z-index="6">
						<quad halign="right" valign="bottom" size="{{{SizeXQuad}}} {{{WidthButton}}}"  z-index="0" pos="0.0 0.0"                                               opacity="0.5" bgcolor="fff" />
						<quad halign="left"  valign="top"    size="{{{WidthButton}}} {{{SizeYQuad}}} " z-index="0" pos="0.0 {{{WidthButton}}}"                                 opacity="0.5" bgcolor="fff" />
						<quad halign="left"  valign="top"    size="{{{SizeXQuad}}} {{{WidthButton}}}"  z-index="0" pos="{{{-SizeXQuad}}} {{{-SizeYQuad+WidthButton*2.}}}"  opacity="0.5" bgcolor="fff" />
						<quad halign="right" valign="bottom" size="{{{WidthButton}}} {{{SizeYQuad}}} " z-index="0" pos="{{{-SizeXQuad}}} {{{-SizeYQuad+WidthButton}}}"     opacity="0.5" bgcolor="fff" />
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>
	
	
	<script><!--
		#Const DebugName  "L_MedalSelection"

		#Const C_PlayersMax  8

		{{{Manialink::GetIncludes()}}}
		{{{Manialink::Load()}}}
		
		//declare Integer G_ButtonFocus;
		declare Integer G_NumberOfPlayers;
		declare Integer G_NumberOfPlayersSet;
		
		Text[Integer] GetAllNames()
		{
			declare Text[Integer] AllNames;
			declare Integer Index;
			for(I, 0, G_NumberOfPlayersSet)
			{
				declare CMlFrame Frame_Button <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I) as CMlFrame);
				declare CMlEntry Entry_Name   <=> (Frame_Button.GetFirstChild("Entry_Name") as CMlEntry);
				//Entry_Name.StartEdition();
				if(Entry_Name.Value != "")
				{
					AllNames[Index] = Entry_Name.Value;
					Index += 1;
				}

			}
			return AllNames;
		}

		Void ClearChoose()
		{
			declare netwrite Integer Net_NbPlayerChosen for UI;
			declare netwrite Boolean Net_GameIsInit for UI;
			Net_GameIsInit = False;
			Net_NbPlayerChosen = 0;
		}

		Void UpdateLabel()
		{
			//declare CMlLabel Label_NbOfPlayers        <=> (Page.MainFrame.GetFirstChild("Label_NbOfPlayers")		 as CMlLabel);
			//Label_NbOfPlayers.SetText(G_NumberOfPlayers^"");
		}

		Void PressSelect()
		{
			EnableMenuNavigation(False, False, Null, 0);
			declare netwrite Boolean Net_GameIsInit for UI;
			declare netwrite Integer Net_NbPlayerChosen for UI;
			Net_NbPlayerChosen = G_NumberOfPlayers;
			Net_GameIsInit     = True;
		}

		Void EditEntry(Integer _QuadId)
		{
			declare CMlFrame Frame_Button <=> (Page.MainFrame.GetFirstChild("Frame_Button"^_QuadId) as CMlFrame);
			declare CMlEntry Entry_Name   <=> (Frame_Button.GetFirstChild("Entry_Name") as CMlEntry);
			Entry_Name.Value = "";
			Entry_Name.StartEdition();
		}

		Void UpdateButtons()
		{
			for(I, 0, {{{Count_InstancesY-1}}})
			{
				declare CMlFrame Frame_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I) as CMlFrame);
				declare CMlFrame Frame_Add          <=> (Frame_Button.GetFirstChild("Frame_Add") as CMlFrame);
				declare CMlFrame Frame_Content      <=> (Frame_Button.GetFirstChild("Frame_Content") as CMlFrame);
				declare CMlQuad Button_Player    <=> (Frame_Button.GetFirstChild("Button_Player")  as CMlQuad);
				if(G_NumberOfPlayersSet > I)
				{
					Frame_Button.Show();
					Frame_Add.Hide();
					Frame_Content.Show();
				}
				else if(G_NumberOfPlayersSet == I)
				{
					Frame_Button.Show();
					Frame_Add.Show();
					Frame_Content.Hide();
				}
				else                            Frame_Button.Hide();
			}

			
			declare CMlFrame Frame_ButtonStart <=> (Page.MainFrame.GetFirstChild("Frame_ButtonStart")	as CMlFrame);
			declare CMlFrame Frame_Contour     <=> (Page.MainFrame.GetFirstChild("Frame_Contour")		as CMlFrame);
			declare CMlFrame Frame_Content     <=> (Page.MainFrame.GetFirstChild("Frame_Content")		as CMlFrame);
			declare CMlLabel Label_Button      <=> (Page.MainFrame.GetFirstChild("Label_Button")		as CMlLabel);
			

			//if(G_NumberOfPlayersSet >= 2)
			if(GetAllNames().count >= 2)
			{
				Frame_ButtonStart.Show();
				Frame_Contour.Hide();
				Label_Button.Opacity = 1.;
			}
			else
			{
				Frame_ButtonStart.Hide();
				Frame_Contour.Show();
				Label_Button.Opacity = 0.4;
			}
		}

		Void Init()
		{
			ClearChoose();
			G_NumberOfPlayers = 2;
			G_NumberOfPlayersSet = 0;
			UpdateLabel();

			for(I,0, {{{Count_InstancesY-1}}})
			{
				declare CMlFrame Frame_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I) as CMlFrame);
				declare CMlQuad Button_Player    <=> (Frame_Button.GetFirstChild("Button_Player")  as CMlQuad);
				declare Integer QuadId for Button_Player;
				QuadId = I;
			}
			UpdateButtons();

			/*
			declare CMlLabel Label_MapName        <=> (Page.MainFrame.GetFirstChild("Label_MapName")		 as CMlLabel);
			declare CMlLabel Label_Author         <=> (Page.MainFrame.GetFirstChild("Label_Author")	    	 as CMlLabel);
			declare Text MapName        = Map.MapName;
			declare Text AuthorNickName = "By " ^Map.MapInfo.AuthorNickName;
			Label_MapName.SetText(MapName);
			Label_Author.SetText(AuthorNickName);
			*/
		}

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,2);
			ClearChoose();
		}

		Void AnimBump(CMlQuad _Quad)
		{
			declare Integer Speed = 60;
			LibManialink_SetTargetScale(_Quad, 1.2);
			LibManialink_PresetAnimInsert(_Quad, 0, Speed, "EaseOutQuint");
			LibManialink_SetTargetScale(_Quad, 1.);
			LibManialink_PresetAnimInsert(_Quad, Speed, Speed*2, "EaseOutQuint");
		}

		Void AnimFailBump(CMlQuad _Quad, Real _InitRotation, Integer _AddRot)
		{
			declare Integer Speed = 50;
			declare Real InitRotation = _InitRotation;
			LibManialink_SetTargetRotation(_Quad, InitRotation + _AddRot);
			LibManialink_PresetAnimInsert(_Quad, 0, Speed, "EaseOutQuint");
			LibManialink_SetTargetRotation(_Quad, InitRotation);
			LibManialink_PresetAnimInsert(_Quad, Speed, Speed*2, "EaseOutQuint");
		}


		main() {
			Init();

			declare Boolean Prev_Visibility;

			while(True) {
				
				yield;
				if(Prev_Visibility != PageIsVisible) {
					if(PageIsVisible) ShowPage();
					Prev_Visibility = PageIsVisible;
				}
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
				

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Select : {
								}
								case CMlEvent::EMenuNavAction::Action1 : {
									//HACK
									/*
									G_NumberOfPlayers = 2;
									declare netwrite Text[Integer]		Net_NamesChoose for UI;
									Net_NamesChoose[0] = "Player 1";
									Net_NamesChoose[1] = "Player 2";
									PressSelect();
									*/
								}
								case CMlEvent::EMenuNavAction::Left : {
									//declare CMlQuad Quad_ArrowL    <=> (Page.MainFrame.GetFirstChild("Quad_ArrowL") as CMlQuad);
									if(G_NumberOfPlayers > 2)
									{
										G_NumberOfPlayers -= 1;
										UpdateLabel();
									}
								}
								case CMlEvent::EMenuNavAction::Right : {
									//declare CMlQuad Quad_ArrowR    <=> (Page.MainFrame.GetFirstChild("Quad_ArrowR") as CMlQuad);
									if(G_NumberOfPlayers < C_PlayersMax)
									{
										G_NumberOfPlayers += 1;
										UpdateLabel();
										//AnimBump(Quad_ArrowR);
									}
									else
									{
										//AnimFailBump(Quad_ArrowR, 0., 5);
									}
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "Button_StartGame")
							{
								G_NumberOfPlayers = GetAllNames().count;
								declare netwrite Text[Integer]		Net_NamesChoose for UI;
								Net_NamesChoose = GetAllNames();
								PressSelect();
							}
							else if (Event.ControlId == "Button_Player")
							{
								declare Integer QuadId for Event.Control;
								if(QuadId == G_NumberOfPlayersSet)
								{

									if(G_NumberOfPlayersSet < {{{Count_InstancesY}}}) G_NumberOfPlayersSet += 1;
									UpdateButtons();
									EditEntry(QuadId);
								}
							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "Button_StartGame")
							{
								declare CMlQuad Quad_RollOver <=> (Event.Control as CMlQuad);
								Quad_RollOver.Opacity = 0.5;
								declare CMlFrame Frame_Contour <=> (Page.GetFirstChild("Frame_Contour") as CMlFrame);
								Frame_Contour.Show();
							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "Button_StartGame")
							{
								declare CMlQuad Quad_RollOver  <=> (Event.Control as CMlQuad);
								Quad_RollOver.Opacity = 0.;
								declare CMlFrame Frame_Contour <=> (Page.GetFirstChild("Frame_Contour") as CMlFrame);
								Frame_Contour.Hide();
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.PluginCustomEventType) {
								case "Show" : {
									ShowPage();
								}
								
								case "Hide" : {
									//EnableMenuNavigation(True,False,Null,0);
								}
							}
						}
						case CMlEvent::Type::EntrySubmit: {
							UpdateButtons();
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}