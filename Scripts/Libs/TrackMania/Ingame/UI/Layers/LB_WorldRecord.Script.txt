#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"			as Manialink
#Include "TextLib"												as TextLib
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font
#Include "Libs/Nadeo/MP4/TPLagoon/LibButton_Img.Script.txt"			as LibButton_Img


#Const Label_Score_HiddenPos	<15., 0.>
#Const Label_Score_ShownPos		<0., 0.>
#Const Label_Zone_HiddenPos		<-41., 0.>
#Const Label_Zone_ShownPos		<-13., 0.>
#Const C_SizeMainButton         <79.5, 9.>
#Const C_SizeGoButton           <26.5, 8.>
#Const C_ImgBase		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/"

#Const C_IMG_Checkbox_Closed_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed_Over.dds"
#Const C_IMG_Checkbox_Closed	"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Closed.dds"
#Const C_IMG_Checkbox_Open_Over "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open_Over.dds"
#Const C_IMG_Checkbox_Open		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Checkbox_Open.dds"

#Const C_SelectorLargeur		0.4

Text Build() {
	declare Real SizeXQuad      = 130.;
	declare Real SizeYQuad      = 10.9;
	declare Real SizeXQuadTrack = 46.;

	declare Integer Count_InstancesPlayerY = 10;
	declare Integer Count_InstancesPlayerX = 1;
	declare Real	MarginY_ButtonPlayer   = 0.3;
	declare Real	MarginX_ButtonPlayer   = 4.0;
	declare Real	PosXFirstPlayer        = 9.8;
	declare Real	PosYFirstPlayer        = 36.6;

	declare Text    IMGArrow    = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/FlecheTri.dds";
	declare Text    IMGButton   = "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Buttons/Button_Scroll_v.dds";
	declare Text IMGGlobal_Back = C_ImgBase ^ "Global_Back.dds";

	declare Text	MainFont	= Font::GetFontName("Main");
	declare Text	SubFont		= Font::GetFontName("SubTitle");

	declare Text MLText = """
<manialink version="3" name="L_WorldRecord">
	<framemodel id="MenuButtons_FrameModelPlayer">
		<frame id="Frame_Button">
			<quad  id="MenuButtons_Player" halign="right"   valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="0 0" z-index="1"                     opacity="0.5"             bgcolor="000" scriptevents="1" />
			<quad  id="MenuButtons_Color"  halign="right"   valign="bottom" size="15.3 0.5" z-index="3"             pos="0 {{{-SizeYQuad/2.}}}"               opacity="0."              bgcolor="090" scriptevents="1" />
			<quad  id="MenuButtons_Barre"  halign="center"  valign="center" size="0.2 {{{SizeYQuad-2.5}}}"          pos="{{{-SizeXQuad+10.4}}} 0"             opacity="0.2" z-index="3" bgcolor="fff"/>
			<quad  id="Quad_IsActivate"    halign="center"  valign="center" size="{{{C_SizeMainButton.Y}}} {{{C_SizeMainButton.Y}}}" pos="-114.7 -0.5" z-index="2" image="{{{C_IMG_Checkbox_Open}}}" imagefocus="{{{C_IMG_Checkbox_Open_Over}}}" scriptevents="1"/>
			<label id="MenuButtons_Score"  halign="right"   valign="center" size="18 {{{SizeYQuad}}}" textfont="{{{MainFont}}}" pos="{{{-3.}}} {{{0.5}}}"                 opacity="1.0" z-index="2" textsize="3" text=""/>
			<label id="MenuButtons_Rank"   halign="right"   valign="center" size="8 {{{SizeYQuad}}}" textfont="{{{MainFont}}}" pos="{{{-SizeXQuad+9.}}} {{{0.5}}}"       opacity="1.0" z-index="2" textsize="5" text=""/>
			<label id="MenuButtons_Label"  halign="left"    valign="center" size="{{{SizeXQuad - 35.}}} {{{SizeYQuad}}}"       pos="{{{-SizeXQuad+24.}}} {{{0.5}}}"      opacity="1.0" z-index="2" textsize="3" text=""/>
			<frame id="Frame_Select" z-index="4" hidden="1">
				<quad id="MenuButtons_Select" halign="right"   valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}"  pos="0 0" z-index="0" opacity="0.8" bgcolor="fff"/>
				<quad                         halign="right"   valign="center" size="6. {{{SizeYQuad}}}"  pos="{{{-SizeXQuad-0.5}}} 0" z-index="0" opacity="0.6" bgcolor="000"/>
				<quad id="MenuButtons_Arrow"  halign="center"  valign="center" size="2.2 2.2"  pos="{{{-SizeXQuad-3.5}}} 0" z-index="1" opacity="1.0" image="{{{IMGArrow}}}" rot="-90" keepratio="Fit"/>
			</frame>
		</frame>
			
	</framemodel>
	<framemodel id="MenuButtons_FrameModelTrack">
		<frame id="Frame_Button">
			<quad id="MenuButtons_Track"  halign="right"   valign="center" size="{{{SizeXQuadTrack}}} {{{SizeYQuad}}}"  pos="0 0" z-index="1" opacity="0.5" bgcolor="000" scriptevents="1" />
			<quad id="MenuButtons_Color"  halign="left"    valign="center" size="0.6 {{{SizeYQuad}}}"  pos="0 0" z-index="1" opacity="0.3" bgcolor="fff" scriptevents="1" />
			
			<quad id="MenuButtons_Barre"  halign="center"  valign="center" size="0.2 {{{SizeYQuad-2.5}}}"  pos="{{{-SizeXQuadTrack+1.4}}} 0" z-index="3" opacity="0.4" bgcolor="fff"/>
			<quad id="MenuButtons_Arrow"  halign="center"  valign="center" size="2.2 2.2"  pos="{{{-SizeXQuadTrack+3.4}}} 0" z-index="3" opacity="1.0" image="{{{IMGArrow}}}" rot="-90" keepratio="Fit"/>
			
			<label id="MenuButtons_Score" halign="right"   valign="center" textfont="{{{MainFont}}}" pos="{{{-3.}}} 0.4" opacity="1.0" z-index="2" textsize="3" text="1543212"/>
			<label id="MenuButtons_Rank"  halign="right"   valign="center" textfont="{{{MainFont}}}" pos="{{{-SizeXQuadTrack+6.}}} 0." opacity="0.0" z-index="2" textsize="5" text="01"/>
			<label id="MenuButtons_Label" halign="left"    valign="center"                      pos="{{{-SizeXQuadTrack+6.}}} 0." opacity="1.0" z-index="2" textsize="3" text="A01"/>
		</frame>
	</framemodel>
	<frame id="Frame_All"  pos="0 0" z-index="20" hidden="0">
		<quad z-index="-4" pos="0. 0." size="320 180" valign="center" halign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0.3" bluramount="0."/>
		<frame pos="0 0">
			<frame id="ButtonRecordCenter" pos="-135.3 41.5" hidden="1">
				<quad id="ButtonRecordCenterStart" size="41.2 10" z-index="-1" scriptevents="1"/>
				<quad id="ButtonRecordCenterStartOver" size="41.2 10" z-index="-2" bgcolor="000" opacity="0.5" hidden="1"/>
				<label size="41.2 10" pos="20 -5" textfont="{{{SubFont}}}" text="RECORD CENTER" valign="center" halign="center" textcolor="FFF"/>
				<frame id="RecordCenterContour">
					<quad halign="left" valign="top" size="0.5 10" bgcolor="fff"/>
					<quad halign="left" valign="center" size="41.2 0.5" bgcolor="fff"/>
					<quad halign="left" valign="center" size="41.2 0.5" bgcolor="fff" pos="0 -10"/>
					<quad halign="right" valign="top" size="0.5 10" bgcolor="fff" pos="41.2. 0"/>
				</frame>
			</frame>

			<frame id="Frame_GoButton" pos="26 37.7">
				<label id="Label_ButtonGo" halign="center" valign="center" pos="0. 0" z-index="1" textsize="4." textfont="{{{SubFont}}}" text="GO!" textcolor="fff"/>
				<quad id="Button_Action1" halign="center"   valign="center" size="8 8" pos="-9. -0.2" z-index="1" opacity="1."/>
				<quad id="Quad_ButtonGo" halign="center"   valign="center" size="{{{C_SizeGoButton.X}}} {{{C_SizeGoButton.Y}}}" pos="0. -0.2" z-index="1" opacity="0.2" bgcolor="000" scriptevents="1"/>
				<frame id="Frame_SelectorGo" pos="{{{C_SizeGoButton}}} -0.5" hidden="0">
					<quad id="C_Down"   halign="center" valign="center" pos="0 {{{-C_SizeGoButton.Y/2.}}}" size="{{{C_SizeGoButton.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
					<quad id="C_Up"     halign="center" valign="center" pos="0 {{{C_SizeGoButton.Y/2.}}}"  size="{{{C_SizeGoButton.X}}} {{{C_SelectorLargeur}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
					<quad id="C_Right"  halign="left" valign="center" pos="{{{C_SizeGoButton.X/2.-C_SelectorLargeur}}} 0"  size="{{{C_SelectorLargeur}}} {{{C_SizeGoButton.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
					<quad id="C_Left"   halign="right" valign="center" pos="{{{-C_SizeGoButton.X/2.+C_SelectorLargeur}}} 0" size="{{{C_SelectorLargeur}}} {{{C_SizeGoButton.Y}}}" z-index="1" bgcolor="fff" opacity="1.0"/>
				</frame>
			</frame>





			<frame id="Frame_Back" pos="-145.9 80.8" hidden="0">
				<quad id="Quad_Back" halign="center" valign="center" size="22 5.2"  pos="12 0" opacity="0." bgcolor="000" scriptevents="1"/>
				<quad id="Button_Cancel" halign="center" valign="center" size="{{{4.4+3.}}} {{{4.4+3.}}}" z-index="1" opacity="1.0" keepratio="Fit" />
				<quad id="Quad_BackIcon" halign="center" valign="center" size="{{{4.4}}} {{{4.4}}}" image="{{{IMGGlobal_Back}}}"/>
				<label id="Label_Back" halign="left"   valign="center" text="{{{_("Back")}}}" textfont="{{{SubFont}}}" textprefix="$t" pos="9 0" z-index="2" textsize="2" textcolor="fff" opacity="1."/>

				<quad halign="center" valign="center" size="26 0.2" pos="10.1 -5.2" opacity="0.7" bgcolor="fff"/>
				<quad halign="center" valign="center" size="3 0.4"  pos="21.6 -5" opacity="0.7" bgcolor="fff"/>
			</frame>


			<label id="Label_PlayerRank" pos="{{{PosXFirstPlayer-SizeXQuad+2.}}} {{{PosYFirstPlayer+SizeYQuad-2.}}}" halign="left"  valign="center" textfont="{{{MainFont}}}" opacity="1.0" z-index="2" textsize="2" text=""/>
			<label id="Label_PlayerRank" pos="{{{PosXFirstPlayer-SizeXQuad/2.}}} {{{PosYFirstPlayer+SizeYQuad+6.}}}" halign="center"  valign="center" textfont="{{{MainFont}}}" opacity="1.0" z-index="2" textsize="3" text=""/>
			<label id="Label_PlayerZone" pos="{{{PosXFirstPlayer-SizeXQuad/2.}}} {{{PosYFirstPlayer+SizeYQuad}}}" halign="center"  valign="center" textfont="{{{MainFont}}}" opacity="1.0" z-index="2" textsize="5" text=""/>

			<frame id="Zone" halign="center" valign="center" pos="95.6 33">
				<quad id="MenuButtons_ZonePrev"  halign="center"  valign="center" size="6.2 9.2"  pos="-88.8 14.9"  z-index="3" opacity="1.0" image="{{{IMGButton}}}" keepratio="Fit" colorize="ddd" scriptevents="1" rot="180"/>
				<quad id="MenuButtons_ZoneNext"  halign="center"  valign="center" size="6.2 9.2"  pos="-96. 15"     z-index="3" opacity="1.0" image="{{{IMGButton}}}" keepratio="Fit" colorize="ddd" scriptevents="1" />
			</frame>
			""";
	for(I, 0, Count_InstancesPlayerY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstPlayer + IndexY*-SizeYQuad - IndexY*MarginY_ButtonPlayer*1.;
		for(J, 0, Count_InstancesPlayerX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstPlayer + IndexX*SizeXQuad + IndexX*MarginX_ButtonPlayer*1.;
			MLText^="""
				<frameinstance modelid="MenuButtons_FrameModelPlayer" z-index="5." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_ButtonPlayer{{{I}}}"/>
				""";
		}
	}
	MLText^="""
			</frame>
	


		<frame id="Frame_Header" z-index="1" pos="90.0 35" hidden="1">
			<quad id="Quad_Section" scriptevents="1" halign="right" valign="center" pos="26.5 -0.5" size="54.5 15"  opacity="0.4" bgcolor="000"/>
			<label id="Label_PlayerName"  halign="left"   valign="center" textfont="{{{SubFont}}}" pos="-23 2" z-index="2" textsize="2" textcolor="fff" text="Name" size="30 0"/>
			<quad id="Quad_Flag" halign="right" valign="center" pos="22.0 2.9" z-index="2" size="6.5 5.5" bgcolor="00F"/>
			<frame id="Frame_InfoRanking" pos="-2.6 -0.8" z-index="1">

				<frame id="Clip_Score" halign="center" valign="center" size="16.6 4" pos="-16.0 -2">
					<label id="Label_Score" halign="center" valign="center" textfont="{{{SubFont}}}" textsize="2" textcolor="ff3" opacity="1." text="393 SP" size="20 0" pos="{{{Label_Score_ShownPos[0]}}} {{{Label_Score_ShownPos[1]}}}"/>
				</frame>

				<quad halign="center" valign="center" pos="-7.5 -2" z-index="1" size="0.4 4.0"  opacity="1.0" bgcolor="fff"/>

				<frame id="Clip_Zone" halign="center" valign="center" size="31 4" pos="8.3 -2 1">
					<label id="Label_Zone"  halign="left" valign="center" textfont="{{{SubFont}}}" textsize="1" textcolor="fff" opacity="1." text="Paris [France]" size="30 0" pos="{{{Label_Zone_ShownPos[0]}}} {{{Label_Zone_ShownPos[1]}}}"/>
				</frame>
			</frame>
		</frame>

		<frame id="Frame_Habillage">
			<frame id="Habillage_Menu_Up" pos="{{{- SizeXQuad + 9.1}}}  43.3">
				<quad halign="right" valign="center" size="2.2 0.7" opacity="1." bgcolor="fff"/>
				<quad halign="right" valign="bottom" size="0.7 2.2" opacity="1." bgcolor="fff"/>
			</frame>
			<frame id="Habillage_Menu_Down" pos="10. -72.5">
				<quad halign="right" valign="top" size="{{{SizeXQuad}}} 0.2" opacity="0.7" bgcolor="fff"/>
				<quad halign="right" valign="bottom" size="9  0.4" pos="0 0." opacity="0.7" bgcolor="fff"/>
			</frame>
			<frame id="Habillage_Menu_HeaderDown" pos="116.5  24.5" hidden="1">
				<quad halign="right" valign="top" size="54.5 0.2" opacity="0.7" bgcolor="fff"/>
				<quad halign="right" valign="bottom" size="9  0.4" pos="0 0." opacity="0.7" bgcolor="fff"/>
			</frame>
		</frame>
	</frame>
	
	
	<script><!--
		#Include "TextLib" as WorldRecord_TextLib
		#Const C_TimeNextZone  4500
		
		{{{Manialink::GetIncludes()}}}
		{{{LibButton_Img::IncludeInDeclare()}}}
		
		declare Text[]				G_ZoneNames;
		declare Integer[]			G_ZoneScores;
		declare Text[]				G_PlayersFocus_Login;
		declare Text[]				G_PlayersFocus_Replay;
		declare Text[]				G_PlayersFocus_FileName;
		declare Integer				G_ZoneFocus;
		declare Integer				G_TimeNextZone;
		declare Boolean				G_InfoRankingIsShow;
		declare Integer				G_HideTime;
		declare Integer				G_MenuButton_Player_FocusY;
		declare Integer				G_MenuButton_Player_SelectY;
		declare CMlControl			G_MenuButton_ControlFocus;
		declare Integer				G_MenuButton_Track_FocusY;
		declare Integer				G_Max_Players;
		declare Integer				G_ZonePlayerFocus;
		declare Integer				G_ZonePlayerMax;
		declare Integer				G_GroupePlayerMax;
		declare Text[]				G_PlayerZones;
		declare Text				G_PlayerLogin;
		declare Boolean[Integer]	G_ActiveQuad;
		{{{Manialink::Load()}}}
	
		Void UpdateAll()
		{
			declare CMlFrame Frame_All <=> (Page.MainFrame.GetFirstChild("Frame_All")	as CMlFrame);
			//Frame_All.Visible = _Visibility;
		}

		Void ClearChoose()
		{
			declare netwrite Integer Net_WorldRecordChoice 		for UI;
			declare netwrite Text[]  Net_WorldRecordChoices 			for UI;
			declare netwrite Text[]  Net_WorldRecordChoices_Replay 		for UI;
			declare netwrite Text[]  Net_WorldRecordChoices_FileName 	for UI;
			Net_WorldRecordChoice = -1;
			Net_WorldRecordChoices.clear();
			Net_WorldRecordChoices_Replay.clear();
			Net_WorldRecordChoices_FileName.clear();
			G_PlayersFocus_Login.clear();
			G_PlayersFocus_Replay.clear();
			G_PlayersFocus_FileName.clear();
		}

		Void UpdateFrame_PlayerTracks()
		{
			declare CMlFrame Frame_PlayerTracks <=> (Page.MainFrame.GetFirstChild("Frame_PlayerTracks")	as CMlFrame);
			if(G_MenuButton_Player_SelectY != -1)
			{
				Frame_PlayerTracks.Show();
			}
			else
			{
				Frame_PlayerTracks.Hide();
			}
		}

		Void ShowInfoRanking()
		{
			declare CMlFrame Frame_InfoRanking <=> (Page.MainFrame.GetFirstChild("Frame_InfoRanking")	as CMlFrame);
			declare CMlLabel Label_Score       <=> (Frame_InfoRanking.GetFirstChild("Label_Score")	as CMlLabel);
			declare CMlLabel Label_Zone        <=> (Frame_InfoRanking.GetFirstChild("Label_Zone")	as CMlLabel);

			declare Integer AnimationTime = 1000;

			declare Vec2 NewFramePosition = {{{Label_Score_ShownPos}}};
			LibManialink_SetTargetPosition(Label_Score, NewFramePosition);
			LibManialink_PresetAnim(Label_Score, AnimationTime, "EaseInOutBack");

			declare Vec2 NewFramePosition2 = {{{Label_Zone_ShownPos}}};
			LibManialink_SetTargetPosition(Label_Zone, NewFramePosition2);
			LibManialink_PresetAnim(Label_Zone, AnimationTime, "EaseInOutBack");
		}
		
		Void HideInfoRanking()
		{
			declare CMlFrame Frame_InfoRanking <=> (Page.MainFrame.GetFirstChild("Frame_InfoRanking")	as CMlFrame);
			declare CMlLabel Label_Score       <=> (Frame_InfoRanking.GetFirstChild("Label_Score")	as CMlLabel);
			declare CMlLabel Label_Zone        <=> (Frame_InfoRanking.GetFirstChild("Label_Zone")	as CMlLabel);

			declare Integer AnimationTime = 1000;

			declare Vec2 NewFramePosition = {{{Label_Score_HiddenPos}}};
			LibManialink_SetTargetPosition(Label_Score, NewFramePosition);
			LibManialink_PresetAnim(Label_Score, AnimationTime, "EaseInOutBack");

			declare Vec2 NewFramePosition2 = {{{Label_Zone_HiddenPos}}};
			LibManialink_SetTargetPosition(Label_Zone, NewFramePosition2);
			LibManialink_PresetAnim(Label_Zone, AnimationTime, "EaseInOutBack");
		}

		Void UpdateInfos()
		{
			declare CMlFrame Frame_InfoRanking <=> (Page.MainFrame.GetFirstChild("Frame_InfoRanking")	as CMlFrame);
			declare CMlLabel Label_Score       <=> (Frame_InfoRanking.GetFirstChild("Label_Score")	as CMlLabel);
			declare CMlLabel Label_Zone        <=> (Frame_InfoRanking.GetFirstChild("Label_Zone")	as CMlLabel);

			Label_Zone.SetText(G_ZoneNames[G_ZoneFocus]);
			Label_Score.SetText(G_ZoneScores[G_ZoneFocus] ^ " SP");
		}

		Void UpdateZoneArrow()
		{
			declare CMlQuad MenuButtons_ZoneNext <=> (Page.MainFrame.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
			declare CMlQuad MenuButtons_ZonePrev <=> (Page.MainFrame.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
			declare netread Integer	    NewDataList_GroupCount   for UI;
			
			if(G_ZonePlayerFocus == G_ZonePlayerMax-1 + NewDataList_GroupCount +0) MenuButtons_ZoneNext.Hide();
			else                                       MenuButtons_ZoneNext.Show();


			if(G_ZonePlayerFocus <= 0) MenuButtons_ZonePrev.Hide();
			else                       MenuButtons_ZonePrev.Show();
		}

		Void ShowPage()
		{
			G_PlayerZones     = TL::Split("|", LocalUser.ZonePath);
			G_ZonePlayerMax   = G_PlayerZones.count;
			if(GUIPlayer != Null) G_PlayerLogin = GUIPlayer.User.Login;
			//G_GroupePlayerMax = ;
			G_ZonePlayerFocus = G_PlayerZones.count-1;
			UpdateZoneArrow();
			G_MenuButton_Player_SelectY = -1;
			ClearChoose();

			declare	netwrite Integer	UpdateSendWorldRecordInfos	for UI;
			declare	netwrite Integer	SendWorldRecord_ZoneFocus	for UI;
			UpdateSendWorldRecordInfos += 1;
			SendWorldRecord_ZoneFocus  = G_ZonePlayerFocus;
		}

		Void Init()
		{
			G_PlayerZones = TL::Split("|", LocalUser.ZonePath);
			G_ZoneNames.add("");
			G_ZoneNames.add("");
			G_ZoneNames.add("");
			G_ZoneScores.add(0);
			G_ZoneScores.add(0);
			G_ZoneScores.add(0);

			G_InfoRankingIsShow         = True;
			G_ZoneFocus                 = 0;
			G_ZonePlayerFocus           = 0;
			G_MenuButton_Player_SelectY = -1;
			G_MenuButton_Track_FocusY   = -1;
			G_MenuButton_Player_FocusY  = -1;
			G_Max_Players               = {{{Count_InstancesPlayerY}}};
			G_TimeNextZone              = Now + C_TimeNextZone;
			UpdateInfos();

			for(I, 0, {{{Count_InstancesPlayerY-1}}})
			{
				declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonPlayer"^I) as CMlFrame);
				declare CMlQuad  MenuButtons_Player <=> (ButtonsFrame.GetFirstChild("MenuButtons_Player")	as CMlQuad);
				declare CMlQuad  Quad_IsActivate    <=> (ButtonsFrame.GetFirstChild("Quad_IsActivate")	as CMlQuad);
				declare CMlLabel MenuButtons_Rank   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
				/*
				if(I<9)
				{
					MenuButtons_Rank.SetText("$0000$fff"^(I+1));
				}
				else
				{
					MenuButtons_Rank.SetText("$fff"^(I+1));
				}
				*/
				declare Integer QuadId as QuadId_Player     for MenuButtons_Player;
				declare Integer QuadId as QuadId_IsActivate for Quad_IsActivate;
				QuadId_Player     = I;
				QuadId_IsActivate = I;
			}
			ClearChoose();
			ShowPage();
		}

		Void UnlightFocusPlayer()
		{
			if(G_HideTime > Now || G_MenuButton_Player_FocusY == -1) return;
			if(G_MenuButton_ControlFocus == Null) return;
			
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^G_MenuButton_Player_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			//declare CMlQuad  MenuButtons_Player  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Player")	as CMlQuad);
			declare CMlQuad  MenuButtons_Player  <=> (G_MenuButton_ControlFocus as CMlQuad);
			
			MenuButtons_Player.BgColor = <0., 0., 0.>;
		}

		Void UnlightFocusTrack()
		{
			if(G_HideTime > Now || G_MenuButton_Track_FocusY == -1) return;
			//if(G_MenuButton_ControlFocus == Null) return;
			declare CMlFrame ButtonsFrame        <=> (Page.GetFirstChild("Frame_ButtonTrack"^G_MenuButton_Track_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad MenuButtons_Track   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
			//declare CMlQuad  MenuButtons_Track   <=> (G_MenuButton_ControlFocus as CMlQuad);
			
			MenuButtons_Track.BgColor = <0., 0., 0.>;
		}

		Void LightFocusPlayer()
		{

			if(G_HideTime > Now || G_MenuButton_Player_FocusY <= -1) return;
			if(G_MenuButton_ControlFocus == Null) return;

			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^G_MenuButton_Player_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Player  <=> (G_MenuButton_ControlFocus as CMlQuad);

			MenuButtons_Player.BgColor = <1., 1., 1.>;
			UnlightFocusTrack();
		}
		
		Void LightFocusTrack()
		{

			if(G_HideTime > Now || G_MenuButton_Track_FocusY <= -1) return;
			//if(G_MenuButton_ControlFocus == Null) return;
			//log("G_MenuButton_Track_FocusY: " ^ G_MenuButton_Track_FocusY);
			
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonTrack"^G_MenuButton_Track_FocusY) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Track <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
			//declare CMlQuad  MenuButtons_Track   <=> (G_MenuButton_ControlFocus as CMlQuad);

			MenuButtons_Track.BgColor = <1., 1., 1.>;
			//UnlightFocusPlayer();
		}


		Void SetRankText(CMlLabel _Label, Integer _Rank, Boolean _IsSelect)
		{
			declare Text Color    = "$0000$fff";
			declare Text ColorInv = "$fff";
			if(_IsSelect)
			{
				Color    = "$fff0$000";
				ColorInv = "$000";
			}

			if(_Rank < 10)
			{
				_Label.SetText(Color ^ _Rank);
			}
			else
			{
				_Label.SetText(ColorInv ^ _Rank);
			}
		}

		Void Update_PlayersLabels()
		{
			declare CGameRealLeaderBoardInfo[] Page_PlayersList  for Page;
			declare netread Integer[]	NewDataList_Rank	     for UI;
			declare netread Text[]		NewDataList_Name	     for UI;
			declare netread	Text[]		NewDataList_Login		 for UI;
			declare netread Integer[]	NewDataList_Time	     for UI;
			declare netread Integer	    NewDataList_GroupCount   for UI;
			declare netread Text		NewDataList_Title	     for UI;
			declare netread Text		PlayerRankingText	     for UI;

			declare CMlLabel Label_PlayerZone <=> (Page.MainFrame.GetFirstChild("Label_PlayerZone")	as CMlLabel);
			declare CMlLabel Label_PlayerRank <=> (Page.MainFrame.GetFirstChild("Label_PlayerRank")	as CMlLabel);

			if(NewDataList_GroupCount <= 0)
			{
				UpdateZoneArrow();
			}

			Label_PlayerZone.SetText(NewDataList_Title);
			//if (NewDataList_Title != "") {
			//}
			Label_PlayerRank.SetText(PlayerRankingText);

			declare Integer LastRank = 0;
			for(I, 0, {{{Count_InstancesPlayerY-1}}})
			{
				declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^I) as CMlFrame);
				declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
				declare CMlLabel MenuButtons_Score <=> (ButtonsFrame.GetFirstChild("MenuButtons_Score")	as CMlLabel);
				declare CMlLabel MenuButtons_Rank  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
				declare CMlQuad  MenuButtons_Barre <=> (ButtonsFrame.GetFirstChild("MenuButtons_Barre")	as CMlQuad);
				declare CMlQuad  Quad_IsActivate   <=> (ButtonsFrame.GetFirstChild("Quad_IsActivate")	as CMlQuad);

				
				if(NewDataList_Name.existskey(I))
				{
					MenuButtons_Label.SetText(NewDataList_Name[I]);
					G_ActiveQuad[I] = True;
					//RANK
					MenuButtons_Rank.SetText("");
					declare Integer Rank = NewDataList_Rank[I];
					Quad_IsActivate.Show();
					SetRankText(MenuButtons_Rank, Rank, False);
					MenuButtons_Rank.Opacity = 1.0;
					//SCORE/TIME

					declare Text TimeText = WorldRecord_TextLib::TimeToText(NewDataList_Time[I], True);
					TimeText ^= WorldRecord_TextLib::SubText(NewDataList_Time[I]  ^"", (WorldRecord_TextLib::Length(NewDataList_Time[I]^"")-1), 1);
					MenuButtons_Score.SetText(TimeText);
					LastRank = Rank;
					
					declare Text PlayerLogin;
					if(NewDataList_Login.existskey(I))
					{
						PlayerLogin = NewDataList_Login[I];
					}
					else
					{
						PlayerLogin = "";
					}

					if(G_PlayersFocus_Login.exists(PlayerLogin))
					{
						Quad_IsActivate.ChangeImageUrl({{{dump(C_IMG_Checkbox_Closed)}}});
						Quad_IsActivate.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Closed_Over)}}};
					}
					else
					{
						Quad_IsActivate.ChangeImageUrl({{{dump(C_IMG_Checkbox_Open)}}});
						Quad_IsActivate.ImageUrlFocus = {{{dump(C_IMG_Checkbox_Open_Over)}}};
					}
				}
				else
				{
					LastRank += 1;
					SetRankText(MenuButtons_Rank, LastRank, False);
					MenuButtons_Barre.Hide();
					G_ActiveQuad[I] = False;
					MenuButtons_Label.SetText("");
					Quad_IsActivate.Hide();
					MenuButtons_Score.SetText("");
					MenuButtons_Rank.Opacity = 0.5;
				}
				
				/*
				if(NewDataList_Time.existskey(I))
				{

				}


				if(Page_PlayersList.existskey(I))
				{
					MenuButtons_Barre.Show();
					G_ActiveQuad[I] = True;
					MenuButtons_Label.SetText(Page_PlayersList[I].DisplayName);
					MenuButtons_Rank.Opacity = 1.0;
					//declare Integer Rank = ;
					SetRankText(MenuButtons_Rank, Page_PlayersList[I].Rank, False);
					
					LastRank = I+1;
					MenuButtons_Rank.SetText("");
					MenuButtons_Score.SetText(""^Page_PlayersList[I].Score);
				}
				else
				{
					SetRankText(MenuButtons_Rank, LastRank, False);
					MenuButtons_Barre.Hide();
					G_ActiveQuad[I] = False;
					MenuButtons_Label.SetText("");
					MenuButtons_Score.SetText("");
					MenuButtons_Rank.Opacity = 0.5;
					LastRank += 1;
				}
				*/
			}
			//G_Max_Players = Page_PlayersList.count;
			G_Max_Players = NewDataList_Name.count;
			if(G_MenuButton_Player_FocusY >= G_Max_Players)
			{
				UnlightFocusPlayer();
				G_MenuButton_Player_FocusY = 0;
			}



			//ButtonGo
			declare CMlFrame Frame_GoButton <=> (Page.GetFirstChild("Frame_GoButton") as CMlFrame);
			declare CMlFrame Frame_SelectorGo <=> (Frame_GoButton.GetFirstChild("Frame_SelectorGo") as CMlFrame);
			declare CMlLabel Label_ButtonGo   <=> (Frame_GoButton.GetFirstChild("Label_ButtonGo")	as CMlLabel);
			declare CMlQuad  Quad_ButtonGo    <=> (Frame_GoButton.GetFirstChild("Quad_ButtonGo")	as CMlQuad);
			declare CMlQuad  Button_Action1    <=> (Frame_GoButton.GetFirstChild("Button_Action1")	as CMlQuad);
			declare Real QuadOpacityTarget;
			if(G_PlayersFocus_Login.count <= 0)
			{
				QuadOpacityTarget = 0.2;
				Label_ButtonGo.Opacity = 0.6;
				Button_Action1.Opacity = 0.;
				Quad_ButtonGo.Hide();
			}
			else
			{
				QuadOpacityTarget = 0.4;
				Label_ButtonGo.Opacity = 1.0;
				Button_Action1.Opacity = 1.0;
				Quad_ButtonGo.Show();

			}

			foreach(QuadControl in Frame_SelectorGo.Controls)
			{
				declare CMlQuad  Quad  <=> (QuadControl	as CMlQuad);
				Quad.Opacity = QuadOpacityTarget;
			}
		}

		Void FocusButton(Text _Id)
		{
			declare Text LabelFocus;
			if(_Id == "Quad_Back")      LabelFocus = "Label_Back";
			else if(_Id == "Quad_Home") LabelFocus = "Label_Home";
			declare CMlLabel Label_Focus <=> (Page.MainFrame.GetFirstChild(LabelFocus)	as CMlLabel);
			Label_Focus.TextColor = <1., 1., 1.>;
			Label_Focus.Scale = 1.05;
		}

		Void UnFocusButton(Text _Id)
		{
			declare Text LabelFocus;
			if(_Id == "Quad_Back")      LabelFocus = "Label_Back";
			else if(_Id == "Quad_Home") LabelFocus = "Label_Home";
			declare CMlLabel Label_Focus <=> (Page.MainFrame.GetFirstChild(LabelFocus)	as CMlLabel);
			Label_Focus.TextColor = <0.95, 0.95, 0.95>;
			Label_Focus.Scale = 1.0;
		}

		Void SelectPlayer(Integer _QuadId)
		{
			if(_QuadId == -1) return;
			declare CGameRealLeaderBoardInfo[] Page_PlayersList          for Page;
			declare netread Integer[]	NewDataList_Rank	for UI;
			declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonPlayer"^_QuadId) as CMlFrame);
			declare CMlFrame Frame_Button       <=> (ButtonsFrame.GetFirstChild("Frame_Button")	as CMlFrame);
			declare CMlQuad  MenuButtons_Color  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Color")	as CMlQuad);
			declare CMlFrame  Frame_Select      <=> (ButtonsFrame.GetFirstChild("Frame_Select")	as CMlFrame);
			declare CMlLabel MenuButtons_Score  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Score")	as CMlLabel);
			declare CMlLabel MenuButtons_Rank   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
			MenuButtons_Color.BgColor = <1.,1.,1.>;
			MenuButtons_Score.TextColor = <0.,0.,0.>;
			SetRankText(MenuButtons_Rank, NewDataList_Rank[_QuadId], False);
			//SetRankText(MenuButtons_Rank, Page_PlayersList[_QuadId].Rank, True);
			
			MenuButtons_Color.Opacity = 1.;
			G_MenuButton_Player_SelectY = _QuadId;
			UnlightFocusPlayer();
			G_MenuButton_Player_FocusY = -1;
			Frame_Select.Show();
		}

		Void UnSelectPlayer()
		{
			if(G_MenuButton_Player_SelectY == -1) return;
			declare CGameRealLeaderBoardInfo[] Page_PlayersList          for Page;
			declare netread Integer[]	NewDataList_Rank	for UI;
			declare CMlFrame ButtonsFrame       <=> (Page.GetFirstChild("Frame_ButtonPlayer"^G_MenuButton_Player_SelectY) as CMlFrame);
			declare CMlFrame Frame_Button       <=> (ButtonsFrame.GetFirstChild("Frame_Button")	as CMlFrame);
			declare CMlQuad  MenuButtons_Color  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Color")	as CMlQuad);
			declare CMlFrame  Frame_Select      <=> (ButtonsFrame.GetFirstChild("Frame_Select")	as CMlFrame);
			declare CMlLabel MenuButtons_Score  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Score")	as CMlLabel);
			declare CMlLabel MenuButtons_Rank   <=> (ButtonsFrame.GetFirstChild("MenuButtons_Rank")	as CMlLabel);
			MenuButtons_Color.Opacity   = 0.;
			MenuButtons_Score.TextColor = <1.,1.,1.>;
			SetRankText(MenuButtons_Rank, NewDataList_Rank[G_MenuButton_Player_SelectY], False);
			G_MenuButton_Player_SelectY = -1;
			Frame_Select.Hide();
			LibManialink_SetTargetPosition(Frame_Button, <0., 0.>);
			LibManialink_PresetAnim(Frame_Button, 200, "EaseOutCubic");

		}

		Void FocusPlayerByX(Integer _PosX)
		{
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonPlayer"^_PosX) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Player  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Player")	as CMlQuad);
			G_MenuButton_ControlFocus = MenuButtons_Player;
		}

		Void FocusTrackByX(Integer _PosX)
		{
			declare CMlFrame ButtonsFrame      <=> (Page.GetFirstChild("Frame_ButtonTrack"^_PosX) as CMlFrame);
			declare CMlLabel MenuButtons_Label <=> (ButtonsFrame.GetFirstChild("MenuButtons_Label")	as CMlLabel);
			declare CMlQuad  MenuButtons_Track  <=> (ButtonsFrame.GetFirstChild("MenuButtons_Track")	as CMlQuad);
			G_MenuButton_ControlFocus = MenuButtons_Track;
		}

		Void SwitchPlayersSelection(Integer _QuadId)
		{
			declare netread	Text[]	NewDataList_Login		for UI;
			declare netread	Text[]	NewDataList_Replay		for UI;
			declare netread	Text[]	NewDataList_FileName	for UI;
			//declare Text PlayerLogin = NewDataList_Login[_QuadId];
			declare Text PlayerLogin;
			if(NewDataList_Login.existskey(_QuadId))
			{
				PlayerLogin = NewDataList_Login[_QuadId];
			}
			else return;
					
			if(G_PlayersFocus_Login.count >= 10) return;
			
			if(G_PlayersFocus_Login.exists(PlayerLogin))
			{
				G_PlayersFocus_Login.remove(NewDataList_Login[_QuadId]);
				G_PlayersFocus_Replay.remove(NewDataList_Replay[_QuadId]);
				G_PlayersFocus_FileName.remove(NewDataList_FileName[_QuadId]);
			}
			else
			{
				G_PlayersFocus_Login.add(NewDataList_Login[_QuadId]);
				G_PlayersFocus_Replay.add(NewDataList_Replay[_QuadId]);
				G_PlayersFocus_FileName.add(NewDataList_FileName[_QuadId]);
			}
			Update_PlayersLabels();

		}

		//aaaa
		Void PressSelect(Integer _QuadId)
		{
			declare netwrite Text[]  Net_WorldRecordChoices 			for UI;
			declare netwrite Text[]  Net_WorldRecordChoices_Replay 		for UI;
			declare netwrite Text[]  Net_WorldRecordChoices_FileName 	for UI;
			declare netread	Text[]	NewDataList_Login		for UI;
			declare netread	Text[]	NewDataList_Replay		for UI;
			declare netread	Text[]	NewDataList_FileName	for UI;
			if(G_PlayersFocus_Login.count <= 0)
			{
				return;
				//Net_WorldRecordChoices.add(NewDataList_Login[_QuadId]);
				//Net_WorldRecordChoices_Replay.add(NewDataList_Replay[_QuadId]);
				//Net_WorldRecordChoices_FileName.add(NewDataList_FileName[_QuadId]);
			}
			else
			{
				declare Text[]  RecordChoices;
				declare Text[]  RecordChoices_Replay;
				declare Text[]  RecordChoices_FileName;
				for(I, 0, G_PlayersFocus_Login.count-1)
				{
					RecordChoices.add(G_PlayersFocus_Login[I]);
					RecordChoices_Replay.add(G_PlayersFocus_Replay[I]);
					RecordChoices_FileName.add(G_PlayersFocus_FileName[I]);
				}
				Net_WorldRecordChoices          = RecordChoices;
				Net_WorldRecordChoices_Replay   = RecordChoices_Replay;
				Net_WorldRecordChoices_FileName = RecordChoices_FileName;
			}
		}

		Void PressSelect()
		{
			PressSelect(0);
		}


		Void ZoneNext()
		{
			declare netread Integer	    NewDataList_GroupCount   for UI;
			if(G_ZonePlayerFocus >= G_ZonePlayerMax-1 + NewDataList_GroupCount +0) return;
			declare	netwrite Integer	UpdateSendWorldRecordInfos	for UI;
			declare	netwrite Integer	SendWorldRecord_ZoneFocus	for UI;

			G_ZonePlayerFocus += 1;
			UpdateSendWorldRecordInfos += 1;
			SendWorldRecord_ZoneFocus  = G_ZonePlayerFocus;

			UpdateZoneArrow();
		}
		
		Void ZonePrevious()
		{
			if(G_ZonePlayerFocus <= 0) return;
			declare	netwrite Integer	UpdateSendWorldRecordInfos	for UI;
			declare	netwrite Integer	SendWorldRecord_ZoneFocus	for UI;
			
			G_ZonePlayerFocus -= 1;
			UpdateSendWorldRecordInfos += 1;
			SendWorldRecord_ZoneFocus  = G_ZonePlayerFocus;

			UpdateZoneArrow();
		}

		Void CancelPlayerSelect(Integer _PlayerFocus)
		{
			G_MenuButton_Player_FocusY = _PlayerFocus;
			UnSelectPlayer();
			//UpdateFrame_PlayerTracks();
			G_MenuButton_Player_SelectY = -1;
			FocusPlayerByX(G_MenuButton_Player_FocusY);
			LightFocusPlayer();
		}

		main() {
			
			Init();
			declare	netread Integer	UpdateListData	for UI;
			declare	Integer Prev_UpdateListData;
			declare Boolean Prev_Visibility;

			while(True) {
				
				yield;
				{{{LibButton_Img::IncludeInWhile(["Button_Action1", "Button_Cancel"])}}}
				//if(! PageIsVisible) continue;
				if(Prev_Visibility != PageIsVisible) {
					if(PageIsVisible) ShowPage();
					else ClearChoose();
					Prev_Visibility = PageIsVisible;
				}
				LibManialink_AnimLoop();
				

				if(UpdateListData != Prev_UpdateListData)
				{
					//ClearChoose();
					EnableMenuNavigation(True,False,Null,2);
					declare	netread Text[Text][]	NewDataList	for UI;
					Update_PlayersLabels();
					Prev_UpdateListData = UpdateListData;
				}

				//if(G_TimeNextZone < Now && G_TimeNextZone != -1) NextZone();

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Action1 : {

									PressSelect(G_MenuButton_Player_FocusY);
									//Permet de switch sur la page du record center
									//declare netwrite Integer Net_WorldRecordChoice 		for UI;
									//Net_WorldRecordChoice = -2;
								}
								case CMlEvent::EMenuNavAction::Cancel : {

									declare netwrite Text[]  Net_WorldRecordChoices 			for UI;
									declare netwrite Integer Net_WorldRecordChoice 		for UI;
									Net_WorldRecordChoice = -3;
									Net_WorldRecordChoices.add("");
									/*
									if(G_MenuButton_Player_SelectY != -1)
									{
										CancelPlayerSelect(G_MenuButton_Player_SelectY);
									}
									else
									{
										SendCustomEvent("GotoPrevious", Text[]);
									}
									*/
								}
								case CMlEvent::EMenuNavAction::Down : {
									if(G_MenuButton_Player_SelectY == -1 || G_MenuButton_Player_FocusY != -1)
									{
										if(G_MenuButton_Player_FocusY < G_Max_Players-1)
										{
											UnlightFocusPlayer();
											G_MenuButton_Player_FocusY += 1;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
										else if(G_MenuButton_Player_FocusY == -1)
										{
											G_MenuButton_Player_FocusY = 0;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
									}
								}
								case CMlEvent::EMenuNavAction::Right : {
									if(G_MenuButton_Player_SelectY == -1)
									{
										ZonePrevious();
									}
								}
								case CMlEvent::EMenuNavAction::Left : {
									if(G_MenuButton_Player_SelectY == -1)
									{
										ZoneNext();
									}
								}
								case CMlEvent::EMenuNavAction::Up : {
									if(G_MenuButton_Player_SelectY == -1 || G_MenuButton_Player_FocusY != -1)
									{
										if(G_MenuButton_Player_FocusY > 0)
										{
											UnlightFocusPlayer();
											G_MenuButton_Player_FocusY -= 1;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
										else
										{
											G_MenuButton_Player_FocusY = 0;
											FocusPlayerByX(G_MenuButton_Player_FocusY);
											LightFocusPlayer();
										}
									}
								}
								case CMlEvent::EMenuNavAction::Select : {
									SwitchPlayersSelection(G_MenuButton_Player_FocusY);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "ButtonRecordCenterStart")
							{
								SendCustomEvent("RecordCenterStart", Text[]);
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Hide();
							}
							else if (Event.ControlId == "Quad_Section")
							{
								//SendCustomEvent("Solo_RankingPage_Exit", Text[]);
							}
							else if (Event.ControlId == "MenuButtons_Player")
							{
								declare Integer QuadId for Event.Control;
								SwitchPlayersSelection(QuadId);
								
								/*
								declare Integer QuadId for Event.Control;
								if(!G_ActiveQuad.existskey(QuadId) || !G_ActiveQuad[QuadId]) continue;
								G_MenuButton_Player_FocusY = QuadId;
								PressSelect(QuadId);
								*/
							}
							else if (Event.ControlId == "MenuButtons_Track")
							{
								//declare Integer QuadId for Event.Control;
								//PressSelect(QuadId);
							}
							else if (Event.ControlId == "Quad_IsActivate")
							{
								declare Integer QuadId for Event.Control;
								SwitchPlayersSelection(QuadId);

							}
							else if (Event.ControlId == "MenuButtons_ZonePrev")
							{
								if(G_MenuButton_Player_SelectY != -1) CancelPlayerSelect(0);
								ZonePrevious();
							}
							else if (Event.ControlId == "MenuButtons_ZoneNext")
							{
								if(G_MenuButton_Player_SelectY != -1) CancelPlayerSelect(0);
								ZoneNext();
							}
							else if (Event.ControlId == "Quad_Back")
							{
								declare netwrite Text[]  Net_WorldRecordChoices 	for UI;
								declare netwrite Integer Net_WorldRecordChoice 		for UI;
								Net_WorldRecordChoice = -3;
								Net_WorldRecordChoices.add("");
							}
							else if (Event.ControlId == "Quad_ButtonGo")
							{
								PressSelect();
							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "Quad_Section")
							{
								//Event.Control.RelativeScale = 1.1;
							}
							else if (Event.ControlId == "MenuButtons_Player" || Event.ControlId == "Quad_IsActivate")
							{
								declare netread	Text[]	NewDataList_Login		for UI;
								declare Integer QuadId for Event.Control;

								if(!G_ActiveQuad.existskey(QuadId) || !G_ActiveQuad[QuadId]) continue;
								UnlightFocusPlayer();
								G_MenuButton_Player_FocusY = QuadId;
								G_MenuButton_ControlFocus = Event.Control;
								LightFocusPlayer();
							}
							else if (Event.ControlId == "MenuButtons_Track")
							{
								declare Integer QuadId for Event.Control;
								UnlightFocusTrack();
								G_MenuButton_Track_FocusY = QuadId;
								LightFocusTrack();
							}
							else if (Event.ControlId == "MenuButtons_ZonePrev")
							{
								declare CMlQuad   MenuButtons_ZonePrev <=> (Page.MainFrame.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
								MenuButtons_ZonePrev.Colorize = <1.0, 1.0, 1.0>;
							}
							else if (Event.ControlId == "MenuButtons_ZoneNext")
							{
								declare CMlQuad   MenuButtons_ZoneNext <=> (Page.MainFrame.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
								MenuButtons_ZoneNext.Colorize = <1.0, 1.0, 1.0>;
							}
							else if (Event.ControlId == "ButtonRecordCenterStart")
							{
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Show();
							}
							else if (Event.ControlId == "Quad_Back")
							{
								FocusButton(Event.ControlId);
							}
							else if (Event.ControlId == "Quad_ButtonGo")
							{
								declare CMlQuad  Quad_ButtonGo  <=> (Page.MainFrame.GetFirstChild(Event.ControlId)	as CMlQuad);
								Quad_ButtonGo.Opacity= 0.4;
							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "Quad_Section")
							{
								Event.Control.RelativeScale = 1.;
							}
							else if (Event.ControlId == "MenuButtons_Player")
							{
								UnlightFocusPlayer();
								G_MenuButton_ControlFocus = Null;
								G_MenuButton_Player_FocusY = -1;
							}
							else if (Event.ControlId == "MenuButtons_Track")
							{
								UnlightFocusTrack();
								G_MenuButton_Track_FocusY = -1;
							}
							else if (Event.ControlId == "MenuButtons_ZonePrev")
							{
								declare CMlQuad   MenuButtons_ZonePrev <=> (Page.MainFrame.GetFirstChild("MenuButtons_ZonePrev")	as CMlQuad);
								MenuButtons_ZonePrev.Colorize = <0.90, 0.90, 0.90>;
							}
							else if (Event.ControlId == "MenuButtons_ZoneNext")
							{
								declare CMlQuad   MenuButtons_ZoneNext <=> (Page.MainFrame.GetFirstChild("MenuButtons_ZoneNext")	as CMlQuad);
								MenuButtons_ZoneNext.Colorize = <0.90, 0.90, 0.90>;
							}
							else if (Event.ControlId == "ButtonRecordCenterStart")
							{
								declare CMlQuad  Quad_Over  <=> (Page.MainFrame.GetFirstChild(Event.ControlId^"Over")	as CMlQuad);
								Quad_Over.Hide();
							}
							else if (Event.ControlId == "Quad_Back")
							{
								UnFocusButton(Event.ControlId);
							}
							else if (Event.ControlId == "Quad_ButtonGo")
							{
								declare CMlQuad  Quad_ButtonGo  <=> (Page.MainFrame.GetFirstChild(Event.ControlId)	as CMlQuad);
								Quad_ButtonGo.Opacity= 0.2;
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "Back" : {
									SendCustomEvent("GotoPrevious", [""]);
								}
								case "Update_PlayersLabels" : {
									Update_PlayersLabels();
								}
								case "Show" : {
									EnableMenuNavigation(True,False,Null,2);
									SendCustomEvent("UpdateBarreSection", ["SoloMain"]);
									ShowPage();
									{{{LibButton_Img::IncludeInShow()}}}
									SendCustomEvent("Barre_Cancel", Text[]);
								}
								case "Hide" : {
									UnSelectPlayer();
									EnableMenuNavigation(False,False,Null,0);
									SendCustomEvent("DetachPage", ["RankingPage"]);
								}
								case "SetPosition" : {
									declare CMlFrame  Frame_All    <=> (Page.GetFirstChild("Frame_All") as CMlFrame);
									//declare Text[] RankingModuleName for Page;
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	return MLText;
}