#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"								as Manialink
#Include "Libs/Trackmania/Ingame/Medals.Script.txt"									as Medals
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt" 					            		as Colors
#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_SoloMapInfosBase.Script.txt"		as Inject_SoloMapInfosBase
#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_QuadsSelector.Script.txt"			as Inject_QuadsSelector
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 								as Font

#Const TMC_MEDAL_AUTHOR					0
#Const TMC_MEDAL_GOLD					1
#Const TMC_MEDAL_SILVER					2
#Const TMC_MEDAL_BRONZE					3
#Const TMC_MEDAL_PLAYER					4
#Const TMC_MEDAL_NONE					5
#Const TMC_MEDAL_ANOTHERPLAYER			6

#Const IMGPATH								"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/"

#Const C_PosXFirstQuad         -53.9
#Const C_PosYFirstQuad         1.8
#Const C_SizeXQuad             107.8
#Const C_SizeYQuad             11.3
#Const C_MarginY_Button        0.4
#Const C_MarginX_Button        4.0

Text Build() {
	declare Integer Count_InstancesY         = 3;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = -34.3;
	declare Real	PosYFirstQuad            = 14.0;

	declare Real	SizeXQuad                = 98.5;
	declare Real	SizeYQuad                = 10.2;
	declare Real	MarginY_Button           = 0.4;
	declare Real	MarginX_Button           = 4.0;
 

	declare Text MedalIcon     = IMGPATH ^ "MedalButton2.dds";
	declare Text IMG_BGTest    = IMGPATH ^ "ToDel/Mockup UI HotSeat A.jpg";
	declare Text IMG_RankGauge = IMGPATH ^ "Modes/HotSeat_RankGauge.dds";

	declare MainFont 				= Font::GetFontName("Main");

	declare Real SizeButtonX = 39.;
	declare Real SizeButtonY = 9.;
	declare Real WidthButton = 0.4;

 	// style="Bgs1" substyle="BgDialogBlur"
	declare Text MLText = """
<manialink version="3" name="L_UIMedalSelection">

	<framemodel id="Frame_Button">
		<quad id="Quad_ButtonMouse"    halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" pos="0 1" opacity="0.0" bgcolor="000" scriptevents="1" />
		<quad id="Quad_ButtonImg"      halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="1" pos="0 0" opacity="0.2" bgcolor="000"/>
		<quad id="Quad_Bg1"            halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="0" pos="0 0" opacity="0.1" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
		<label id="Label_Button"       halign="left"   valign="center" z-index="2" pos="-45.0 0.6" textsize="3.6" textcolor="fff" opacity="1." size="{{{SizeXQuad-4.}}}" textprefix="$t"/>
		<quad id="Quad_OpponentImg"   halign="right" valign="center"  size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="2" pos="{{{SizeXQuad/2.}}} 0" keepratio="Fit"/>
	</framemodel>

	<framemodel id="Frame_Line">
		<quad id="Quad_Line0" halign="center" valign="top"    size="{{{SizeXQuad}}} 0.2" z-index="0" pos="-20.0 0.0"  opacity="0.5" bgcolor="fff" />
		<quad id="Quad_Line1" halign="right"  valign="bottom" size="6.7 0.6" z-index="0" pos="{{{SizeXQuad/2.-20.}}} 0."  opacity="0.5" bgcolor="fff" />
	</framemodel>

	<framemodel id="Frame_ButtonInput">
		<quad halign="right" valign="top" size="{{{SizeButtonX}}} {{{SizeButtonY-0.2}}}"     z-index="-1" pos="0.0 0.0" id="Quad_Valide" scriptevents="1"           opacity="0.0" bgcolor="fff" />
		<quad halign="right" valign="bottom" size="{{{SizeButtonX}}} {{{WidthButton}}}"  z-index="0" pos="0.0 0.0"                                               opacity="0.5" bgcolor="fff" />
		<quad halign="left"  valign="top"    size="{{{WidthButton}}} {{{SizeButtonY}}} " z-index="0" pos="0.0 {{{WidthButton}}}"                                 opacity="0.5" bgcolor="fff" />
		<quad halign="left"  valign="top"    size="{{{SizeButtonX}}} {{{WidthButton}}}"  z-index="0" pos="{{{-SizeButtonX}}} {{{-SizeButtonY+WidthButton*2.}}}"  opacity="0.5" bgcolor="fff" />
		<quad halign="right" valign="bottom" size="{{{WidthButton}}} {{{SizeButtonY}}} " z-index="0" pos="{{{-SizeButtonX}}} {{{-SizeButtonY+WidthButton}}}"     opacity="0.5" bgcolor="fff" />
	</framemodel>

	<frame id="Frame_All" z-index="-20">
		<quad z-index="-4" pos="0. 0." size="320 180" valign="center" halign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0." bluramount="0."/>
		<quad halign="center" valign="center" pos="-82.9 44"   size="1 16" z-index="2" opacity="1." bgcolor="fff" id="Frame_Foot"/>
		<label id="Label_Title"  z-index="2" pos="-78.7 48.4" size="102" valign="center" halign="left" textsize="11.5" textprefix="$t" text="HotSeat"  textcolor="fff" textfont="{{{MainFont}}}"/>
		<label id="Label_Title2" z-index="2" pos="-78.1 39.4" size="102" valign="center" halign="left" textsize="6"  textprefix="$t" text=""         textcolor="fff" textfont="{{{MainFont}}}"/>
		
		<frameinstance modelid="Frame_Line" z-index="3." pos="-14.2 33.7" id="Frame_LineUp"/>
		<frameinstance modelid="Frame_Line" z-index="3." pos="-14.2 -15.5"/>
		
		<frame id="Frame_Footer"  z-index="1" hidden="0" pos="{{{PosXFirstQuad}}} -23.4">
			<quad id="Quad_ButtonImg" halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad+1.6}}}" z-index="1" pos="0 0" opacity="0.2" bgcolor="000"/>
			<quad id="Quad_Bg1"       halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad+1.6}}}" z-index="0" pos="0 0" opacity="0.1" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
			<frame id="Frame_ChangeName" hidden="1">
				<label id="Label_Button"  halign="left"   valign="center" z-index="2" pos="-45.0 0.0" textsize="1.8" textprefix="$t" textcolor="fff" text="{{{_("Change Name")}}}" size="{{{SizeXQuad-4.}}}"/>
				<frameinstance modelid="Frame_ButtonInput" z-index="3." pos="-8. 4.0" />
			</frame>
			<label id="Label_Continue"  halign="left"   valign="center" z-index="2" pos="10.0 0.0" textsize="1.8" textprefix="$t" textcolor="fff" text="{{{_("Continue")}}}" size="{{{SizeXQuad-4.}}}"/>
			<frameinstance modelid="Frame_ButtonInput" z-index="3." pos="47. 4.0" />
		</frame>
		
		<quad halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="2" pos="{{{PosXFirstQuad}}} 27." opacity="0." image="{{{IMG_RankGauge}}}"/>
		<quad halign="center" valign="center" size="{{{SizeXQuad}}} {{{SizeYQuad}}}" z-index="0" pos="{{{PosXFirstQuad}}} 27." opacity="0.6" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
		<quad 	id="Quad_TimeLeft"  		pos="-81.7 23.8" z-index="3." 	size="{{{SizeXQuad/1.045}}} 0.5" 	valign="center" halign="left"  bgcolor="fff" opacity="1."/>
		<quad 	id="Quad_TimeLeftBG"  		pos="-81.7 23.8" z-index="2." 	size="{{{SizeXQuad/1.045}}} 0.5" 	valign="center" halign="left"  bgcolor="333" opacity="1.0"/>
		<label 	id="Label_PlayerName"  		pos="-79.7 27.5" z-index="5." 	size="{{{SizeXQuad/1.045}}}" 	valign="center" halign="left" opacity="1." textsize="3.0" text="Voyage"/>
		
		<frame id="Frame_Menu"  z-index="10" hidden="0">
			<frame pos="0 0.0">
			""";
	for(I, 0, Count_InstancesY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = PosYFirstQuad + IndexY*-SizeYQuad - IndexY*MarginY_Button*1.;
		for(J, 0, Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = PosXFirstQuad + IndexX*SizeXQuad + IndexX*MarginX_Button*1.;
			MLText^="""
				<frameinstance modelid="Frame_Button" z-index="5." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_Button{{{I}}}"/>
				""";
		}
	}
	MLText^="""
			</frame>
		</frame>
	</frame>
	

	
	<script><!--
		#Const DebugName  "L_MedalSelection"

		{{{Manialink::GetIncludes()}}}
		
		{{{Manialink::Load()}}}
		
		//declare Integer G_ButtonFocus;
		

		Void ClearChoose()
		{
			declare netwrite Text Net_Layer_TMC_MenuStatus_ButtonPressed 	for UI;
			Net_Layer_TMC_MenuStatus_ButtonPressed = "";
		}

		Void PressSelect(Text _MenuNavAction)
		{
			
			//declare netread Text[] Net_MenuStatusInputs    for UI;
			//declare netwrite Boolean Net_GameIsInit for UI;
			
			declare netwrite Text Net_Layer_TMC_MenuStatus_ButtonPressed 	for UI;
			declare netwrite Integer Net_Layer_TMC_MenuStatus_PopupUpdate 	for UI;
			Net_Layer_TMC_MenuStatus_ButtonPressed = _MenuNavAction;
			Net_Layer_TMC_MenuStatus_PopupUpdate += 1;
			//log("_MenuNavAction : " ^ _MenuNavAction);

			if(_MenuNavAction == "::EMenuNavAction::Select")
			{
				declare Integer 	Net_ShowIngameUI 			for Teams[0];
				Net_ShowIngameUI += 1;
			}

			EnableMenuNavigation(False, False, Null, 0);
		}

		Void Init()
		{
			declare netread Text Net_MenuStatusTitle     for UI;
			declare netread Text Net_MenuStatusSubtitle  for UI;
			declare netread Text Net_MenuStatusColorText for UI;
			declare netread Vec3 Net_MenuStatusColor     for UI;
			declare netread Text Net_MenuStatusMessage1  for UI;
			declare netread Text Net_MenuStatusMessage2  for UI;
			//log("Net_MenuStatusTitle    : " ^ Net_MenuStatusTitle);
			//log("Net_MenuStatusSubtitle : " ^ Net_MenuStatusSubtitle);
			//log("Net_MenuStatusColorText: " ^ Net_MenuStatusColorText);
			//log("Net_MenuStatusColor    : " ^ Net_MenuStatusColor);
			//log("Net_MenuStatusMessage1 : " ^ Net_MenuStatusMessage1);
			//log("Net_MenuStatusMessage2 : " ^ Net_MenuStatusMessage2);

			ClearChoose();
			declare Text[] LabelMedals = ["MenuStatus"];
			declare Text[] LabelMedalsTime = ["",
										  	  "",
										  	  "",
										  	  "",
										  	  ""];
			declare Text[] QuadMedalImg     = ["",
										  	  "",
										  	  "",
										  	  "",
										  	  ""];
			//declare Vec3[Integer] QuadMedalImgColo = [];
			//SetButtons(LabelMedals, LabelMedalsTime);

			
			declare CMlFrame Frame_Button0 <=> (Page.MainFrame.GetFirstChild("Frame_Button0") as CMlFrame);
			declare CMlLabel  Label_Button0 <=> (Frame_Button0.GetFirstChild("Label_Button")   as CMlLabel);
			declare CMlFrame Frame_Button1 <=> (Page.MainFrame.GetFirstChild("Frame_Button1") as CMlFrame);
			declare CMlLabel  Label_Button1 <=> (Frame_Button1.GetFirstChild("Label_Button")   as CMlLabel);
			Label_Button0.Value = "{{{_("It is your turn to play")}}}";
			//Label_Button1.Value = Net_MenuStatusMessage2;

			declare CMlFrame Frame_LineUp <=> (Page.MainFrame.GetFirstChild("Frame_LineUp")       as CMlFrame);
			declare CMlQuad Quad_Line0    <=> (Frame_LineUp.GetFirstChild("Quad_Line0")	          as CMlQuad);
			declare CMlQuad Quad_Line1    <=> (Frame_LineUp.GetFirstChild("Quad_Line1")	          as CMlQuad);
			Quad_Line0.BgColor= <0.4,0.7,1.>;
			Quad_Line1.BgColor= <0.4,0.7,1.>;
			Quad_Line1.Size.X = 22.;
		}

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,2);
			ClearChoose();
			declare netread 	Integer[Integer] 		Net_EnergyLeftPlayers 	for UI;
			declare netread 	Integer			 		Net_CurPlayerIndex 		for UI;
			declare netwrite 	Integer			 		Net_EnergyMax 			for UI;
			declare netread 	Vec3[Integer]			Net_IndexToColor 		for UI;
			declare netread 	Text[Integer]			Net_IndexToName 			for UI;
			declare Integer EnergyLeft = Net_EnergyLeftPlayers[Net_CurPlayerIndex];
			declare Real    EnergyPourc = (EnergyLeft*1.)/(Net_EnergyMax*1.);
			declare CMlQuad Quad_TimeLeft     <=> (Page.MainFrame.GetFirstChild("Quad_TimeLeft")	          as CMlQuad);
			declare CMlLabel Label_PlayerName <=> (Page.MainFrame.GetFirstChild("Label_PlayerName")	          as CMlLabel);
			Quad_TimeLeft.Size.X = {{{SizeXQuad/1.045}}}*EnergyPourc;
			//Quad_TimeLeft.BgColor = Net_IndexToColor[Net_CurPlayerIndex];
			Label_PlayerName.Value = Net_IndexToName[Net_CurPlayerIndex];
			//log("Net_IndexToColor["^Net_CurPlayerIndex^"]");
		}


		main() {
			Init();

			declare Boolean Prev_Visibility;

			while(True) {
				
				yield;
				if(Prev_Visibility != PageIsVisible) {
					if(PageIsVisible) ShowPage();
					Prev_Visibility = PageIsVisible;
				}
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
				

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Select : {
									PressSelect(""^Event.MenuNavAction);
								}
								case CMlEvent::EMenuNavAction::Action1 : {
									//PressSelect(""^Event.MenuNavAction);
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							if(Event.ControlId == "Quad_Valide") {
								PressSelect("::EMenuNavAction::Select");
							}
						}
						case CMlEvent::Type::MouseOver: {
							if(Event.ControlId == "Quad_Valide") {
								declare CMlQuad Quad_Valide <=> (Event.Control as CMlQuad);
								Quad_Valide.Opacity = 0.3;
							}

						}
						case CMlEvent::Type::MouseOut: {
							if(Event.ControlId == "Quad_Valide") {
								declare CMlQuad Quad_Valide <=> (Event.Control as CMlQuad);
								Quad_Valide.Opacity = 0.0;
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.PluginCustomEventType) {
								case "Show" : {
									ShowPage();
								}
								
								case "Hide" : {
									//EnableMenuNavigation(True,False,Null,0);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}