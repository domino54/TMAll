#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt" 					as Colors
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 								as Font

#Const C_ImgBase	      "file://Media/MEDIABROWSER_HiddenResources/Common/Images/"
#Const C_ImgAchievements  "file://Media/MEDIABROWSER_HiddenResources/Common/Images/Menus/Achievements/"
#Const C_Count_InstancesY 3

declare Real G_SizeXQuad;
declare Real G_SizeYQuad;

Text InjectInManialink()
{
	
	G_SizeXQuad    = 107.8;
	G_SizeYQuad    = 39.;
	declare Text LogoMultiLap = C_ImgBase ^ "Menu/Buttons/PictoMultilap.dds";
	declare Text IMG_MedalBG  = C_ImgBase ^ "Ingame/MedalEmpty.dds";
	declare Text IMG_Medal    = C_ImgAchievements ^ "Medal.dds";
	
	declare  Boolean HideSoloInfo for Users[0];
	declare  Text	 HideSoloInfoInsert;
	if(HideSoloInfo) HideSoloInfoInsert = """ hidden="1" """;

	declare Text	MainFont   = Font::GetFontName("Main");
	declare Text	ChronoFont = Font::GetFontName("Chrono");

	declare Text MLText = """
	<framemodel id="Frame_Time">
		<label id="Label_PlayerBestTime"  pos="-36.9 -8.5" size="38.5" valign="center" halign="left" textsize="2.5" text="" textcolor="fff" textfont="{{{MainFont}}}"/>
		<label id="Label_PlayerBestTime2" pos="17.3 -8.2" size="50." valign="center" halign="right" textsize="3." text="" textcolor="fff" textfont="{{{ChronoFont}}}"/>
		<quad  id="Quad_PlayerMedal"      size="3.5 3.5" pos="-38. -9.2"  halign="right"  valign="center" image="{{{IMG_Medal}}}" opacity="0.9" keepratio="Fit" hidden="1"/>
	</framemodel>
	<frame id="Frame_Map.MapInfo" pos="-54. 30." z-index="2">
		<frame pos="-48.7 36.4" clip="True" clipsizen="80 20" clipposn="37 -4">
			<quad id="ToDel" halign="center" valign="center" size="320 180" z-index="3" pos="0 0" opacity="0.0" bgcolor="009"/>
			<label id="Label_Mode"  z-index="2" pos="0 0" size="320 180" valign="center" halign="left" textsize="12" textprefix="$s" text="{{{_("Campaign")}}}"  textcolor="fff" textfont="{{{MainFont}}}"/>
			<label id="Label_Mode2" z-index="2" pos="0.8 -9.3" size="320 180" valign="center" halign="left" textsize="6"  textprefix="$s" text="{{{_("|Campaign Map|Official")}}}"  textcolor="fff" textfont="{{{MainFont}}}"/>
		</frame>
		<quad id="Quad_Barre" halign="center" valign="center" size="1 16" z-index="3" pos="-52.9 32" opacity="1." bgcolor="fff"/>
		<frame id="Frame_LineTop" pos="0. 19.6" z-index="0">
			<quad id="Quad_Line0" halign="right" valign="center" size="{{{G_SizeXQuad}}} 0.2" pos="{{{G_SizeXQuad/2.}}} 0."                 opacity="0.5" bgcolor="fff" />
			<quad id="Quad_Line1" halign="right"  valign="bottom" size="6.7 0.6"             pos="{{{G_SizeXQuad/2.}}} 0." opacity="0.5" bgcolor="fff" />
		</frame>
		<frame clip="True" clipsizen="{{{G_SizeXQuad}}} {{{G_SizeYQuad}}}" clipposn="0 0">
			<frame id="Frame_Content">
				<quad  id="Quad_LogoMode" size="10 10" pos="-42 10" halign="center"  valign="center" z-index="-1" image="{{{LogoMultiLap}}}" opacity="0.9"/>
				<quad  id="Quad_Bg1"      size="84 {{{G_SizeYQuad}}}" pos="30 0"  halign="right"  valign="center" z-index="-1" style="Bgs1" substyle="BgDialogBlur" opacity="0.9" bluramount="0."/>
				<quad  id="Quad_Bg2"      size="24.0 {{{G_SizeYQuad}}}" pos="30 0" halign="left"  valign="center" z-index="-1" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0."/>
				
				<frame id="Frame_Medal" {{{HideSoloInfoInsert}}}>
					<quad                     size="28.0 41" pos="30 0" halign="left"  valign="center" z-index="4" image="{{{IMG_MedalBG}}}" opacity="0.2" keepratio="Fit"/>
					<quad  id="Quad_Medal"    size="28.0 41" pos="30 0" halign="left"  valign="center" z-index="5" image="{{{IMG_Medal}}}" opacity="0.9" keepratio="Fit" hidden="1"/>
				</frame>
				
				<label id="Label_TitleBody"   pos="-36.1 12.5" size="320 180" valign="center" halign="left" textsize="6" text="MapName"  textcolor="fff" textfont="{{{MainFont}}}"/>
				<label id="Label_Author"  pos="-36.0 5.9" size="320 180" valign="center" halign="left" textsize="1.5" text=""  textcolor="fff" textfont="{{{MainFont}}}"/>
				<quad id="Quad_Flag"      halign="center" valign="center" size="5.5 4.5" pos="-12.6 5.6" opacity="1." bgcolor="009" />
				
				<quad id="Quad_LineTimeTop" halign="center" valign="center" size="55 0.2" z-index="2" pos="-9.0 -4.0"  opacity="1." bgcolor="fff" />
				<frame id="Frame_PlayerBestTime" {{{HideSoloInfoInsert}}}>
					<label id="Label_PlayerBestTimeGeneral" pos="-36.5 -2." size="320 180" valign="center" halign="left" textsize="0.8" text="{{{_("Player Best Time")}}}" textcolor="ccc" textfont="{{{MainFont}}}"/>
					<quad id="Quad_LineTime" halign="center" valign="center" size="55 0.2" z-index="2" pos="-9.0 -14.0"  opacity="1." bgcolor="fff" />

					""";
				for(I,0,C_Count_InstancesY-1)
				{
					declare Real IndexY = I*1.;
					declare Real PosnX = 1.;
					declare Real PosnY = 5.-IndexY*5.;
					MLText^="""
					<frameinstance modelid="Frame_Time" z-index="2." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_Time{{{I}}}"/>
					""";
				}
				MLText^="""

				</frame>
			</frame>
		</frame>
	</frame>
	""";
	return MLText;
}

Text InjectInGlobal()
{
	declare Text MLText = """

	declare Text G_Prev_BestTimePlayer;
	declare Integer G_Prev_BestMedal;
	""";
	return MLText;
}

Text InjectInMain()
{
	declare Text MLText = """
	//declare CMlLabel Label_Mode         <=> (Page.MainFrame.GetFirstChild("Label_Mode")	    	 as CMlLabel);
	declare CMlLabel Label_TitleBody      <=> (Page.MainFrame.GetFirstChild("Label_TitleBody")		 as CMlLabel);
	declare CMlLabel Label_Author         <=> (Page.MainFrame.GetFirstChild("Label_Author")	    	 as CMlLabel);
	declare CMlQuad Quad_Flag             <=> (Page.MainFrame.GetFirstChild("Quad_Flag")	    	 as CMlQuad);
	declare CMlLabel Label_PlayerBestTimeGeneral <=> (Page.MainFrame.GetFirstChild("Label_PlayerBestTimeGeneral")    as CMlLabel);
	declare CMlFrame Frame_Time           <=> (Page.MainFrame.GetFirstChild("Frame_Time1")  as CMlFrame);
	declare CMlLabel Label_PlayerBestTime <=> (Frame_Time.GetFirstChild("Label_PlayerBestTime")  as CMlLabel);
	declare Text MapName        = Map.MapName;
	Label_PlayerBestTimeGeneral.SetText(_("Player Best Time"));
	//L16N Introduce the Nickname of the Map's author (ex: "By Artax")
	declare Text AuthorNickName = TL::Compose( _("By %1"), Map.MapInfo.AuthorNickName);
				
	declare netread Text    Net_ModeName      for UI;
	declare CMlLabel Label_Mode  <=> (Page.MainFrame.GetFirstChild("Label_Mode")    as CMlLabel);
	declare CMlLabel Label_Mode2 <=> (Page.MainFrame.GetFirstChild("Label_Mode2")   as CMlLabel);
	if(Net_ModeName == "VersusReplay")
	{
		Label_Mode.SetText("{{{_("Versus")}}}");
		Label_Mode2.SetText("{{{_("Replay")}}}");
	}
	else if(Net_ModeName == "Campaign_Solo")
	{
		Label_Mode.SetText("{{{_("Campaign")}}}");
		Label_Mode2.SetText("{{{_("|Campaign Map|Official")}}}");
	}
	else if(Net_ModeName == "SingleMapMode")
	{
		Label_Mode.SetText("{{{_("Single Map")}}}");
		Label_Mode2.SetText("");
	}
	else if(Net_ModeName == "HotSeat")
	{
		Label_Mode.SetText("{{{_("Hot Seat")}}}");
		Label_Mode2.SetText("");
	}
	else
	{
		Label_Mode.SetText("");
		Label_Mode2.SetText("");
		declare CMlQuad Quad_Barre   <=> (Page.MainFrame.GetFirstChild("Quad_Barre")    as CMlQuad);
		Quad_Barre.Hide();
	}


	declare Text UserName       = LocalUser.Name;
	
	declare Real aAa = Label_Author.ComputeWidth(UserName);
	Label_TitleBody.SetText(MapName);
	Label_Author.SetText(AuthorNickName);
	declare Real LabelWidth = Label_Author.ComputeWidth(AuthorNickName);
	Quad_Flag.RelativePosition.X = LabelWidth-32.;
	declare Flag = Map.MapInfo.AuthorCountryFlagUrl;
	if (Flag == "file://ZoneFlags/Path/") {
		Flag = "file://ZoneFlags/Path/World";
	}
	Quad_Flag.ChangeImageUrl(Flag);
	Label_PlayerBestTime.SetText(UserName);
	G_Prev_BestMedal = -1;
	

	""";
	return MLText;

}

Text InjectInFunction()
{
	declare Text MLText = """

		Void Loop_SoloMapInfosBase()
		{
			declare netread Text BestTimePlayer for UI;
			declare netread Integer Net_BestMedal for UI;
			if(BestTimePlayer != G_Prev_BestTimePlayer)
			{
				declare CMlFrame Frame_Time            <=> (Page.MainFrame.GetFirstChild("Frame_Time1")  as CMlFrame);
				declare CMlLabel Label_PlayerBestTime2 <=> (Frame_Time.GetFirstChild("Label_PlayerBestTime2")  as CMlLabel);
				Label_PlayerBestTime2.SetText(BestTimePlayer);
				Label_PlayerBestTime2.TextColor = {{{Colors::GetColor("YellowIntense2")}}};
				G_Prev_BestTimePlayer = BestTimePlayer;	
			}

			if(Net_BestMedal != G_Prev_BestMedal)
			{
				declare Vec3[] MedalColors = [{{{Colors::GetColor("GreenMaster")}}},{{{Colors::GetColor("GoldShiny")}}},{{{Colors::GetColor("SilverShiny")}}},{{{Colors::GetColor("BronzeShiny")}}}];
				declare CMlQuad Quad_Medal <=> (Page.MainFrame.GetFirstChild("Quad_Medal")  as CMlQuad);
				if(Net_BestMedal < 4)
				{
					Quad_Medal.Show();
					if(MedalColors.existskey(Net_BestMedal))
					{
						Quad_Medal.Colorize = MedalColors[Net_BestMedal];
					}
				}
				else                  Quad_Medal.Hide();

				G_Prev_BestMedal = Net_BestMedal;
			}
		}

		Void AnimShow_SoloMapInfosBase()
		{
			declare Integer Decale = 0;
			declare CMlFrame Frame_Content <=> (Page.MainFrame.GetFirstChild("Frame_Content") as CMlFrame);
			declare CMlFrame Frame_LineTop <=> (Page.MainFrame.GetFirstChild("Frame_LineTop") as CMlFrame);
			Frame_Content.RelativePosition.X = {{{-G_SizeXQuad}}};
			LibManialink_AnimStop(Frame_Content);
			LibManialink_SetTargetPosition(Frame_Content, <0., 0.>);
			LibManialink_PresetAnimInsert(Frame_Content, Decale, 400, "EaseOutQuint");

			declare CMlLabel Label_Mode  <=> (Page.MainFrame.GetFirstChild("Label_Mode")    as CMlLabel);
			declare CMlLabel Label_Mode2 <=> (Page.MainFrame.GetFirstChild("Label_Mode2")   as CMlLabel);
			declare CMlQuad Quad_Barre   <=> (Page.MainFrame.GetFirstChild("Quad_Barre")    as CMlQuad);
			declare Real ModeSize  = Label_Mode.ComputeWidth(Label_Mode.Value, True);
			declare Real Mode2Size = Label_Mode2.ComputeWidth(Label_Mode2.Value, True);
			Label_Mode.RelativePosition_V3.X  = -ModeSize - 5.;
			Label_Mode2.RelativePosition_V3.X = -Mode2Size - 5.;
			Quad_Barre.Size.Y = 0.;
			LibManialink_AnimStop(Label_Mode);
			LibManialink_SetTargetPosition(Label_Mode, <0., Label_Mode.RelativePosition_V3.Y> );
			LibManialink_PresetAnimInsert(Label_Mode, Decale, 400, "EaseOutQuint");
			LibManialink_AnimStop(Label_Mode2);
			LibManialink_SetTargetPosition(Label_Mode2, <0.8, Label_Mode2.RelativePosition_V3.Y> );
			LibManialink_PresetAnimInsert(Label_Mode2, Decale, 400, "EaseOutQuint");
			LibManialink_AnimStop(Quad_Barre);
			LibManialink_SetTargetSize(Quad_Barre, <Quad_Barre.Size.X, 16.> );
			LibManialink_PresetAnimInsert(Quad_Barre, Decale, 400, "EaseOutQuint");
			
		}

		Void SetTimeInfo_SoloMapInfosBase(Text[] _PlayersName, Text[] _PlayersTime, Vec3[] _PlayersColor)
		{
			declare CMlFrame Frame_PlayerBestTime <=> (Page.MainFrame.GetFirstChild("Frame_PlayerBestTime")  as CMlFrame);
			

			for(I, 0, {{{C_Count_InstancesY-1}}})
			{
				declare CMlFrame Frame_Time            <=> (Page.MainFrame.GetFirstChild("Frame_Time"^I)  as CMlFrame);
				declare CMlLabel Label_PlayerBestTime  <=> (Frame_Time.GetFirstChild("Label_PlayerBestTime")  as CMlLabel);
				declare CMlLabel Label_PlayerBestTime2 <=> (Frame_Time.GetFirstChild("Label_PlayerBestTime2")  as CMlLabel);
				declare CMlQuad  Quad_PlayerMedal      <=> (Frame_Time.GetFirstChild("Quad_PlayerMedal")  as CMlQuad);
				if(_PlayersName.existskey(I)) Label_PlayerBestTime.SetText(_PlayersName[I]);
				if(_PlayersTime.existskey(I))
				{
					Label_PlayerBestTime2.SetText(_PlayersTime[I]);
					if(I == 0 && _PlayersTime[0] == _PlayersTime[1])
					{
						Label_PlayerBestTime2.TextColor = {{{Colors::GetColor("YellowIntense2")}}};
					}
					else if(I == 0)
					{
						Label_PlayerBestTime2.TextColor = <1.,1.,1.>;
					}
					Frame_Time.Show();
				}
				else 
				{
					Frame_Time.Hide();
				}
				if(_PlayersColor.existskey(I))
				{
					if(_PlayersColor[I] != <0.,0.,0.>)
					{
						Quad_PlayerMedal.Colorize = _PlayersColor[I];
						Quad_PlayerMedal.Show();
					}
					else
					{
						Quad_PlayerMedal.Hide();
					}
				}
			}


			declare CMlLabel Label_PlayerBestTimeGeneral <=> (Page.MainFrame.GetFirstChild("Label_PlayerBestTimeGeneral")    as CMlLabel);
			declare CMlQuad Quad_LineTimeTop      <=> (Page.MainFrame.GetFirstChild("Quad_LineTimeTop")    as CMlQuad);
			declare CMlQuad Quad_LineTime         <=> (Page.MainFrame.GetFirstChild("Quad_LineTime")    as CMlQuad);
			if(_PlayersTime.count > 2)
			{
				Quad_LineTimeTop.RelativePosition.Y = -1.0;
				Quad_LineTime.RelativePosition.Y    = -17.0;
			}
			else
			{
				Frame_PlayerBestTime.RelativePosition.Y = -1.;
				Quad_LineTimeTop.RelativePosition.Y     = -2.0;
				Quad_LineTime.RelativePosition.Y        = -12.0;
			}
			Label_PlayerBestTimeGeneral.Hide();
			
		}
	""";
	return MLText;
}

Text InjectInWhile()
{
	declare Text MLText = """
	Loop_SoloMapInfosBase();
	""";
	return MLText;
}