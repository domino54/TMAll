#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 			as Font

#Const IMGPATH		"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/"

//#Const C_Count_InstancesY      5
//#Const C_Count_InstancesX      1
#Const C_PosXFirstQuad         -53.9
#Const C_PosYFirstQuad         1.8
#Const C_SizeXQuad             107.8
#Const C_SizeYQuad             11.3
#Const C_MarginY_Button        0.4
#Const C_MarginX_Button        4.0

declare Integer G_Count_InstancesY;
declare Integer G_Count_InstancesX;
declare Real G_SizeXQuad;
declare Real G_SizeYQuad;

Text InjectInManialink(Integer _Count_InstancesY, Integer _Count_InstancesX, Real _SizeXQuad, Real _SizeYQuad, Real _MarginY_Button, Real _MarginX_Button)
{
	G_Count_InstancesY = _Count_InstancesY;
	G_Count_InstancesX = _Count_InstancesX;
	G_SizeXQuad        = _SizeXQuad;
	G_SizeYQuad        = _SizeYQuad;
	declare Text IMG_Arrow      = "Arrow_v.dds";

	declare Text	MainFont   = Font::GetFontName("Main");
	declare Text	SubFont    = Font::GetFontName("SubTitle");
	declare Text	ChronoFont = Font::GetFontName("Chrono");
	
	declare Text MLText = """
	<framemodel id="Frame_Button">
		<frame id="Frame_ButtonContent">
			<quad id="Quad_ButtonMouse"    halign="center" valign="center" size="{{{_SizeXQuad}}} {{{_SizeYQuad}}}" pos="0 1" opacity="0.0" bgcolor="009" scriptevents="1" />
			<quad id="Quad_ButtonImg"      halign="center" valign="center" size="{{{_SizeXQuad}}} {{{_SizeYQuad}}}" z-index="1" pos="0 0" opacity="0.6" bgcolor="000"/>
			<quad id="Quad_Bg1"            halign="center" valign="center" size="{{{_SizeXQuad}}} {{{_SizeYQuad}}}" z-index="0" pos="0 0" opacity="0.1" style="Bgs1" substyle="BgDialogBlur" bluramount="0.1"/>
			<quad id="Quad_Arrow"          halign="center" valign="center" z-index="3" pos="-45.0 0" size="3 3" image="{{{IMGPATH^IMG_Arrow}}}" keepratio="Fit" colorize="f22"/>
			<label id="Label_Button"       halign="left"   valign="center" style="TextButtonBig" z-index="2" pos="-36.3 0.2" textsize="3" textcolor="fff" opacity="1." textfont="{{{SubFont}}}"/>
			<label id="Label_OpponentTime" halign="left" valign="center" style="TextButtonBig" z-index="2" pos="20.6 0.5" textsize="3" textcolor="fff" opacity="1." textfont="{{{ChronoFont}}}"/>
			<quad id="Quad_OpponentImg"   halign="right" valign="center"  size="{{{_SizeXQuad}}} {{{_SizeYQuad}}}" z-index="2" pos="{{{_SizeXQuad/2.}}} 0" keepratio="Fit"/>
		</frame>
	</framemodel>
	
	<framemodel id="Frame_Line">
		<quad id="Quad_LineFoot0" halign="right" valign="center" size="{{{_SizeXQuad}}} 0.2" z-index="0" pos="{{{G_SizeXQuad/2.-20.}}} 0."  opacity="0.5" bgcolor="fff" />
		<quad id="Quad_LineFoot1" halign="right"  valign="bottom" size="6.7 0.6" z-index="0" pos="{{{_SizeXQuad/2.-20.}}} 0."  opacity="0.5" bgcolor="fff" />
	</framemodel>

	<frame id="Frame_Buttons"  pos="{{{C_PosXFirstQuad}}} {{{C_PosYFirstQuad}}}" z-index="2">
				<frame clip="True" clipsizen="{{{_SizeXQuad}}} 180" clipposn="0 0">
		""";
	for(I, 0, _Count_InstancesY-1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = IndexY*-_SizeYQuad - IndexY*_MarginY_Button*1.;
		for(J, 0, _Count_InstancesX-1)
		{
			declare Real IndexX = J*1.;
			declare Real PosnX = IndexX*_SizeXQuad + IndexX*_MarginX_Button*1.;
			MLText^="""
					<frameinstance modelid="Frame_Button" z-index="5." pos="{{{PosnX}}} {{{PosnY}}}" id="Frame_Button{{{I}}}"/>
			""";
		}
	}
	
	MLText^="""
				</frame>
		<frameinstance modelid="Frame_Button" z-index="5." pos="0 -65.3" id="Frame_Exit" hidden="1"/>
		<frameinstance lid="Frame_Line" modelid="Frame_Line" z-index="3." pos="20.0 {{{-G_SizeYQuad*G_Count_InstancesY}}}"/>
	</frame>
	""";
	return MLText;
}

Text InjectInManialink(Integer _Count_InstancesY, Integer _Count_InstancesX)
{

	return InjectInManialink(_Count_InstancesY, _Count_InstancesX, C_SizeXQuad, C_SizeYQuad,C_MarginY_Button ,C_MarginX_Button);
}

Text InjectInFunction()
{
	declare Text IMG_QuadSelect = IMGPATH ^ "QuadSelect.dds";

	declare Text MLText = """
		declare Integer G_ButtonFocus;


		Void UnFocusButton()
		{
			if(G_ButtonFocus == -1) return;
			declare CMlFrame Frame_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^G_ButtonFocus) as CMlFrame);
			if(Frame_Button == Null) return;
			declare CMlQuad Quad_ButtonImg      <=> (Frame_Button.GetFirstChild("Quad_ButtonImg")                   as CMlQuad);
			declare CMlQuad Quad_Arrow          <=> (Frame_Button.GetFirstChild("Quad_Arrow")                   as CMlQuad);
			declare CMlLabel Label_Button       <=> (Frame_Button.GetFirstChild("Label_Button")	                    as CMlLabel);
			declare CMlLabel Label_OpponentTime <=> (Frame_Button.GetFirstChild("Label_OpponentTime")               as CMlLabel);
			Quad_ButtonImg.BgColor       = <0., 0., 0.>;
			Label_Button.TextColor       = <1., 1., 1.>;
			Label_OpponentTime.TextColor = <1., 1., 1.>;
			Quad_Arrow.Colorize          = <1., 0.1, 0.1>;
		}

		Void FocusButton()
		{
			if(G_ButtonFocus == -1) return;
			declare CMlFrame Frame_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^G_ButtonFocus)       as CMlFrame);
			if(Frame_Button == Null) return;
			declare CMlQuad Quad_ButtonImg      <=> (Frame_Button.GetFirstChild("Quad_ButtonImg")	                    as CMlQuad);
			declare CMlQuad Quad_Arrow          <=> (Frame_Button.GetFirstChild("Quad_Arrow")                   as CMlQuad);
			declare CMlLabel Label_Button       <=> (Frame_Button.GetFirstChild("Label_Button")	                    as CMlLabel);
			declare CMlLabel Label_OpponentTime <=> (Frame_Button.GetFirstChild("Label_OpponentTime")               as CMlLabel);
			Quad_ButtonImg.BgColor       = <1., 1., 1.>;
			Label_Button.TextColor       = <0., 0., 0.>;
			Label_OpponentTime.TextColor = <0., 0., 0.>;
			Quad_Arrow.Colorize          = <0., 0., 0.>;
		}

		Void SetButtons(Text[] _LabelMedals, Text[] _LabelMedalsTime, Text[] _LabelMedalsImage, Vec3[Integer] _LabelMedalsImageColor)
		{
			for(I, 0, {{{G_Count_InstancesY-1}}})
			{
				declare CMlFrame Frame_Button       <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I) as CMlFrame);
				if(Frame_Button == Null) continue;
				declare CMlLabel Label_Button       <=> (Frame_Button.GetFirstChild("Label_Button")	      as CMlLabel);
				declare CMlLabel Label_OpponentTime <=> (Frame_Button.GetFirstChild("Label_OpponentTime")	      as CMlLabel);
				declare CMlQuad Quad_OpponentImg  <=> (Frame_Button.GetFirstChild("Quad_OpponentImg")	      as CMlQuad);
				if(_LabelMedals.existskey(I))      Label_Button.SetText(_LabelMedals[I]);
				if(_LabelMedalsTime.existskey(I))  Label_OpponentTime.SetText(_LabelMedalsTime[I]);
				if(_LabelMedalsImage.existskey(I)) Quad_OpponentImg.ChangeImageUrl(_LabelMedalsImage[I]);
				if(_LabelMedalsImageColor.existskey(I+1)) Quad_OpponentImg.Colorize = _LabelMedalsImageColor[I+1];
			}
			declare CMlFrame Frame_Exit         <=> (Page.MainFrame.GetFirstChild("Frame_Exit") as CMlFrame);
			declare CMlQuad Quad_Arrow          <=> (Frame_Exit.GetFirstChild("Quad_Arrow")  as CMlQuad);
			declare CMlLabel Label_Button <=> (Frame_Exit.GetFirstChild("Label_Button")	      as CMlLabel);
			declare CMlQuad Quad_OpponentImg    <=> (Frame_Exit.GetFirstChild("Quad_OpponentImg")	      as CMlQuad);
			Quad_OpponentImg.ChangeImageUrl("{{{IMG_QuadSelect}}}");
			Quad_OpponentImg.Size.X -= 80.;
			Quad_OpponentImg.RelativePosition.X -= 3.;
			Label_Button.SetText(_("Select"));
			Label_Button.RelativePosition.X = 26.0;
			Label_Button.RelativePosition.Y = 0.5;

			Quad_Arrow.Hide();
			
		}
		
		Void SetButtons(Text[] _LabelMedals, Text[] _LabelMedalsTime)
		{
			declare Vec3[Integer] MyVec;
			SetButtons(_LabelMedals, _LabelMedalsTime, [""], MyVec);
		}

		Void SetButtons(Text[] _LabelMedals)
		{
			declare Vec3[Integer] MyVec;
			SetButtons(_LabelMedals, [""], [""], MyVec);
		}

		Void AnimShow_QuadSelect()
		{
			declare Integer Decale = 0;
			G_ButtonFocus = 0;
			for(I, 0, {{{G_Count_InstancesY-1}}})
			{
				declare CMlFrame Frame_Button        <=> (Page.MainFrame.GetFirstChild("Frame_Button"^I) as CMlFrame);
				declare CMlFrame Frame_ButtonContent <=> (Frame_Button.GetFirstChild("Frame_ButtonContent") as CMlFrame);
				Frame_ButtonContent.RelativePosition.X = {{{-G_SizeXQuad}}};

				LibManialink_AnimStop(Frame_ButtonContent);
				LibManialink_SetTargetPosition(Frame_ButtonContent, <0., 0.>);
				LibManialink_PresetAnimInsert(Frame_ButtonContent, Decale, 500, "EaseOutQuint");
				Decale += 50;
			}
		}

	""";
	return MLText;

}

Text InjectInWhile(Text _ActionWhenSelect, Text _ActionWhenCancel, Text _ActionWhenAction1, Text _ActionWhenAction2)
{
	declare Text MLText = """
	foreach(Event in PendingEvents) {
		switch(Event.Type) {

			case CMlEvent::Type::MenuNavigation: {
				switch(Event.MenuNavAction) {
					case CMlEvent::EMenuNavAction::Select : {
						if(G_ButtonFocus == -1) continue;
						UnFocusButton();
						{{{_ActionWhenSelect}}}
					}
					case CMlEvent::EMenuNavAction::Cancel : {
						UnFocusButton();
						{{{_ActionWhenCancel}}}
					}
					case CMlEvent::EMenuNavAction::Action1 : {
						{{{_ActionWhenAction1}}}
					}
					case CMlEvent::EMenuNavAction::Action2 : {
						{{{_ActionWhenAction2}}}
					}
					case CMlEvent::EMenuNavAction::Up : {
						//log("G_ButtonFocus: "^ G_ButtonFocus);
						if(G_ButtonFocus > 0)
						{
							UnFocusButton();
							G_ButtonFocus -= 1;
							FocusButton();
						}
					}
					case CMlEvent::EMenuNavAction::Down : {
						//log("G_ButtonFocus: "^ G_ButtonFocus);
						if(G_ButtonFocus < {{{G_Count_InstancesY-1}}})
						{
							UnFocusButton();
							G_ButtonFocus += 1;
							FocusButton();
						}
					}
				}
			}
			case CMlEvent::Type::MouseClick: {
				declare Text ControlId = Event.Control.Parent.Parent.ControlId;
				declare Text[] Split = TL::Split("Frame_Button", ControlId);
				declare Integer Index = TL::ToInteger(Split[1]);
				UnFocusButton();
				G_ButtonFocus = Index;
				//log("Index: " ^ Index);
				{{{_ActionWhenSelect}}}
			}
			case CMlEvent::Type::MouseOver: {
				if (Event.ControlId == "Quad_ButtonMouse")
				{

					declare Text ControlId = Event.Control.Parent.Parent.ControlId;
					declare Text[] Split = TL::Split("Frame_Button", ControlId);
					declare Integer Index = TL::ToInteger(Split[1]);
					UnFocusButton();
					G_ButtonFocus = Index;
					FocusButton();
				}
			}
			case CMlEvent::Type::MouseOut: {
				if (Event.ControlId == "Quad_ButtonMouse")
				{
					declare Text ControlId = Event.Control.Parent.Parent.ControlId;
					declare Text[] Split = TL::Split("Frame_Button", ControlId);
					declare Integer Index = TL::ToInteger(Split[1]);
					G_ButtonFocus = Index;
					UnFocusButton();
					G_ButtonFocus = -1;

				}
			}
		}
	}
	""";
	return MLText;

}

Text InjectInWhile(Text _ActionWhenSelect)
{
	return InjectInWhile(_ActionWhenSelect, "", "", "");
}

Text InjectInWhile(Text _ActionWhenSelect, Text _ActionWhenCancel)
{
	return InjectInWhile(_ActionWhenSelect, _ActionWhenCancel, "", "");
}

Text InjectInWhile(Text _ActionWhenSelect, Text _ActionWhenCancel, Text _ActionWhenAction1)
{
	return InjectInWhile(_ActionWhenSelect, _ActionWhenCancel, _ActionWhenAction1, "");
}