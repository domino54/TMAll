#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"								as Manialink
#Include "Libs/Trackmania/Ingame/Medals.Script.txt"									as Medals
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt" 					            		as Colors
#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_SoloMapInfosBase.Script.txt"		as Inject_SoloMapInfosBase
#Include "Libs/Trackmania/Ingame/UI/Layers/Inject_QuadsSelector.Script.txt"			as Inject_QuadsSelector

#Const TMC_MEDAL_AUTHOR					0
#Const TMC_MEDAL_GOLD					1
#Const TMC_MEDAL_SILVER					2
#Const TMC_MEDAL_BRONZE					3
#Const TMC_MEDAL_PLAYER					4
#Const TMC_MEDAL_NONE					5
#Const TMC_MEDAL_ANOTHERPLAYER			6

#Const IMGPATH								"file://Media/MEDIABROWSER_HiddenResources/Common/Images/Ingame/"

Text Build() {
	declare Integer Count_InstancesY         = 1;
	declare Integer Count_InstancesX         = 1;
	declare Real	PosXFirstQuad            = -19.9;
	declare Real	PosYFirstQuad            = -27.8;

	declare Real	SizeXQuad                = 107.8;
	declare Real	SizeYQuad                = 11.3;
	declare Real	MarginY_Button           = 0.4;
	declare Real	MarginX_Button           = 4.0;
 

	declare Text MedalIcon = IMGPATH ^ "MedalButton2.dds";

 	// style="Bgs1" substyle="BgDialogBlur"
	declare Text MLText = """
<manialink version="3" name="L_UIMedalSelection">

	<frame id="Frame_All">

		<frame id="Frame_Menu"  z-index="10" hidden="0">
			<frame pos="0 0.0">
				<quad id="Quad_"      halign="center" valign="center" size="20 20" z-index="1" pos="0 0" opacity="1.0" bgcolor="090"/>
			</frame>
		</frame>
	</frame>
	
	
	<script><!--
		#Const DebugName  "L_PairingPad"

		{{{Manialink::GetIncludes()}}}
		
		{{{Manialink::Load()}}}
		
		//declare Integer G_ButtonFocus;
		

		Void ClearChoose()
		{
			declare netwrite Integer Net_NbPlayerChosen for UI;
			declare netwrite Boolean Net_GameIsInit for UI;
			Net_GameIsInit = False;
			Net_NbPlayerChosen = 0;
		}

		Void PressSelect()
		{
			log("PressSelect");
			//declare Integer 	Net_HideIngameUI 			for Teams[0];
			//Net_HideIngameUI += 1;
			//declare Integer 	Net_ShowIngameUI 			for Teams[0];
			//Net_ShowIngameUI += 1;
			//CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
			//EnableMenuNavigation(False, False, Null, 0);
		}

		Void Button_Quit()
		{
			log("Button_Quit");
			declare netwrite Integer 	Net_PlayerWantsToQuitUpdate			for UI;
			Net_PlayerWantsToQuitUpdate += 1;
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
			//declare netwrite Integer 	Net_ShowIngameUI 			for UI;
			//Net_ShowIngameUI += 1;
		}

		Void Init()
		{
			//log("Init");
			declare netwrite Integer[] 			LibTMC_PairingPads_PadsPlaying 					for UI;
			LibTMC_PairingPads_PadsPlaying.clear();
			ClearChoose();
			declare Text[] LabelMedals = ["Start",
										  	  ""];
			declare Text[] LabelMedalsTime = ["",
										  	  "",
										  	  "",
										  	  "",
										  	  ""];
			declare Text[] QuadMedalImg    = ["",
										  	  "",
										  	  "",
										  	  "",
										  	  ""];
			//declare Vec3[Integer] QuadMedalImgColo = [];
			//SetButtons(LabelMedals, LabelMedalsTime);
		}

		Void ShowPage()
		{
			EnableMenuNavigation(True,False,Null,2);
			ClearChoose();
			//FocusButton();
		}


		main() {
			Init();

			declare Boolean Prev_Visibility;
			declare netwrite Integer[]			Net_SlotIdUsed									for UI;
			declare netwrite Integer[] 			LibTMC_PairingPads_PadsPlaying 					for UI;
			declare Integer[]					LibTMC_PairingPads_PadSlotIdToPadControllerId	for UI;
			declare Integer[]                   ActivePads for UI;
			//declare netwrite Integer            Net_MainUserControllerId for UI;
			Net_SlotIdUsed.clear();

			//log("A: "^ LibTMC_PairingPads_PadSlotIdToPadControllerId);
			while(True) {
				
				yield;
				if(Prev_Visibility != PageIsVisible) {
					if(PageIsVisible) ShowPage();
					Prev_Visibility = PageIsVisible;
				}
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
				

				foreach(PadIndex => Pad in Input.Pads) 
				{

					if(!ActivePads.exists(Pad.ControllerId)) {
						ActivePads.add(Pad.ControllerId);
						if(!LibTMC_PairingPads_PadSlotIdToPadControllerId.exists(Pad.ControllerId)) {
							log("["^Now^"]LibTMC_PairingPads_PadSlotIdToPadControllerId: " ^ LibTMC_PairingPads_PadSlotIdToPadControllerId);
							//declare Integer FinalSlotId 	= 0;
							declare Integer FirstEmptySlot 	= -1;

							for(I, 0, LibTMC_PairingPads_PadSlotIdToPadControllerId.count-1) {
								declare Boolean IsSlotUsed = True;
								if(LibTMC_PairingPads_PadSlotIdToPadControllerId[I] == -1 && IsSlotUsed) {
									FirstEmptySlot = I;
									break;
								}
							}
							if(FirstEmptySlot > -1) {
								LibTMC_PairingPads_PadSlotIdToPadControllerId[FirstEmptySlot] = Pad.ControllerId;
								//FinalSlotId = FirstEmptySlot;
							} else {
								LibTMC_PairingPads_PadSlotIdToPadControllerId.add(Pad.ControllerId);
								//FinalSlotId = 0;
							}
						}
					}
					//log("["^Now^"]Input.PadsInput.Pads: " ^ Input.Pads);

					foreach(Button in Pad.ButtonEvents)
					{
						//log("["^Now^"]Input.Pads: " ^ Button);
						switch(Button) 
						{
							case CInputScriptPad::EButton::A :
							{
								//log("A: " ^ Pad.ControllerId);
								declare netwrite Integer 	Net_Layer_TMC_PairingPads_PopupUpdate for UI;
								Net_Layer_TMC_PairingPads_PopupUpdate = Now;
							} 
							case CInputScriptPad::EButton::X : 
							{
								Net_SlotIdUsed.add(LibTMC_PairingPads_PadSlotIdToPadControllerId.keyof(Pad.ControllerId));
								//log("X["^Pad.ControllerId^"]: " ^ Net_SlotIdUsed);
								LibTMC_PairingPads_PadsPlaying.add(Pad.ControllerId);
							}
						}
					}
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {

						case CMlEvent::Type::MenuNavigation: {
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Select : {
									log("Select: " ^ Event.ControlId);
									
								}
								case CMlEvent::EMenuNavAction::Cancel : {
									//log("Cancel");
								}
							}
						}
						case CMlEvent::Type::MouseClick: {
							
						}
						case CMlEvent::Type::PluginCustomEvent: {
							
							switch(Event.PluginCustomEventType) {
								case "Show" : {
									ShowPage();
								}
								
								case "Hide" : {
									//EnableMenuNavigation(True,False,Null,0);
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
	""";
	
	return MLText;
}