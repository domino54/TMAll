// Log levels as defined in RFC 5424 http://tools.ietf.org/html/rfc5424
#Const C_Manialib_Logger_Level_Debug 100
#Const C_Manialib_Logger_Level_Info 200
#Const C_Manialib_Logger_Level_Notice 250
#Const C_Manialib_Logger_Level_Warning 300
#Const C_Manialib_Logger_Level_Error 400
#Const C_Manialib_Logger_Level_Critical 500
#Const C_Manialib_Logger_Level_Alert 550
#Const C_Manialib_Logger_Level_Emergency 600

declare Boolean[Integer] Private_Manialib_Logger_Config;

Text Private_Manialib_Logger_GetLevelName(Integer Level) {
	switch(Level) {
		case C_Manialib_Logger_Level_Debug: return "Debug";
		case C_Manialib_Logger_Level_Info: return "Info";
		case C_Manialib_Logger_Level_Notice: return "Notice";
		case C_Manialib_Logger_Level_Warning: return "Warning";
		case C_Manialib_Logger_Level_Error: return "Error";
		case C_Manialib_Logger_Level_Critical: return "Critical";
		case C_Manialib_Logger_Level_Alert: return "Alert";
		case C_Manialib_Logger_Level_Emergency: return "Emergency";
	}
	return "Unkown Log Level";
}

Void Manialib_Logger_SetLevelConfig(Integer Level, Boolean IsVisible) {
	Private_Manialib_Logger_Config[Level] = IsVisible;
}

Void Manialib_Logger_Log(Integer Level, Text Message) {
	if(Private_Manialib_Logger_Config.existskey(Level) && Private_Manialib_Logger_Config[Level] == False) {
	return;
	}
	log("["^Private_Manialib_Logger_GetLevelName(Level)^"] "^Message);
}

Void Manialib_Logger_Debug(Text Message) {
	Manialib_Logger_Log(C_Manialib_Logger_Level_Debug, Message);
}

Void Manialib_Logger_Info(Text Message) {
	Manialib_Logger_Log(C_Manialib_Logger_Level_Info, Message);
}
// todo: implement other levels...