/**
 * @name TMAllFeatures_Editor.Script.txt
 * @author domino54
 * @version 2024-10-05
 */

#Const Version      "2024-10-05"
#Const ScriptName   "Libs/domino54/TrackMania/TMAllFeatures_Editor.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Common/Ingame/MapType.Script.txt" as MapType
#Include "Libs/domino54/TrackMania/GameplayCoefs_Editor.Script.txt" as GameplayCoefs_Editor
#Include "Libs/domino54/TrackMania/GameplayCoefs_Server.Script.txt" as GameplayCoefs_Server
#Include "Libs/domino54/HttpClient.Script.txt" as HttpClient
#Include "Libs/domino54/PlayerModels_Data.Script.txt" as PlayerModels_Data
#Include "Libs/domino54/PlayerModels_Server.Script.txt" as PlayerModels_Server
#Include "Libs/domino54/CustomSkins_LocalData.Script.txt" as CustomSkins_LocalData
#Include "Libs/domino54/Openplanet_Client.Script.txt" as Openplanet_Client
#Include "Libs/domino54/Openplanet_Players.Script.txt" as Openplanet_Players

// ---------------------------------- //
// Constants
// ---------------------------------- //

#Const G_LibTMAllEditor_NormalizeAssetId "gameplaycoefs:normalize"

// ---------------------------------- //
// Global variables
// ---------------------------------- //

declare Boolean G_LibTMAllEditor_HasProbedMapPlayerModelName;

// ---------------------------------- //
// Private functions
// ---------------------------------- //

/**
 * Unless already done once, enter the playground temporarily to read the model name of the map.
 */
Void Private_ProbeMapPlayerModelName() {
  if (G_LibTMAllEditor_HasProbedMapPlayerModelName) {
    return;
  }

  MapType::EnterPlayground(1);
  PlayerModels_Server::SetMapProperties(Mode.Map.CollectionName, Mode.MapPlayerModelName);
  MapType::LeavePlayground();

  G_LibTMAllEditor_HasProbedMapPlayerModelName = True;
}

Void Private_NormalizeCoefsIfUninitialized() {
  Private_ProbeMapPlayerModelName();

  declare ModelId = PlayerModels_Server::GetMapPlayerModelId();
  declare NeedsNormalize = PlayerModels_Data::GetPlayerModelAsset(ModelId, G_LibTMAllEditor_NormalizeAssetId, "");

  log(ModelId);
  log(NeedsNormalize);

  if (TL::RegexFind("^1|true$", NeedsNormalize, "i").count <= 0) {
    return;
  }

  declare GameplayInfo = PlayerModels_Data::GetPlayerModelGameplayInfo(ModelId);

  GameplayCoefs_Editor::NormalizeCoefsIfUninitialized(GameplayInfo.AccelCoef, GameplayInfo.ControlCoef, GameplayInfo.GravityCoef);
}

Void Private_OpenGameplayCeofsEditor() {
  Private_NormalizeCoefsIfUninitialized();

  declare ModelId = PlayerModels_Server::GetMapPlayerModelId();
  declare GameplayInfo = PlayerModels_Data::GetPlayerModelGameplayInfo(ModelId);
  declare IsUnited = PlayerModels_Data::GetPlayerModelIsUnitedVehicle(ModelId);

  GameplayCoefs_Editor::ShowDialog();
  GameplayCoefs_Editor::SetMapPlayerModelCoefs(GameplayInfo.AccelCoef, GameplayInfo.ControlCoef, GameplayInfo.GravityCoef);
  GameplayCoefs_Editor::SetMinGameplayCoefs(IsUnited);
}

// ---------------------------------- //
// Public functions
// ---------------------------------- //

/**
 * Call in a custom yield wrapper function.
 */
Void Loop() {
  HttpClient::Yield();
  GameplayCoefs_Editor::Loop();

  if (GameplayCoefs_Editor::IsDialogRequested()) {
    Private_OpenGameplayCeofsEditor();
  }
}

/**
 * Use as a substitute to a yield wrapper.
 */
Void Yield() {
  Loop();
  yield;
}

Void UnloadLibraries() {
  HttpClient::Unload();
  CustomSkins_LocalData::Unload();
  GameplayCoefs_Editor::Unload();
  GameplayCoefs_Server::Unload();
  PlayerModels_Data::Unload();
}

Void Unload() {
  UnloadLibraries();
}

Void LoadLibraries() {
  HttpClient::Load();
  CustomSkins_LocalData::Load();
  Openplanet_Client::Load();
  GameplayCoefs_Editor::Load(False);
  GameplayCoefs_Server::Load();
  PlayerModels_Data::Load();

  while (PlayerModels_Data::Loading()) {
    Yield();
  }
}

Void Load() {
  LoadLibraries();

  EnableMapTypeStartTest = True;
}

/**
 * Call before entering the playground.
 */
Void BeforeEnterPlayground() {
  // Pull values from the map
  Private_ProbeMapPlayerModelName();
  Private_NormalizeCoefsIfUninitialized();
  GameplayCoefs_Server::ReadValuesFromMap(Map);

  // Yield only once, because only the selected skin will load
  CustomSkins_LocalData::Yield();

  // Load skins
  Mode.ItemList_Begin();

  PlayerModels_Server::Load(Mode, PlayerModels_Server::K_Options {
   ModelIdAllowlist = [PlayerModels_Server::GetMapPlayerModelId()],
   SkinIdAllowlist = PlayerModels_Server::GetLocalPlayerSkinIds()
  });

  Mode.ItemList_End();
}

/**
 * Call before leaving the playground.
 */
Void BeforeLeavePlayground() {
  PlayerModels_Server::Unload(Mode);
}

/**
 * Call before spawning a player.
 */
Void ApplyGameplay(CTmPlayer _Player) {
  GameplayCoefs_Server::AssignPlayerCoefs(_Player);
  PlayerModels_Server::AssignModel(_Player);
}
