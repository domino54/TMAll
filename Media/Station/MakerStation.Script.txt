#RequireContext CManiaAppStation

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_MaxTitlesPerPage 8

declare Integer G_CurrentPage;
declare Integer G_MaxPages;

CUILayer CreateLayer()
{
	declare Real SizeY              = 26.5 + C_MaxTitlesPerPage*10.; //26.5 => Header || 25. => champs des new
	declare Vec2 SizeQuad           = <120.,SizeY>;
	declare Vec2 PosGlobal          = <(-SizeQuad.X/2.), 75.>;
	declare Real PosX               = SizeQuad.X*0.05;
	declare Real SizeNewCreateQuadX = 30.;
	declare Real SizeNewEntryQuadX  = SizeQuad.X - PosX*2. - SizeNewCreateQuadX -5.;

	declare Real PosLoadX           = -70.;
	declare Real PosNewX            = 43.;
	declare Real PosNewY            = -3.2;

	declare TitleAndInfo = 
"""	
<manialink version="3">
""";

	declare EditOrCreate = 
"""
	<frame pos="{{{PosGlobal.X}}} {{{PosGlobal.Y}}}">
		<frame id="Frame_Load" pos="{{{PosLoadX}}} 0." z-index="1">
			<quad pos="0 0" z-index="0" size="{{{SizeQuad.X*2.}}} {{{SizeQuad.Y}}}" bgcolor="000" opacity="0.3"/>
			<quad              pos="{{{SizeQuad.X*2.}}} {{{-SizeQuad.Y}}}" halign="right"  valign="bottom" z-index="1" size="10. 0.2" bgcolor="fff" opacity="1."/>
			<quad              pos="0 {{{-SizeQuad.Y}}}" halign="left" valign="top" z-index="1" size="{{{SizeQuad.X*2.}}} 0.2	" bgcolor="fff" opacity="1."/>
			<label pos="7 -8" z-index="1" size="70 10" textprefix="$t" text="{{{//L16N Verb, infinitive form, title is a specific term : it is similar to a game
													_("Load title")}}}"/>

""";


	declare DecalOffset = 10;
	declare Offset = -15;
	for (TitleIndex, 0, C_MaxTitlesPerPage - 1) {
		EditOrCreate ^= 
	//<label id="Station_Label{{{TitleIndex}}}" pos="10 {{{Offset}}}" z-index="1" style="CardMain_Tool" substyle="Load" scriptaction="EditTitle'{{{TitleIndex}}}"/>
	//<quad  pos="{{{PosX}}} -115" valign="center" size="{{{SizeQuad.X - PosX*2.}}} 10"  z-index="6" opacity="1.0" bgcolor="000" scriptaction="EditTitle'{{{TitleIndex}}}"/>
"""
			<frame id="Frame_Load{{{TitleIndex}}}" pos="0 {{{Offset}}}" z-index="1">
				<label id="Station_Label{{{TitleIndex}}}" halign="left" valign="center" pos="{{{PosX+3.}}} {{{-2.5}}}" z-index="1" text="MyTitle"/>
				<quad id="Quad_LoadSelect" pos="{{{PosX}}} -3." valign="center" size="{{{SizeQuad.X - PosX*2.}}} 9.5"  z-index="0" opacity="0.6" bgcolor="000" scriptaction="EditTitle'{{{TitleIndex}}}" scriptevents="1"/>
			</frame>
""";
		Offset -= DecalOffset;
	}

	//-SizeQuad.Y+25.
	EditOrCreate ^= 
"""
			<frame id="StationScroll_Frame" z-index="2" pos="{{{SizeQuad.X/2.}}} {{{-17 - C_MaxTitlesPerPage*DecalOffset}}}">
				<quad	id="StationScroll_ScrollL"	halign="center" valign="center" pos="-12 -2"	z-index="2"	size="12 12" style="Icons64x64_1" substyle="ArrowPrev" keepratio="Fit" scriptevents="1"/>
				<quad	id="StationScroll_ScrollR"	halign="center" valign="center" pos="12  -2"	z-index="2"	size="12 12" style="Icons64x64_1" substyle="ArrowNext" keepratio="Fit" scriptevents="1"/>
				<label	id="StationScroll"			halign="center" valign="center" text="1/XXX" scriptevents="1" pos="0 -2" z-index="2" textsize="2" textcolor="fff" opacity="1."/>
				<quad	halign="center" valign="center" pos="0.2 -6.5" z-index="2" size="30.8 6.5"/>
			</frame>
		</frame>
		<frame id="Frame_New" pos="{{{PosNewX}}} {{{PosNewY}}}" z-index="2">
			<frame id="Frame_NewBG" pos="0 0" z-index="-1">
				<quad id="Quad_BG" pos="0 2.5" valign="top" z-index="-2" size="{{{SizeQuad.X}}} 30." bgcolor="000" opacity="0.3"/>
				<quad              pos="{{{SizeQuad.X}}} {{{-30. + 2.5}}}" halign="right"  valign="bottom" z-index="1" size="10. 0.2" bgcolor="fff" opacity="1."/>
				<quad              pos="0 {{{-30. + 2.5}}}" halign="left" valign="top" z-index="1" size="{{{SizeQuad.X}}} 0.2	" bgcolor="fff" opacity="1."/>
			</frame>

			<label pos="{{{PosX}}} -5" z-index="1" size="70 10" textprefix="$t" text="{{{//L16N Verb, infinitive form, title is a specific term : it is similar to a game
													_("Create title")}}}"/>
			<quad  pos="{{{PosX}}} -15" valign="center" size="{{{SizeNewEntryQuadX}}} 10"  id="Quad_FgNew" z-index="2" opacity="0.0" bgcolor="000" scriptevents="1"/>
			<quad  pos="{{{PosX}}} -15" valign="center" size="{{{SizeNewEntryQuadX}}} 10"  id="Quad_BgNew" z-index="-1" opacity="1.0" bgcolor="000"/>
			<entry pos="{{{PosX+4.}}} -15" z-index="2" size="{{{SizeNewEntryQuadX-4.}}} 10" default="" id="entry_titleid" style="TextValueMedium" valign="center2" scriptevents="1"/>
			<label pos="{{{PosX+4.}}} -15" z-index="2" size="{{{SizeNewEntryQuadX-4.}}} 10" text="" id="Label_titleid" style="TextValueMedium" valign="center2"/>

			<frame id="Frame_NewCreate" pos="{{{SizeQuad.X-PosX}}} -15" z-index="2">
				<quad  pos="0 0" halign="right" valign="center" size="{{{SizeNewCreateQuadX}}} 10"  id="Quad_BgNewCreate" z-index="-1" opacity="0.7" bgcolor="000" scriptevents="1" scriptaction="EditNewTitle"/>
				<label pos="{{{-SizeNewCreateQuadX+1.}}} 0" halign="left" valign="center" z-index="1" size="{{{SizeNewCreateQuadX-9}}} 10" textprefix="$t" text="{{{//L16N Verb, infinitive form, to create a title. Title is a specific term : it is similar to a game
													_("Create")}}}"/>
			</frame>
		</frame>
	</frame>
	<script><!--


		Void DisplayStations()
		{
			declare Text[]	Station_DefaultStation		for Page;
			declare Integer	Station_CurrentPage			for Page;
			declare Integer	Station_MaxPageNb			for Page;

			declare CMlFrame Frame_Load  <=> (Page.GetFirstChild("Frame_Load") as CMlFrame);
			declare CMlFrame Frame_New   <=> (Page.GetFirstChild("Frame_New")  as CMlFrame);
			declare CMlFrame Frame_NewBG <=> (Page.GetFirstChild("Frame_NewBG")  as CMlFrame);
			declare CMlFrame StationScroll_Frame  <=> (Page.GetFirstChild("StationScroll_Frame") as CMlFrame);
			if(Station_MaxPageNb == 0)
			{
				Frame_Load.Hide();
				Frame_NewBG.Show();
				StationScroll_Frame.Hide();
				Frame_New.RelativePosition.X = 0.;
				Frame_New.RelativePosition.Y = -55.;
			}
			else
			{
				Frame_Load.Show();
				Frame_NewBG.Hide();
				Frame_New.RelativePosition.X = {{{PosNewX}}};
				Frame_New.RelativePosition.Y = {{{PosNewY}}};
			}

			if(Station_MaxPageNb == 1)
			{
				StationScroll_Frame.Hide();
			}
			else
			{
				StationScroll_Frame.Show();
			}

			for (I, 0, {{{C_MaxTitlesPerPage - 1}}}) {
				declare CMlFrame Frame_Load		<=> (Page.GetFirstChild("Frame_Load" ^ I) as CMlFrame);
				declare Station_Label		<=> (Page.GetFirstChild("Station_Label" ^ I) as CMlLabel);
				if (Station_DefaultStation.existskey(I)) {
					Station_Label.SetText(Station_DefaultStation[I]);
					Frame_Load.Show();
				} else {
					Frame_Load.Hide();
				}
			}
			declare CMlLabel Label_Pages    <=> (Page.GetFirstChild("StationScroll") as CMlLabel);
			Label_Pages.SetText(Station_CurrentPage ^ "/" ^ Station_MaxPageNb);

			declare CMlQuad  Button_ScrollL	<=> (Page.MainFrame.GetFirstChild("StationScroll" ^ "_ScrollL") as CMlQuad);
			declare CMlQuad  Button_ScrollR	<=> (Page.MainFrame.GetFirstChild("StationScroll" ^ "_ScrollR") as CMlQuad);
			if(Station_CurrentPage <= 1)
			{
				Button_ScrollL.Hide();
			} else {
				Button_ScrollL.Show();
			}
			if(Station_CurrentPage >= Station_MaxPageNb)
			{
				Button_ScrollR.Hide();
			} else {
				Button_ScrollR.Show();
			}
		}

		main() {
			while (True) {
				yield;
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::MouseClick: {
							if (Event.ControlId == "StationScroll_ScrollL")
							{
								SendCustomEvent("Maker_Station_PageDown", Text[]);
							}
							else if (Event.ControlId == "StationScroll_ScrollR")
							{
								SendCustomEvent("Maker_Station_PageUp", Text[]);
							}
							else if (Event.ControlId == "Quad_FgNew")
							{
								//declare CMlQuad  Quad_FgNew	<=> (Page.MainFrame.GetFirstChild("Quad_FgNew") as CMlQuad);
								declare CMlEntry  entry_titleid	<=> (Page.MainFrame.GetFirstChild("entry_titleid") as CMlEntry);
								declare CMlEntry  Label_titleid	<=> (Page.MainFrame.GetFirstChild("Label_titleid") as CMlEntry);
								entry_titleid.Show();
								entry_titleid.StartEdition();
								Label_titleid.Hide();
								//Quad_FgNew.Hide();

							}
						}
						case CMlEvent::Type::MouseOver: {
							if (Event.ControlId == "Quad_LoadSelect" || Event.ControlId == "Quad_BgNewCreate")
							{
								declare CMlQuad Quad_RollOver <=> (Event.Control as CMlQuad);
								Quad_RollOver.BgColor = <0.6, 0.6, 0.6>;
							}
							else if (Event.ControlId == "Quad_FgNew")
							{
								declare CMlQuad  Quad_BgNew	<=> (Page.MainFrame.GetFirstChild("Quad_BgNew") as CMlQuad);
								declare CMlEntry  entry_titleid	<=> (Page.MainFrame.GetFirstChild("entry_titleid") as CMlEntry);
								declare CMlLabel  Label_titleid	<=> (Page.MainFrame.GetFirstChild("Label_titleid") as CMlLabel);
								Label_titleid.SetText(entry_titleid.Value);
								Label_titleid.Show();
								entry_titleid.Hide();
								Quad_BgNew.BgColor = <0.8, 0.8, 0.8>;
							}
						}
						case CMlEvent::Type::MouseOut: {
							if (Event.ControlId == "Quad_LoadSelect" || Event.ControlId == "Quad_BgNewCreate")
							{
								declare CMlQuad Quad_RollOver <=> (Event.Control as CMlQuad);
								Quad_RollOver.BgColor = <0., 0., 0.>;
							}
							else if (Event.ControlId == "Quad_FgNew")
							{
								declare CMlQuad  Quad_BgNew	<=> (Page.MainFrame.GetFirstChild("Quad_BgNew") as CMlQuad);
								declare CMlEntry  entry_titleid	<=> (Page.MainFrame.GetFirstChild("entry_titleid") as CMlEntry);
								declare CMlLabel  Label_titleid	<=> (Page.MainFrame.GetFirstChild("Label_titleid") as CMlLabel);
								Label_titleid.Hide();
								entry_titleid.Show();
								Quad_BgNew.BgColor = <0., 0., 0.>;
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "GetStations" : {
									DisplayStations();
								}
							}
						}
					}
				}
			}
		}
	--></script>
</manialink>
""";

    declare L = UILayerCreate();
    L.ManialinkPage = TitleAndInfo ^ EditOrCreate;
    L.IsVisible = True;

	return L;
}

Void Init() {
    LayersDefaultManialinkVersion = 3;
	Station.DisableQuickEnter = True;
	Station.IsLogoVisible = True;

}

Void ShowPage(CUILayer _Layer, Integer _PageIndex) {
	declare Text[] Station_DefaultStation		for _Layer.LocalPage;
	declare Integer Station_CurrentPage			for _Layer.LocalPage;
	declare Integer Station_MaxPageNb			for _Layer.LocalPage;

	G_CurrentPage = _PageIndex;
	if (Maker_EditedTitles.count == 0) {
		G_MaxPages = 0;
	} else {
		G_MaxPages = ((Maker_EditedTitles.count - 1) / C_MaxTitlesPerPage) + 1;
	}
	Station_DefaultStation.clear();
	for (IndexInPage, 0, C_MaxTitlesPerPage - 1) {
		declare Integer DataIndex		= IndexInPage + C_MaxTitlesPerPage * _PageIndex;
		if (Maker_EditedTitles.existskey(DataIndex)) {
			declare CPackCreatorTitleInfo EditedTitle <=> Maker_EditedTitles[DataIndex];
			declare Text Name = EditedTitle.DisplayName;
			if (Name == "") {
				Name = "" ^ EditedTitle.TitleId;
			}
			Station_DefaultStation.add(Name);
		}
	}
	Station_CurrentPage		= G_CurrentPage + 1;
	Station_MaxPageNb		= G_MaxPages;
	LayerCustomEvent(_Layer, "GetStations", Text[]);
}

main() {
	Init();
	declare Layer = CreateLayer();
	yield;
	ShowPage(Layer, 0);

    while (True) {
        yield;

        foreach (Event in PendingEvents) {
			if (Event.Type != CManiaplanetPluginEvent::EType::LayerCustomEvent) {
				continue;
			}
			declare Text	Maker_TitlePackStateFromStation			for LocalUser;
			declare Boolean Maker_RefreshTitlePackStateFromStation	for LocalUser;
			switch (Event.CustomEventType) {
				case "EditNewTitle": {
					declare Entry = (Layer.LocalPage.GetFirstChild("entry_titleid") as CMlEntry);
					if (TL::Length(Entry.Value) <= 2) {
						//L16N title is a specific term : it is similar to a game
						Dialog_Message(_("Please enter the title name to create a new title"));
					} else {
						Maker_TitlePackStateFromStation = "New";
						Maker_RefreshTitlePackStateFromStation = True;
						Maker_EditNewTitle(Entry.Value);
					}
				}
				case "EditTitle": {
					Maker_TitlePackStateFromStation = "Load";
					Maker_RefreshTitlePackStateFromStation = True;
					declare Integer MakerIndex = TL::ToInteger(Event.CustomEventData[0]);
					declare Integer DataIndex	= MakerIndex + C_MaxTitlesPerPage * G_CurrentPage;
					Maker_EditTitle(""^Maker_EditedTitles[DataIndex].TitleId);
				}
				case "Maker_Station_PageDown": {
					ShowPage(Layer, G_CurrentPage - 1);
				}
				case "Maker_Station_PageUp": {
					ShowPage(Layer, G_CurrentPage + 1);
				}
			}
        }
    }
}
